"use strict";

// User Use Cases
var UU = (function() {
	var isClassDataLoadInProgress = true
	var my = {};

	my.campusLoadDone=false;
	my.inputParams={courses:"",nopinon:[],src:"",pinAlso:false};

	var loadStateListeners = [];
	
	my.onLoadState = function(l){
		loadStateListeners.push(l);
	}
	
	// This should not be run before initEntranceDom is complete
	// (which may include calling getAcademicPlans)
	function loadState(state,pinAlso,isrec,isfav) {
		
		if (state.indexOf("shared=1")>=0) {
			pinAlso=true;
			isfav=true;
		}
		if (state.indexOf("nopin=1")>= 0) {
			pinAlso=false;
		}
		
		if (my.inputParams!=null) {
			my.inputParams.courses=CC.paramOfStr(state,"courses","");
			my.inputParams.nopinon=CC.paramOfStr(state,"nopinon","").split(",");
			my.inputParams.src=CC.paramOfStr(state,"src","");
			my.inputParams.pinAlso=pinAlso;
		}
		
		var already=(typeof BB !== 'undefined');
		window.BB=new BState(state);
		if (BB.legend && !already) {
			RR.toggleLegend();
		}
		
		// Auto Term Select
		var wasAutoTerm=false;
		if (BB.activeState.term==0 && !holdWelcome) {
			wasAutoTerm=selectTermIfCan();
		}
		if (BB.activeState.term!=0) {
			initActiveStateTerm(BB.activeState.term);
		}
		
		PAGES.filterRecommendations(BB.activeState.term);
		
		// 0=show until action (removed)
		// 1=welcome.jsp (removed)
		// 2=welcome (with continue when holdWelcome=true or mobile)
		// 3=select term (with welcome if holdWelcome=false)
		// 4=select recommendation (with welcome if holdWelcome=false and
		// recOnSoleTerm)
		// 9=generated results (can have noResults or noCnfs overlay)
		var wv=holdWelcome?2:3;
		if (BB.activeState.term!=0) {
			wv=BB.activeState.getVisibleCnfs().length>0?9:8;
			if ( wasAutoTerm && EE.dispRecsForTerm(BB.activeState.term)>0 ||
				(!isrec && EE.isCompulsoryRecsForTerm(BB.activeState.term)) ) {
				wv=4;
			}
		}
		BB.welcome=wv;
		
		console.log("loadState term:"+BB.activeState.term+" welcome="+BB.welcome+" cnfs="+BB.activeState.cnfs.length);
		

		PAGES.settleWindow();
		RR.renderSort(BB.activeState.sort);
		RR.renderFilter(BB.activeState.filter);
		SLIDER.renderSlider();
		renderFavorites();
		for (var ai=0; ai<EE.activeStateChangeListeners.length; ai++) {
			EE.activeStateChangeListeners[ai]();
		}

		updateAccess(true);

		// Get the keys we want
		var cnfs=BB.activeState.cnfs;
		var keys=[];
		for (var i=0;i<cnfs.length;i++) {
			var cnf=cnfs[i];
			if (isrec) {
				cnf.isrec=true; // may already be true if F5
			}
			if (isrec||isfav) {
				cnf.baggage="ACCEPT";
			}
			if (isrec&&!cnf.lockdrop) {
				cnf.baggage="ACCEPT_CHANGE";
			}
			if (!(cnf.drop.indexOf("dp_")==0) && !cnf.ignore) {
				var key=cnf.cs;
				if (key==null) key=cnf.cnKey;
				keys.push(key);
			}
		}

		BB.activeState.loadEnrollmentState(function() {
			doInitialCampusSelection(BB.activeState);
			BB.activeState.process(function() {
				if (pinAlso) {
					BB.activeState.applySelkeysToDropdowns(keys);
					// Process a second time because dropdowns may have changed
					BB.activeState.process();
				}
				PAGES.safariSettle();
			});

			if (BB.activeState.term && BB.activeState.term > -1) {
				loadStateListeners.forEach(function(l){ l(); });
			}
		});

		EE.updateManuTermState(BB.activeState.term);
		EE.updateImportButtons(BB.activeState.term);
		EE.updateWelcomeInputDetail();
		my.loadEnrollmentEncouragement();
	}

	my.caseF5 = function() {
		var state=window.location.search.substring(1);
		loadState(state,false);
	}

	my.caseAddCourses = function(itemnames,complete,skipProcess,isImport,ack,extras,nopinons,strict,skipStateToUrl) {
		if (itemnames=="0") return;
		UU.caseAddCourse(itemnames,null,null,function() {
			BB.activeState.outdated=true;
			if (skipProcess) {
				if (complete) complete();
			} else {
				BB.activeState.process(complete);
			}
			if (!skipStateToUrl) {
				sendStateToUrl(true);
			}
		},isImport,ack,extras,nopinons,strict);
	}
	
	my.caseImportQueue = function(courses) {
		if (courses.length==0) {
			RR.addBadWarning("Course Queue is empty.",false,false);
		} else if (BB.activeState.term==null || BB.activeState.term=="0") {
			RR.addBadWarning(i8n.chooseTerm,false,false);
		} else {
			if (checkCompulsory(BB.activeState.term,"import the queue")) {
				return;
			}
			UU.caseAddCourses(courses,function() {
				RR.addGoodWarning("Course Queue imported.",false,true);
			},false,true,true);
		}
	}

	function depth(group) {
		var maxDepth = 0;
		
		(group.groups || []).forEach(function (g) {
			maxDepth = Math.max(depth(g) + 1, maxDepth);
		})
		
		return maxDepth;
	}
	
	var classLoadTimer=null;
	my.caseImportPlan = function(planHeaderId,pinAlso,planTitle,complete) {
		$(".eeLoadingAnimation").addClass("eeLoadingAnimationSee");
		if (UU.isClassDataLoadInProgress){
			//console.log("Class Data loading in progress");
			clearTimeout(classLoadTimer);
			classLoadTimer=setTimeout(function() {my.caseImportPlan(planHeaderId,pinAlso,planTitle,complete)},2000);
			return;
		}
		clearTimeout(classLoadTimer);
		$(".eeLoadingAnimation").removeClass("eeLoadingAnimationSee");
		my.caseImportPlanNow(planHeaderId,pinAlso,planTitle,complete);
	}
	
	// Return true if choices need to be made
	my.caseImportPlanNow = function(planHeaderId,pinAlso,planTitle,complete) {
		if (planHeaderId=="0") {
			if (complete) complete();
			return false;
		}
		var header=MM.planHeaders[planHeaderId];
		var term=header.termCode;
		if ((!header.planRecInfo||!header.planRecInfo.compulsory) && checkCompulsory(term,"import this plan")) {
			if (complete) complete();
			return false;
		}
		//console.log("header.planRecInfo: "+header.planRecInfo);
		BB.activeState.planLink=planHeaderId;
		var group=header.planGroup;
		
		// For testing (see planloader.js)
		// group=example[0];
		
		var courses="";
		var extras=[];
		var groupsDepth = depth(group);
		
		var level1Union=false;
		if (groupsDepth==1) {
			group.groups.forEach(function(g) {
				if (g.type!="Choice") level1Union=true;
			});
		}
		
		function plannedCourseToCourseInput(pc) {
			var inp="";
			//console.log("plannedCourseToCourseInput: ");
			if (pc.courseOfferNumber) {
				inp+=":"+pc.institution+"-"+pc.courseId+"-"+pc.courseOfferNumber;
			} else {
				inp+=(pc.code?pc.code:"@")+"-"+(pc.courseNumber?pc.courseNumber:"@"); 
				if (pc.attribute) {
					// Attribute could be requirement designation,
					// or Course/Class core attribute
					inp+="-"+pc.attribute; 
				}
			}
			if (pc.sequenceNumber) {
				inp+=' seq:'+pc.sequenceNumber;
			}
			//console.log("inp: "+inp);
			return inp;	
		}
		
		var importPlanToWildcardsIfPossible=true;
		if (group && group.type=="Union" && (!group.groups || group.groups.length==0 || groupsDepth <= 0 || (groupsDepth==1 && !level1Union && importPlanToWildcardsIfPossible))) {
			//console.log("group: "+group);
			for (var i=0;i<group.plannedCourses.length;i++) {
				// Convert to AND's
				var pc=group.plannedCourses[i];
				vaMap[pc.title.trim()]=pc.validation;
				if (courses.length>0) courses+=",";
				courses+=plannedCourseToCourseInput(pc);
				extras.push(pc);
			}
			if (groupsDepth == 1) {
				// Convert to OR's
				for (var g=0;g<group.groups.length;g++) {
					var inp="";
					for (var i=0;i<group.groups[g].plannedCourses.length;i++) {
						var pc=group.groups[g].plannedCourses[i];
						vaMap[pc.title.trim()]=pc.validation;
						if (inp.length>0) inp+="||";
						inp+=plannedCourseToCourseInput(pc);
						extras.push(pc);
					}
					if (courses.length>0) courses+=",";
					courses+=inp;
				}
			}
			
		} else {
			// Nested plan importer
			//console.log("else group: "+group);
			PL.doPlanImport(header,complete);
			return true;
		}

		var complete2 = function(complete) {
			RR.displayAdvice(planHeaderId);
			UU.caseAddCourses(courses,function() {
				RR.addGoodWarning("Plan '"+planTitle+"' imported.",false,true);
				$(".myPlanImportSelect").val("0");
				sendStateToUrl(true);
			},false,true,true,extras);
			console.log("import complete");
			RR.renderMyPlanImport();
			if (complete) complete();
		}

		if (BB.activeState.term!=term) {
			my.caseChangeTerm(term,complete2(complete));
		} else {
			complete2(complete);
		}
		return false;
	}
	
	my.caseAdviseStudentUi = function() {
		$(".main_menu_button").click();
		setTimeout(function() {
			$(".mi_behalf").click();
		}, 500);
	}

	my.caseChangeLanguage = function(lang) {
		BB.lang=lang;
		sendStateToUrl(true);
		window.location.reload(false);
	}

	my.caseLoadFavorite = function() {
		var state= ((BB.access)?"&access=1":"")+BB.previewState.toStr();
		// FIXME - there is a better way
		
		
		var term=CC.paramOfStr(state,"term","0");
		
		if (checkCompulsory(term,"load this favorite")) return;
		
		
		loadState(state,true,false,true);
		sendStateToUrl(true);
	}

	my.caseLoadRecommendation = function(state, reportParams, planHeaderId) {
		if (reportParams && !isAdvising) {
	  		$.ajax({
				url:"api/v2/recommendations/opened" + reportParams,
				type:"POST"
			});
		}
		// Override page to be criteria
		if (state.indexOf("&page=")<0) {
			state+="&page=criteria";
		}
		if (planHeaderId) state=replaceUrlParam(state,"pl",planHeaderId);
		loadState(state,false,true); // 0202
		sendStateToUrl(true);
	}

	my.caseBackButton = function() {
		my.caseF5();
	}

	var creTotalInst2=null;
	var encouragementMessages;
	var encouragementMessagesTerm=0;
	
	my.loadEnrollmentEncouragement = function() {
		var term=BB.activeState.term;
		
		var newTerm=encouragementMessagesTerm!=term;
		encouragementMessagesTerm=term;
		
		var newCredits=!deepEquals(creTotalInst2,creTotalInst);
		creTotalInst2=creTotalInst;
		
		if (!encouragementMessages || newTerm) {
			// Get EE
			encouragementMessages=[];
			if (term==0) {
				my.updateEnrollmentEncouragement();
			} else {
				$.ajax({
					type: "GET",
					url: "api/v2/enrollment-encouragement",
					data: {term: term}
				}).done(function(data) {
					encouragementMessages = data;
					my.updateEnrollmentEncouragement();
				});
			}
		} else if (newCredits) {
			my.updateEnrollmentEncouragement();
		}
		
	}

	my.updateEnrollmentEncouragement = function() {
		var messages = encouragementMessages.filter(function(item){
			if (!item.cu_co_att_unt_flag) {
				return true;
			}

			// Check current units
			return creTotalInst.filter(function(c) {
				var m= item.institution === c.institution
					&& item.career === c.ac
					&& (!item.cur_unit_acad_prog || item.cur_unit_acad_prog === c.prog)
					&& (!item.cur_unit_acad_plan || item.cur_unit_acad_plan === c.plan)
					&& item.cur_unit_from <= c.credits
					&& item.cur_unit_to >= c.credits;
				return m;
			}).length;
		});
		
		var messagesTxt = [];
		
		// Remove possible duplicated messages
		messages.forEach(function(item){
			if (messagesTxt.indexOf(item.page_instructions) > -1) {
				return;
			}
			
			messagesTxt.push(item.page_instructions);
		});
		
		var messagesHtml = "";
		messagesTxt.forEach(function(item){
			messagesHtml += "<div>" + item +"</div>";
		})
		
		
		$(".enrollmentEncouragement").html(messagesHtml).toggle(messagesHtml.length>0);

	}
	
	my.caseStartAdvising = function(userid,saveTerm) {
		$(".behalf_start_button").attr("disabled",true).find(".loadingAdvising").css("visibility","visible");
		$(".behalf_cancel_button").attr("disabled",true);
		var advise = function() {
			$.getJSON("api/startAdvising?userid="+userid,function(data) {
				if (data.error!=null) {
					$(".page_hider").show();
					$(".set_advisee_response").text(data.error);
					$(".set_advisee_info").show();
					$(".mi_message_box").each(function(){
						var box = $(this);
						if (box.parent().find(".mi_behalf_start").is(':visible')){
							box.text(data.error).show();
						}
					})
				} else {
					clearSearch(saveTerm);
				}
			}).fail(function() {
				var prob="Error advising "+(userid?userid:"<No User>");
				$(".set_advisee_response").text(prob);
				$(".set_advisee_info").show();
				$(".mi_message_box").each(function(){
					var box = $(this);
					if (box.parent().find(".mi_behalf_start").is(':visible')){
						box.text(prob).show();
					}
				})
			}).always(function() {
				$(".behalf_start_button").attr("disabled",false).find(".loadingAdvising").css("visibility","hidden");
				$(".behalf_cancel_button").attr("disabled",false);
			});
		}
		if (typeof Profiler !== 'undefined' && typeof Profiler.exists !== 'undefined') {
			Profiler.reportToServer(advise);
		} else {
			// Case if called by advisee.jsp
			advise();
		}
	}

	my.caseStopAdvising = function() {
		$.getJSON("api/stopAdvising",function(data) {
			clearSearch(true);
		});
	}

	my.caseToggleAccess = function() {
		BB.access=!BB.access;
		AutoSuggest.accessibility = BB.access;
		updateAccess();
		sendStateToUrl(true);
	}
	
	my.caseToggleLegend = function() {
		RR.toggleLegend();
		setCookie("legend",BB.legend?"1":"0",30);
		sendStateToUrl(true);
	}

	my.caseChangeTermIfOkay = function(term, listener,skipPromissory) {
		if (!skipPromissory) {
			RR.custUserAgreement(function(){my.caseChangeTermIfOkay(term, listener, true)}, "TERM_SELECTION_CLICK", term);
			return;
		}
		var doChange = function() {
			UU.caseChangeTerm(term);
			if (EE.dispRecsForTerm(term)>0) {
				BB.welcome=4;
			} else {
				BB.welcome=9;
			}
			if (listener) {
				listener();
			}
		}
		
		if (BB.activeState.isTransient() && termChangeLossWarning) {
			var revertTerm = function() {
				$("#term_"+BB.activeState.term).prop("checked", true);
				$("#phone_term_select").val(BB.activeState.term);
			}
			var buttons=[{name:"Cancel",action:revertTerm},{name:"Continue",action:doChange}];
			RR.popNotice(i8n.loseData,buttons,revertTerm);
		} else {
			doChange();
		}
	}
	
	// Called when Term changed or init
	function initActiveStateTerm(term) {
		// Determine Instructions Modes for this term
	    msinstructForTerm=[];
	    for (var i=0;i<msinstruct.length;i++) {
	    	var imtextTerm=msinstruct[i].term;
			if (!imtextTerm || imtextTerm==term) {
		    	msinstructForTerm.push(Object.assign({}, msinstruct[i]));
			}
		}
	}
	
	// Called when Term changed, but not on init
	function setActiveStateTerm(term) {
		initActiveStateTerm(term);
		BB.activeState.term=term;
		if (defaultCamsPerTerm&&defaultCamsPerTerm[term]) {
			var campusKeys = defaultCamsPerTerm[term].split("_");
			var tcams={};
			for (var n=0; n<campusKeys.length; n++) {
				if (!campusKeys[n]) continue;
				tcams[campusKeys[n]]=true;
			}
			BB.activeState.cams=tcams;
		}		
	}
	
	my.caseChangeTerm = function(term,complete) {
		if ($("body.get-schedule").length>0) {
			cancelScheduleClick();
		}
		
		var wasChange=false;
		if (term!=BB.activeState.term) {
			Profiler.reportToServer(); // Do this now so we report the correct
										// previous term
			BB.activeState.pac=true;
			wasChange=true;
		}
		
		setActiveStateTerm(term);
		BB.activeState.cnfs=[];
		BB.activeState.bbs=[];
		BB.activeState.outdated=true;
		$(".noteAck").remove();
		
		PAGES.filterRecommendations(term);
		renderFavorites();
		EE.updateManuTermState(term);
		EE.updateImportButtons(term);
		
		if (wasChange) {
			for (var ai=0; ai<EE.activeStateChangeListeners.length; ai++) {
				EE.activeStateChangeListeners[ai]();
			}
			$("#degreeCounter").empty();
		}
		
		BB.activeState.loadEnrollmentState(function() {
			BB.activeState.process(function() {
				doInitialCampusSelection(BB.activeState);
				if (complete) complete();
			});
			sendStateToUrl(true);
		});
	}

	my.caseChangeTimezone = function(tz) {
		BB.tz=timezones[tz-1];
		BB.activeState.outdated = true;
		renderResult();
	}
	
	my.caseImportCourseQueue = function() {
		QQ.importCourseQueue();
		sendStateToUrl(true);
	}

	my.caseChangeCoreOption = function(cnfid,cnKey) {

		function scopepreFoc(cnfid) {
			return function() {
				$(".coreSelect"+cnfid).focus();
				fastHide=false;
			}
		}

		fastHide=true;
		var repI=-1;
		for (var i=0;i<BB.activeState.cnfs.length;i++) {
			if (BB.activeState.cnfs[i].cnfid==cnfid) {
				repI=i;
			}
// if (BB.activeState.cnfs[i].cnKey==cnKey) {
// // already found!
// $(".coreSelect"+cnfid).val(null);
// setTimeout(function() {
// var buttons=[{name:"OK",action:function() {popupNotice.close();}}];
// RR.popNotice(cnKey+" is already in your course list. Try a different
// one.",buttons);
// },200);
// return;
// }
		}
		if (repI>=0) {
			var oldCnf=BB.activeState.cnfs[repI];
			var nCnf=null;
			
			// If selected dropdown happens to be baggage, make baggage primary
			if (oldCnf.baggage && oldCnf.baggage.cnKey==cnKey) {
				nCnf=BB.activeState.chooseBaggageOptionFor(oldCnf);
			} else {
				nCnf=new CodeNumberFilter(cnKey,"al",oldCnf.reqId, null, null, null, null, null, null, oldCnf.lock, oldCnf.lockdrop, oldCnf.isrec, null, null, null, oldCnf.seq, oldCnf.baggage,null,null);
				if (oldCnf.enr.length>0) {
					oldCnf.setBaggageTrue();
					nCnf.baggage=oldCnf;
					BB.activeState.cnfs.splice(repI,0,nCnf);					
				} else {
					BB.activeState.cnfs[repI]=nCnf;
				}
			}

			nCnf.studentSelected=true;
			
			// Check to see if in cart. If so, remove it.
			if (oldCnf.cart.length>0 && !disableCart) {
				clickRemoveFromCart(oldCnf.cart);
				oldCnf.cart="";
				RR.addGoodWarning( i8n.removed+ " '" + cleanCnKey(oldCnf.cnKey) + "' "+i8n.fromShoppingCart);
			}
			
			BB.activeState.outdated=true;
			BB.activeState.process(scopepreFoc(nCnf.cnfid));
			sendStateToUrl(true);
		}
	}

	// Will run "complete" when done, unless it's undefined, in which case
	// it will process.
	my.caseAddCourse = function(itemnames,input,reason,complete,isImport,ack,extras,nopinons,strict) {
		if (itemnames==null || itemnames=="") {
			if (complete) complete();
			return;
		}
		if (BB.activeState.term==null || BB.activeState.term=="0") {
			RR.addBadWarning(i8n.chooseTerm);
			if (complete) complete();
			return;
		}

		var cur="";
		for (var i=0;i<BB.activeState.cnfs.length;i++) {
			var cnf=BB.activeState.cnfs[i];
			if(itemnames == cnf.cnKey) {
				// If the course is selected but ignored, un-ignore it.
				my.caseChangeIgnore(cnf,false)
				return;
			}
			if (i>0) cur+=",";
			cur+=cnf.cnKey;
		}

		// Add filter and process
		RR.showLoadingDiv(true);
		
		// Validations will be performed against itemnames originated from vsb
		// only
		var validations = itemnames.split(",")
			.map(function(item){
				// Removed 'seq' in case of subblocks
				item = item.split('seq:')[0].trim();
				// Removed leading ':'
				item = item.replace(':','');
				return vaMap[item];
			}).join(",");
		//console.log(new Date().toLocaleTimeString() + " string-to-filter call " + itemnames);	
		$.post("api/string-to-filter",{term:BB.activeState.term,validations:validations,itemnames:itemnames,input:input,reason:reason,current:cur,
			isimport:(isImport?"1":"0"),strict:(strict?"1":"0"),extras:JSON.stringify(extras)},function(data) {
			//console.log(new Date().toLocaleTimeString() + " string-to-filter call done");
			if(data.error) {
				RR.addBadWarning(data.error);
				RR.showLoadingDiv(false);
				return;	
			}
			var addedKeys=[];
			var cnfsPreImport = Array.from(BB.activeState.cnfs || []);
			for (var i=0; i<data.length; i++) {
				var entry=data[i];
				vaMap[entry.cnKey]=entry.va;
				if (entry.error) {
					RR.addBadWarning(entry.error,false,ack);
					continue;
				}
				if (entry.warn) {
					RR.addBadWarning(entry.warn,false,ack);
				}
				
				MM.addReqIdOptions(BB.activeState.term,entry.reqId,entry.options);
				
				// Choose first valid option for selected campuses.
				var voptions=filterOptions(entry.options,BB.activeState.cams,"");
				if (voptions.length>=1) {
					// Try to use the one provided if it's in here
					var defInd=0;
					for (var vi=0;vi<voptions.length;vi++) {
						if (voptions[vi].cnKey==entry.cnKey) {
							defInd=vi;
							break;
						}
					}
					entry.cnKey=voptions[defInd].cnKey;
				} else if (entry.reqId.length>0){
					RR.addBadWarning("Option '"+entry.reqId+"' is not available at the selected college(s)",false,ack);
					continue;
				}
				
				var drop=entry.drop;
				if (nopinons) {
					// If we want 'no pin on' a given ClassNbr, then
					// remove the pin.
					for (var j=0;j<nopinons.length;j++) {
						var o=nopinons[j];
						if (o.length<=0) continue;
						var rex=new RegExp("[^0-9]"+o+"([^0-9]|$)");
						if (entry.drop.match(rex)) {
							drop="al";
						}
					}
				}
				
				var cnf=new CodeNumberFilter(entry.cnKey,drop,(entry.reqId.length>0?entry.reqId:false),null,null,null,null,null,null,null,null,null,null,null,null,entry.seq,(isImport?"ACCEPT_CHANGE":null),null);
				cnf.searchByClass=entry.reason=="CLASS_NUMBER"?entry.input:"0";
				var forIns=false;
				if (entry.reason=="TEACHER") {
					forIns=true;
					cnf.teacherFilter=entry.input;
				}
				if (!(complete)) {
					RR.addGoodWarning(i8n.adding+ "'"+cleanCnKey(cnf.cnKey)+"'... "+(template=="spc"?i8n.pleaseWait+"...":""),true);
				}
				if (BB.activeState.addCodeNumberFilter(cnf,isImport?+entry.cnfcount:9999,false,true,isImport,cnfsPreImport)) {
					addedKeys.push(cnf.cnKey);
				}
			}

			RR.showLoadingDiv(false);
			
			if (complete) {
				complete();
			} else {
				if (addedKeys.length>0) {
					BB.activeState.process(function() {
						for (var i=0;i<addedKeys.length;i++) {
							RR.addGoodWarning(i8n.theCourse+ " '" + cleanCnKey(addedKeys[i]) + "' " +i8n.wasAdded + " " + (forIns?i8n.forInstructor:""));
						}
						sendStateToUrl(true);
					});
				}
			}

		},"json").fail(function() {
			RR.addBadWarning(i8n.verifyInternetConnection);
			RR.showLoadingDiv(false);
		});
	}

	my.caseRemoveCourse = function(cnfid,canRestore,noInstantDrop) {
		var ids=BB.activeState.getJoinedCnfIds(cnfid);
		for (var i=0;i<ids.length;i++) {
			BB.activeState.removeCodeNumberFilter(ids[i],function() {
				// nothing yet
			},canRestore,noInstantDrop);
		}
		BB.activeState.removeCodeNumberFilter(cnfid,function() {
			BB.activeState.process();
			sendStateToUrl(true);			
		},canRestore,noInstantDrop);
	}

	my.registerCourse = function($btn) {
		var reqDiv = $btn.parents('.requirementDiv2');
		var cnfid = reqDiv.data('cnfid');
		var cnf=BB.activeState.getCnf(cnfid);
		var sectionKey=reqDiv.find("select.dropdownSelect").val();
		var selKey = sectionKey;
		if(sectionKey.indexOf("us_")==0){
			sectionKey = sectionKey.substring(3);
			selKey = sectionKey;
		}
		var credits = "";
		var creditsMax="";
		var usels = cnf.cnPro.cn.usels;
		loop1:
		for(var x = 0; x < usels.length; x++){
			var usel = usels[x];
			var sels = usel.sels;
			loop2:
			for(var y = 0; y < sels.length; y++){
				var sel = sels[y];
				if(sectionKey == sel.key) {
					sectionKey = sels[y].classes[0].key;
					credits = sels[y].credits;
					creditsMax=sels[y].creditsMax;
					break loop1;
				}
			}
		}
		//used by colleague quick register only. doing credit range check instead of option ajax
		if(credits != creditsMax){
			var wh="<div class='cbox-warnings'>";
			wh+="You cannot use the one-click register method for this course because there are options to select. Instead, click the \"Continue\" button under the displayed Schedule Result to register for this course.";
			wh+="</div>";
			reqDiv.find(".cbox-expansion").before(wh);
			return;
		}
		var stateA = "T";
		var keyA = selKey;
		var vaA = vaMap[keyA];
		var stateB = "E";
		var keyB = selKey;
		var vaB = vaMap[keyB];
		var url ="api/perform-action?statea0="+stateA+"&keya0="+keyA+"&vaa0="+vaA+"&vab0="+vaB+"&stateb0="+stateB+"&keyb0="+keyB+"&schoolTermId="+BB.activeState.term;
		$.ajax({
			type: "GET",
			url: url
		}).fail(function(){
			if(reqDiv.find(".cbox-warnings")){
				reqDiv.find(".cbox-warnings").remove();
			}
			var wh="<div class='cbox-warnings' style='color:#444444')> ";
			wh+="Server 500 Error. Please try after sometime.";
			wh+=" </div>";
			reqDiv.find(".cbox-expansion").before(wh);
		}).done(function(data) {
			
			if(reqDiv.find(".cbox-warnings")){
				reqDiv.find(".cbox-warnings").remove();
			}
			
			var wh="<div class='cbox-warnings'>";
			if(data && data.length > 0){
				wh+=data;
				wh+="</div>";
				reqDiv.find(".cbox-expansion").before(wh);
			} else {
				cnf.enr=cnf.auth;
				$btn.parent().remove();
				var s="";
				if (cnf.enr) {
					s=i8n.enrolled;
					if (cnf.waiting) {
						s=i8n.waitlisted;
					}
					if (cnf.audited) {
						s=i8n.audited;
					}
				}
				/*if (cnf.cart) {
					if (s.length>0) s+=" &amp; ";
					s+=i8n.inShoppingCart;
				}*/
				if(s == i8n.enrolled){
					reqDiv.find(".cnf_register_button").hide();
				}
				reqDiv.find(".course_state").html(s).toggle(s.length>0);
			}
		});
	}

	my.caseToggleCourseLock = function(cnfid) {
		if (!isAdvisor) return;
		var cnf=BB.activeState.getCnf(cnfid);
		if (cnf==null) return;
		cnf.lock=!cnf.lock;
		if (cnf.ignore) {
			cnf.ignore=false;
			BB.activeState.outdated=true;
		}
		if (!cnf.lock && cnf.lockdrop) {
			cnf.lockdrop=false;
			BB.activeState.outdated=true;
		}
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseToggleDropLock = function(cnfid) {
		if (!isAdvisor) return;
		var cnf=BB.activeState.getCnf(cnfid);
		if (cnf==null) return;

		cnf.lock=true;
		cnf.ignore=false;

		cnf.lockdrop=!cnf.lockdrop;
		if (cnf.lockdrop && !cnf.isPinned()) {
			cnf.pin(true);
		}
		BB.activeState.outdated=true; // Needed only for icon update
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseWelcomeBack = function() {
		BB.welcome--;
		if (BB.welcome==2) {
			my.caseChangeTerm(0);
		}
		PAGES.renderCurrentPage();
	}
	
	my.caseWelcomeDoubleBack = function() {
		BB.welcome-=2;
		my.caseChangeTerm(0);
		PAGES.renderCurrentPage();
	}
	
	function selectTermIfCan() {
		if (selectTermIf1) {
			if (EE.displayedTerms().length==1) {
				setActiveStateTerm(EE.displayedTerms()[0]);
				return true;
			} else if (defaultSchoolTermId>0) {
				if (EE.terms[defaultSchoolTermId]) {
					setActiveStateTerm(defaultSchoolTermId);
					return true;
				}
			}
		}
		return false;
	}
	
	my.caseWelcomeContinue = function() {
		if (BB.activeState.term==0) {
			if (selectTermIfCan()) {
				my.caseTermContinue(BB.activeState.term);
			} else {
				BB.welcome=3
			}
		} else {
			BB.page="criteria"
			BB.welcome=9
		}
		PAGES.renderCurrentPage();
		$(".main_menu_button").first().focus();
	}

	my.caseTermContinue = function(term, skipPromissory) {
		if (!skipPromissory) {
			RR.custUserAgreement(function(){my.caseTermContinue(term, true)}, "TERM_SELECTION_CLICK", term);
			return;
		}
		if (term) {
			UU.caseChangeTerm(term);
		}
		if (EE.dispRecsForTerm(term)>0) {
			BB.welcome=4;
			PAGES.renderCurrentPage();
		} else {
			my.caseWelcomeDone();
		}
		$(".main_menu_button").first().focus();
	}
	
	my.caseWelcomeDone = function(term, skipRec) {
		if (term) {
			UU.caseChangeTerm(term);
		}
		my.caseViewCriteria();
		$(".main_menu_button").first().focus();
	}
	
	my.caseViewCriteria = function() {
		BB.page="criteria";
		BB.welcome=9;
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseViewResults = function() {
		BB.page="results";
		BB.welcome=9;		
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseViewFavorites = function() {
		BB.page="favorites";
		BB.welcome=9;
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseChangeFilter = function(cams,locs,instruct,session) {
		BB.activeState.cams=cams;
		BB.activeState.locs=locs;
		BB.activeState.instruct=instruct;
		BB.activeState.session=session;
		BB.activeState.outdated=true;
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseChangeCampusAmmend = function(cnf,cam,isSelected) {
		if (cnf) {
			if (isSelected) {
				cnf.ca[cam]=true;
				delete cnf.cr[cam];
			} else {
				delete cnf.ca[cam];
				cnf.cr[cam]=true;
			}
		}
		BB.activeState.outdated=true;
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseChangePeriod = function(cnf,cpn) {
		cnf.cpn=cpn;
		my.caseChangeSection(cnf,"");
	}

	my.caseChangeSection = function(cnf,csn) {
		cnf.csn=csn;
		my.caseChangeDropdown(cnf,"al");
	}

	my.caseChangeDropdown = function(cnf,drop) {
		var dropAll=drop.indexOf("dp_")==0;
		var keepAll=drop.indexOf("kp_")==0;
		if (dropAll||keepAll) {
			var ids=BB.activeState.getJoinedCnfIds(cnf.cnfid);
			$.each(ids,function(i,id) {
				var cnf2=BB.activeState.getCnf(id);
				if (dropAll) {
					cnf2.drop=cnf2.drop.replace("kp_","dp_");
				} else {
					cnf2.drop=cnf2.drop.replace("dp_","kp_");
				}
				cnf2.cs="";
			});
		}
		cnf.oldDrop="al"; // In case "Try online only", choose class that isn't online from dropdown
		cnf.setDrop(drop);
		cnf.cs="";

		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.showHideRegisterButton = function(cnf,dropValue, selectBox) {
		var reqDiv = selectBox.parents('.requirementDiv2');
		if(dropValue == "ss" || dropValue == "al"){
			reqDiv.find(".cnf_register_button").hide();
		} else {
			reqDiv.find(".cnf_register_button").show();
		}
	}

	my.caseChangeIgnore = function(cnf,ignore) {
		var ids=BB.activeState.getJoinedCnfIds(cnf.cnfid);
		$.each(ids,function(i,id) {
			var cnf2=BB.activeState.getCnf(id);
			cnf2.ignore=ignore;
		});
		cnf.ignore=ignore;
		// TODO If enrolled, change dropdown to "drop".
		BB.activeState.outdated=true;
		cnf.allowExpand=true;
		BB.activeState.process();
		cnf.allowExpand=false;
		sendStateToUrl(true);
	}

	my.caseFirstResult = function() {
		if(BB.popuplive){
			return false;
		}
		BB.r=0;
		renderResult();
		sendStateToUrl(true);
	}

	function leftRightOkay() {
		if(BB.popuplive) {
			return false;
		}
		var el=$(document.activeElement);
		if (el.length>0 && el.is(":text") && el.val().length>0) {
			return false;
		}
		return true;
	}
	
	my.casePrevResult = function() {
		if (!leftRightOkay()) {
			return false;
		}
		if (BB.r>0) {
			BB.r--;
			renderResult();
			sendStateToUrl(true);
		}
	}

	my.caseNextResult = function() {
		if (!leftRightOkay()) {
			return false;
		}
		if (BB.r+1<BB.activeState.sortedFilteredResults.length) {
			BB.r++;
			renderResult();
			sendStateToUrl(true);
		}
	}

	my.caseLastResult = function() {
		if(BB.popuplive){
			return false;
		}
		BB.r=BB.activeState.sortedFilteredResults.length-1
		renderResult();
		sendStateToUrl(true);
	}

	my.caseChangeHideFull = function(el,skipProcessing) {
		applyToOther(el);
		var b=!el.checked;
		
		//need to consider full class filter when waitlistable filter is hidden
		if(!waitlistableFilter && positiveWaitlistFillsClass){
			if(b){
				BB.activeState.filters.hideWaitlistable = true;
			}
			else{
				BB.activeState.filters.hideWaitlistable = false;
			}
		}
		else if (!b && BB.activeState.filters.hideWaitlistable) {
			// If user wants to show full classes, also show waitlistable
			$("#hide_waitlistablemobile").click();
		}

		Profiler.setParameterState("filterOutFull", b);
		BB.activeState.filters.hideFull = b;

		if (!(skipProcessing)) {
			BB.activeState.processOrSort();
			sendStateToUrl(true);
		}
		RR.updateFiltersCount();
	}

	my.caseChangeHideOnline = function(el) {
		applyToOther(el);
		var b=!el.checked;
		Profiler.setParameterState("filterOutOnline", b);
		BB.activeState.filters.hideOnline = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeHideOnCampus = function(el) {
		applyToOther(el);
		var b=!el.checked;
		Profiler.setParameterState("filterOutOnCampus", b);
		BB.activeState.filters.hideOnCampus = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeHideReserved = function(el) {
		applyToOther(el);
		var b=!el.checked;
		Profiler.setParameterState("filterOutReserved", b);
		BB.activeState.filters.hideReserved = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeHideOffCampus = function(el) {
		applyToOther(el);
		var b=!el.checked;
		Profiler.setParameterState("filterOutOffCampus", b);
		BB.activeState.filters.hideOffCampus = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeHideWaitlistable = function(el,skipProcessing) {
		applyToOther(el);
		var b=!el.checked;

		if (b && !BB.activeState.filters.hideFull) {
			// If user wants to hide waitlistable classes, also hide full.
			$("#hide_fullmobile").click();
		}

		Profiler.setParameterState("filterOutWaitlistable", b);
		BB.activeState.filters.hideWaitlistable = b;
		if (!(skipProcessing)) {
			BB.activeState.processOrSort();
			sendStateToUrl(true);
		}
		RR.updateFiltersCount();
	}

	my.caseChangeHideClosed = function(el) {
		applyToOther(el);
		var b=!el.checked;
		BB.activeState.filters.hideClosed = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeHideNoHonors = function(el) {
		applyToOther(el);
		var b=el.checked;
		BB.activeState.filters.hideNoHonors = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeHideHonors = function(el) {
		applyToOther(el);
		var b=el.checked;
		BB.activeState.filters.hideHonors = b;
		BB.activeState.processOrSort();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangeSort = function(newSort) {
		BB.proactiveSortChange=true;
		RR.renderSort(newSort);
		BB.activeState.sort = newSort;
		ENGINE.sortAndFilterResults(BB.activeState,false);
		renderResult();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseClearPersonalTimeBlocks = function() {
		BB.activeState.clearBusyBlocks();
		ENGINE.computeOverlap(BB.activeState);
		ENGINE.sortAndFilterResults(BB.activeState,false);
		renderResult();
		sendStateToUrl(true);
		RR.updateFiltersCount();
	}

	my.caseChangePersonalTimeBlock = function(d1,d2,dayHourA,dayHourB,onlyAdd) {

		var r = sortDayHours(dayHourA,dayHourB);
		var dayHour1 = r.first;
		var dayHour2 = r.last;

		for (var d=dayHour1.day;d<=dayHour2.day;d++) {
			var busyBlock = new BusyBlock(d1,d2,d,dayHour1.hour,dayHour2.hour);
			BB.activeState.addNewBusyBlock(busyBlock,onlyAdd);
		}

		ENGINE.computeOverlap(BB.activeState);
		ENGINE.sortAndFilterResults(BB.activeState,false);
		renderResult();
		sendStateToUrl(true);
	}

	my.casePin = function(cnf,add,complete) {
		if (cnf.pin(add)) {
			// if (!add) {
			// cnf.cs=""; // Clear the course selection so
			// // that class will jump towards desired sort.
			// }
			BB.activeState.process(complete);
			sendStateToUrl(true);
		}
	}
	
	my.casePinSel = function(cnf,selkey) {
		cnf.setDropPlus(selkey);
		BB.activeState.process();
		sendStateToUrl(true);
	}

	my.caseChangeSelectionMask = function(cnf,sa) {
		if (cnf.sa!=sa) {
			cnf.sa=sa;
			BB.activeState.outdated=true;
			BB.activeState.process();
			sendStateToUrl(true);
		}
	}

	my.caseFavoriteResult = function() {
// RR.toast("Saved to Favorites");
		if ($(".thumbContainer").length>=maxFavorites) {
			alert("You are limited to a maximum of "+maxFavorites+" favorites. You must delete an existing one first.");
			return;
		}
		var state=BB.activeState.toStr();
		// Change all evidences of "enrollment" to generic:
		state=state.replace(/=kp_/g,"=us_");
		$.getJSON("api/saveFavorite",{term:BB.activeState.term,state:state,name:"Untitled"},function() {
			$("#result_page_message").show(function (){
				$('#favalert').focus();
			}).hide(2000);
			renderFavorites(true);
			PAGES.openFavorites();
		});
	}

	my.caseDeleteFavorite = function(savedItem) {
		var id=savedItem || BB.previewState.saveId ;
		$.getJSON("api/deleteSavedState",{id:id},function() {
			renderFavorites();
		});
	}

	my.caseUpdateFavorite = function(savedItem) {
		var id=savedItem || BB.previewState.saveId ;
		var name=$("#text_editor").val();
		$.getJSON("api/updateFavorite",{id:id, name:name},function() {
			renderFavorites();
		});
	}

	my.caseCompleteEnroll = function() {
		BB.activeState.removeDropped();
		BB.activeState.loadEnrollmentState(function() {
			BB.activeState.process();
			sendStateToUrl(true);
		});
	}

	my.caseChangeSelection = function(gState) {
		legend.applyRadioToCrnList(gState);
		sendStateToUrl(true);
	}

	my.caseStartFromScratch = function() {
		loadState("scratch=1",false);
	}
	
	my.caseShareLink = function() {
		var urlPage = window.location.href;
		urlPage+="&shared=1";
		urlPage=urlPage.replace("&scratch=1","");

		var url = "s/create?href="+encodeURIComponent(urlPage);

		$.ajax({
			url: url,
			cache: false
		}).done(function(response) {
			var r = JSON.parse(response);
			var domain = window.location.origin;
			var url = window.location.href;
			var i = url.indexOf("criteria.jsp");
			if (i>=0) {
				url = url.substr(0,i)+"s/"+r;
			} else {
				url = domain+"/vsb/s/"+r;
			}
			
			var msg="<p>Use this link to share the schedule you are viewing with a friend or advisor.</p>";
			msg+="<p><input class='share-link-input' value='"+url+"' onclick='$(this).select();'/></p>";
			var buttons=[{name:"Close"}];
			RR.popNotice(msg,buttons,null,"Share a link",true);
			
			// ShareLinkView.renderLinkGenerated(url, obj);
		});
	}
	
	my.caseSuppressTips = function() {
		BB.tip=0;
		SLIDER.renderSlider();
		setCookie("tip",BB.tip,30);
		sendStateToUrl(false);
	}
	
	function sendStateToUrl(replace) {
		if (!history.pushState || (BB.welcome==2 && !PAGES.isCriteriaOpen())) return;
		var state=BB.toStr().substr(1);
		var url="criteria.jsp?"+state;
		if (replace) {
			history.replaceState({id: "vsb_latest_0"}, "VSB State", url);
		} else {
			history.pushState({id: "vsb_latest_0"}, "VSB State", url);
		}
		if(window.localStorage){
			localStorage.setItem("vsbuilder.gstate",state);
		}
		
        window.dispatchEvent(new CustomEvent("state-changed", { detail: { value:  url} }));
	}
	
	// 0=met (true) 1=not right (false) 2=too many (false)
	my.meetsCompulsory = function(term) {
		var t=EE.terms[term];
		if (!t) return 0;
		if (!t.hasCompulsory) return 0;
		if (!t.compRec) return 0;
		
		// Determine if we're looking at the 'compulsory' rec (if there are multiple)
		var myPlan=BB.activeState.getPlanHeader();
		if (!(!myPlan) && t.compRec.plan.id!=myPlan.id) {
			return 0;
		}
		
		var rS=new GState(t.compRec.state);
		var gS=BB.activeState;
		// Make sure all locked courses are in present state
		for (var i=0;i<rS.cnfs.length;i++) {
			var cnf=rS.cnfs[i];
			if (!cnf.lock) continue;
			var found=false;
			for (var j=0;j<gS.cnfs.length;j++) {
				var cnf2=gS.cnfs[j];
				if (cnf.cnKey==cnf2.cnKey) {
					if (cnf.lockdrop) {
						if (cnf.cs==cnf2.cs) {
							found=true;
							break;
						}
					} else {
						found=true;
						break;
					}
				}
			}
			if (!found) return 1;
		}
		if (!t.compRec.permitAditionalCourses) {
			for (var j=0;j<gS.cnfs.length;j++) {
				var cnf2=gS.cnfs[j];
				if (cnf2.enr.length>0 || cnf2.drop.indexOf("dp_")==0 || cnf2.ignore) continue;
				var pass=false;
		        for (var i=0;i<rS.cnfs.length;i++) {
			        var cnf=rS.cnfs[i];
				    if (cnf.cnKey==cnf2.cnKey) {
                        pass=true;
				    }
		        }
		        if (!pass) {
		            return 2;
		        }
			}
		}
		return 0;
	}
	
	function checkCompulsory(term,action) {
		if (!EE.terms[term] || !EE.terms[term].hasCompulsory) return false;
		if (isAdvising) {
			var msg="<p>Note: The student you are advising may not "+action+" because they must follow the mandatory plan ";
			msg+="they have been assigned for its term. However since you are advising you may proceed.</p>";
			var buttons=[{name:"Got it",action:function() {popupNotice.close();}}];
			RR.popNotice(msg,buttons);
			return false;
		} else {
			var msg="<p>You may not "+action+" because you must follow the mandatory plan you have been assigned for its term.</p>";
			var buttons=[{name:"Got it",action:function() {popupNotice.close();}}];
			RR.popNotice(msg,buttons);
			return true;
		}
	}

	function applyToOther(el) {
		var id=$(el).attr("id");
		var mobile=false;
		if (id.indexOf("mobile")>1) {
			id=id.replace("mobile","");
			mobile=true;
		} else {
			id=id+"mobile";
		}
		var $other=$("#"+id);
		console.log("checking " + id + " " + el.checked);
		
		$other.prop("checked",el.checked);
		$other=$("#"+id+"_label");
		if (!mobile) {			
			if (el.checked) {
				$other[0].MaterialSwitch.on();
			} else {
				$other[0].MaterialSwitch.off();
			}
		} else {
			if (el.checked) {
				$other[0].MaterialSwitch.on();
			} else {
				$other[0].MaterialSwitch.off();
			}
		}
	}

	return my;
}());

// Holds objects in browser memory for fast retrieval
var MM = (function() {
	var my = {};

	my.codeNumbers = [];
	my.colleges = [];
	my.campuses = {};
	my.terms = {};
	my.sessions = {};
	my.cores = {};
	my.locations = [];
	my.rgLines = [];
	var reqIds = [];
	my.cids = [];
	my.recHeaders = {};
	my.planHeaders = {};
	my.termBundle = {};
	
	my.pullTermBundle = function(term,complete) {
		if (!my.termBundle[term]) {
			$.getJSON("api/v2/classextras/termbundle",{term:term},function(data) {
				my.termBundle[term] = data;
				if (complete) complete();
			}).fail(function() {
				RR.addBadWarning(i8n.unableToLoad);
				if (complete) complete();
			});
		} else {
			// Already have info
			if (complete) complete();
		}
	}

	my.getCodeNumber = function(term,cnKey) {
		for (var i=0;i<my.codeNumbers.length;i++) {
			var cn=my.codeNumbers[i];
			if (cn.key==cnKey && cn.term==term) {
				return cn;
			}
		}
		return null;
	}

	my.getReqIdOptions = function(term,reqId) {
		var trs=reqIds[term];
		if (!trs) return false;
		var trso=trs[reqId];
		if (!trso) return false;
		return trso;
	}
	
	my.addReqIdOptions = function(term,reqId,options) {
		if (!options || !options.length) {
			return
		}
		if (!reqIds[term]) {
			reqIds[term]=[];
		}
		
		options.forEach(function(o){
			vaMap[o.cnKey] = o.va;
		})
		
		reqIds[term][reqId]=options;
	}

	my.findReqGroupDesc = function(reqgs) {
		var h="";
		for (var reqg of reqgs) {
			var d="";
			var testable=true;
			var haveOne=false;
			for (var i=0;i<my.rgLines.length;i++) {
				var r=my.rgLines[i];
				if (r.reqg==reqg) {
					haveOne=true;
					if (r.desc.length>0) {
						if (d.length>0) d=padForNext(d);
						d+=r.desc;
					}
					if (!r.isTestable()) {
						testable=false;
					}
				}
			}
			if (d.length==0 && haveOne && testable) {
				d="Class Pairing RG#"+reqg;
			}
			if (h.length>0) h=padForNext(h);
			h+=d;
		}
		return h;
	}

	function xmlToTimeblocks(xmlDoc) {
		var timeblockEls = xmlDoc.getElementsByTagName("timeblock");
		var timeblocksTemp = [];
		for (var i=0; i<timeblockEls.length;  i++) {
			var el=timeblockEls[i];
			var id=+el.getAttribute("id");
			var day=+el.getAttribute("day");
			var t1=+el.getAttribute("t1");
			var t2=+el.getAttribute("t2");
			var d1=+el.getAttribute("d1");
			var d2=+el.getAttribute("d2");
			var xm=el.getAttribute("xm")=="1";
			var ot=el.getAttribute("ot");
			var type = el.getAttribute("type");
			var timeblock = new TimeBlock(id,day,t1,t2,d1,d2,"",xm,ot,type);
			timeblocksTemp.push(timeblock);
		}
		return timeblocksTemp;
	}

	my.loadFromXmlIncremental = function(xmlDoc,gState) {
		var tbsTemp = xmlToTimeblocks(xmlDoc);

		var sels=[];
		var selEls = xmlDoc.getElementsByTagName("selection");
		for (var i=0;i<selEls.length;i++) {
			var selEl=selEls[i];
			var sel = new Selection2(selEl,null,null,tbsTemp);
			sels.push(sel);
		}

		var change=false;
		for (var i=0;i<gState.cnfs.length;i++) {
			var cnf=gState.cnfs[i];
			if (cnf.cnPro==null) continue; // wasn't loaded yet
			var cn=cnf.cnPro.cn;
			if (cn.updateLiveSeats(sels)) {
				change=true;
				gState.outdated=true;
			}
		}

		return change;
	}

	my.loadFromXml = function(xmlDoc,term) {
		var errorEls = xmlDoc.getElementsByTagName("error");
		if (errorEls!=null && errorEls.length>=1) {
			for (var i=0; i<errorEls.length; i++) {
				var el=errorEls[i];
				var error=el.textContent||el.text;
				RR.addBadWarning(error);
			}
		}

		var campusEls = xmlDoc.getElementsByTagName("campus");
		for (var i=0; i<campusEls.length; i++) {
			var c=campusEls[i];
			my.campuses[c.getAttribute("n")]=c.getAttribute("v");
		}

		var termEls = xmlDoc.getElementsByTagName("term");
		for (var i=0; i<termEls.length; i++) {
			var t=termEls[i];
			my.terms[t.getAttribute("n")]=t.getAttribute("v");
		}

		var sessionEls = xmlDoc.getElementsByTagName("session");
		for (var i=0; i<sessionEls.length; i++) {
			var s=sessionEls[i];
			my.sessions[s.getAttribute("n")]=s.getAttribute("v");
		}
		
		var coreEls = xmlDoc.getElementsByTagName("core");
		for (var i=0; i<coreEls.length; i++) {
			var s=coreEls[i];
			my.cores[s.getAttribute("n")]=s.getAttribute("v");
		}
		
		var rgEls = xmlDoc.getElementsByTagName("reqgroupline");
		for (var i=0; i<rgEls.length;  i++) {
			var r=new ReqGroupLine(rgEls[i]);
			// Make sure it's not already added
			var added=false;
			for (var j=0;j<my.rgLines.length;j++) {
				if (my.rgLines[j].reqg==r.reqg && my.rgLines[j].line==r.line) {
					added=true;
					break;
				}
			}
			if (!added) {
				// Add to list
				my.rgLines.push(r);
			}
		}

		var timeblocksTemp = xmlToTimeblocks(xmlDoc);

		var cnEls = xmlDoc.getElementsByTagName("course");
		for (var i=0; i<cnEls.length; i++) {
			var cnEl = cnEls[i];
			var cn = new CodeNumber(cnEl,timeblocksTemp,term);
			my.codeNumbers.push(cn);
		}

		var reqEls = xmlDoc.getElementsByTagName("reqId");
		for (var i=0; i<reqEls.length; i++) {
			var n=reqEls[i].getAttribute("n");
			var opts;
			var oRun="opts="+reqEls[i].getAttribute("v")+";";
			eval(oRun);
			// TODO May not be necessary
			if (opts && opts.length) {
				my.addReqIdOptions(term,n,opts);
			}
		}

		var cidsEl = xmlDoc.getElementsByTagName("cids");
		if (cidsEl.length>0) {
			var cids;
			var oRun="cids="+cidsEl[0].childNodes[0].nodeValue+";"
			eval(oRun);
			for (var cid in cids) {
				my.cids[cid]=cids[cid];
			}
		}

		var cgEl = xmlDoc.getElementsByTagName("cohortgroups");
		if (cgEl.length>0) {
			var cgs;
			var oRun="cgs="+cgEl[0].childNodes[0].nodeValue+";"
			eval(oRun);
			my.cohortGroups=cgs;
		}

	}
	
	// Get description of institution
	my.collegeToDescr = function(inst) {
		if (!mscols) return inst;
		for (var i=0;i<mscols.length;i++) {
			var c=mscols[i];
			if (inst==c.value) {
				return c.text;
			}
		}
		return inst;
	}
	
	return my;
}());

// Queue Display
var QQ = (function() {
	var my = {};
	
	my.initQueue = function() {
		$(window).on("storage",function(event){
			my.receiveMessage(event);
		});
		my.refreshQueueDisplay();
	}
	
	my.importCourseQueue = function() {
		my.refreshQueueDisplay(true);
	}
	
	my.receiveMessage = function(ev) {
	    if (ev.originalEvent.key!='REFRESH_QUEUE') return; // ignore other keys
	    var message=JSON.parse(ev.originalEvent.newValue);
	    if (!message) return; // ignore empty msg or msg reset
		
	    // Do stuff
	    my.refreshQueueDisplay();
	}
	
	my.refreshQueueDisplay = function(doImport) {
		$.getJSON("api/v2/addtoschedule", function(data) {
			var t="";
			var courses="";			
			for (var i=0;i<data.courses.length;i++) {
				if (i>0) {
					t+=", ";
					courses+=",";
				}
				t+=data.courses[i].id;
				courses+=data.courses[i].id.trim().replace(" ","-");
			}
			$(".importQueueNb").text(data.courses.length);
			$(".PSPushedCourses").attr("title","Import the courses "+t+".");
			if (doImport) {
				UU.caseImportQueue(courses);
			}
		});
	}
	return my;
}());

var CC = (function() {
	var my = {};
	my.strToSet = function(str) {
		var obj = {};
		if (!str) return obj;
		var g=str.split("_");
		for (var i=0;i<g.length;i++) {
			if (g[i].length>0) {
				obj[g[i]]=true;
			}
		}
		return obj;
	}
	my.setToStr = function(set) {
		var s="";
		for (var key in set) {
			if (s.length>0) s+="_";
			s+=key;
		}
		return s;
	}
	my.paramOfStr = function(str,p,def) {
		if (!str) return def;
	    var vars=str.split('&');
	    for (var i=0;i<vars.length;i++) {
	        var vn=vars[i].split('=');
	        if (vn[0]==p) {
	            return decodeURIComponent(vn[1]);
	        }
	    }
	    return def;
	}
	return my;
}());

function YearMonthDay(e){var t=Math.floor((e-1)*4/1461);var n=Math.floor((t+3)/4);
var r=e-t*365-n;t+=2008;var i=t%4==0?1:0;var s=0;if(r<=31){s=0;}else{r-=31;if(r<=28+i){s=1;}else{r-=28+i;
if(r<=31){s=2;}else{r-=31;if(r<=30){s=3;}else{r-=30;if(r<=31){s=4;}else{r-=31;if(r<=30){s=5;}else{r-=30;
if(r<=31){s=6;}else{r-=31;if(r<=31){s=7;}else{r-=31;if(r<=30){s=8;}else{r-=30;if(r<=31){s=9;}else{r-=31;
if(r<=30){s=10;}else{r-=30;if(r<=31){s=11;}}}}}}}}}}}}this.y=t;this.m=s;this.d=r;this.c=e}

function yearMonthDayToCode(y,m,d) {
	var days = 365*(y-2008);
	var leapdays = Math.floor((y-2005)/4); // 2008=0, 2009=1, 2010=1, etc...
	days+=leapdays;
	var febDay = (y%4==0?1:0);
	if (m>=2) days+=febDay;
	days+=d;
	switch (m) {
	case 11: // Dec
		return days+334;
	case 10: // Nov
		return days+304;
	case 9: // Oct
		return days+273;
	case 8: // Sept
		return days+243;
	case 7: // Aug
		return days+212;
	case 6: // Jul
		return days+181;
	case 5: // 5=June
		return days+151;
	case 4: // 4=May
		return days+120;
	case 3: // 3=April
		return days+90;
	case 2: // 2=Mar
		return days+59;
	case 1: // 1=Feb
		return days+31;
	case 0:
		return days;
	default:
		return days;
	}
}

function GState(str) {
	this.term=termToNb(param("term",0));
	this.sort=param("sort",(defaultSort=="sgrating"?"none":defaultSort));
	this.filters=new Filters(param("filters",""));
	this.bbs=deserializeBusyBlocks(param("bbs",""),param("ds",""));
	this.cams=CC.strToSet(param("cams",defaultCams));
	if (useInstitutionAsCampus) {
		// Allow backwards compatibility for CUNY
		for (var c in this.cams) {
			var c2=c.split("_");
			for (var p=0;p<c2.length;p++) {
				var c3=c2[p];
				var c4=c3.split("i");
				if (c4.length==2) {
					c3=c4[0]+"i"+c4[0];
					c2[p]=c3;
				}
			}
			c=c2.join("_");
			this.cams[c]=true;
		}
	}
	// Backwards compatibility from VSB 4.0 links
	for (var c in this.cams) {
		if (c.indexOf("i")>=0) continue;
		for (var i=0;i<mscams.length;i++) {
			var c2=mscams[i].value;
			var cs=c2.split("i");
			if (cs.length>=2 && cs[1]==c) {
				this.cams[c2]=true;
			}
		}
	}
	
	this.locs=CC.strToSet(param("locs","any"));
	this.instruct=CC.strToSet(param("isrts","any"));
	this.session=CC.strToSet(param("ses","any"));
	this.planLink=param("pl",null);
	this.pac=param("pac","1")==1?true:false;
	this.outdated=true;
	this.bbsOutdated=true;
	this.tracker=null;

	this.cnfs=[];
	this.getVisibleCnfs = function() {
		return this.cnfs.filter(function(c){return !c.hide});
	}
	this.reqs=[];
	
	var i=0;
	while (str.indexOf("course_"+i+"_0=")>=0) {
		var cnKey=param("course_"+i+"_0");
		vaMap[cnKey]=vaMap[cnKey] || param("va_"+i+"_0");
		var sa=param("sa_"+i+"_0");
		var ca=CC.strToSet(param("ca_"+i+"_0"));
		var cr=CC.strToSet(param("cr_"+i+"_0"));
		var drop=param("dropdown_"+i+"_0");
		var cs=param("cs_"+i+"_0");
		var cpn=param("cpn_"+i+"_0");
		var csn=param("csn_"+i+"_0");
		var ig=+param("ig_"+i+"_0",0)
		var ignore=(ig&1)>0;
		var lock=(ig&2)>0;
		var lockdrop=(ig&4)>0;
		var isrec=(ig&8)>0;
		var reqId=param("rq_"+i+"_0",null);
		var seq=param("seq_"+i+"_0",null);
		var baggage=((+param("bg_"+i+"_0",0))==0?null:"ACCEPT");
		var studentSelected=param("ss_"+i+"_0","1")==="1";
		var searchByClass=param("sbc_"+i+"_0",0);
		var cnf=new CodeNumberFilter(cnKey,drop,reqId,sa,ca,cs,cpn,csn,ignore,lock,lockdrop,isrec,null,null,null,seq?seq:undefined,baggage,cr,null, null);
		cnf.studentSelected=studentSelected;
		cnf.searchByClass=searchByClass;
		this.cnfs.push(cnf);
		i++;
	}

	this.lastSort=null; // Last type of sort employed
	this.reasons=new Reasons(); // Reason(s) for no results
	this.results=[];
	this.sortedFilteredResults=[];

	function param(p,def) {
		return CC.paramOfStr(str,p,def);
	}

	function termToNb(term) {
		if (term==null) return null;
		var v = 0;
		for (var i=0; i<term.length; i++) {
			var c = term.charAt(i);
			if (c>='0' && c<='9') {
				v = v*10+(+c);
			} else {
				v = v*1000+c.charCodeAt(0);
			}
		}
		return v;
	}

	function serializeBusyBlocks(bbs) {
		var s="";
		var dates=[];
		function upsertDate(date) {
			for (var i=0;i<dates.length;i++) {
				if (dates[i]==date) return i;
			}
			dates.push(date);
			return dates.length-1;
		}
		for (var i=0; i<bbs.length; i++) {
			var bb = bbs[i];
			var d1i=0;
			var ss = "";
			ss+=upsertDate(bb.d1)+""+upsertDate(bb.d2);
			//less than 255
			if(blockTimeInterval == 60) {
				ss+=bb.day + "" + String.fromCharCode(65+bb.hourStart,65+bb.hourEnd);
			} else {
				var hs=bb.hourStart.toString().split('.');
				hs[0] = parseInt(hs[0]);
				if(!hs[1]) {
					hs[1] = 0;
				} else {
					hs[1] = parseInt(hs[1].padEnd(2,"0"))/25;
				}
				var he=bb.hourEnd.toString().split('.');
				he[0] = parseInt(he[0]);
				if(!he[1]) {
					he[1] = 0;
				} else {
					he[1] = parseInt(he[1].padEnd(2,"0"))/25;
				}
				ss+=bb.day + "" + String.fromCharCode(65+hs[0],65+hs[1],65+he[0],65+he[1]);
			}
			s+=ss;
		}
		var ds="";
		for (var i=0;i<dates.length;i++) {
			if (ds.length>0) ds+="-";
			ds+=dates[i];
		}
		return {bbs:s,ds:ds};
	}
	
	function deserializeBusyBlocks(bbs,ds) {
		var dates=ds.split("-");
		var ba=new Array();
		//bbs.length will be multiple of 5 for blockTimeInterval=60
		//bbs.length will be multiple of 7 for blockTimeInterval=30 or 15
		if(bbs.length % 5 == 0 ) {
			var bbsize = 5;
		} else {
			var bbsize = 7;
		}
		for (var i=0; i+2<bbs.length;i+=bbsize) {
			var d1i=bbs.substr(i,1);
			var d2i=bbs.substr(i+1,1);
			var d1=dates[d1i];
			var d2=dates[d2i];
			var day=bbs.substr(i+2,1);
			var bb;
			if(bbsize == 5) {
				var h1=bbs.substr(i+3,1).charCodeAt(0)-65;
				var h2=bbs.substr(i+4,2).charCodeAt(0)-65;
				if(blockTimeInterval == 60) {
					var m2 = 0;
				} else if(blockTimeInterval == 30) {
					var m2 = 0.5;
				} else {
					var m2 = 0.75;
				}
				bb=new BusyBlock(d1,d2,day,h1,h2+m2);
			} else {
				var h1=bbs.substr(i+3,1).charCodeAt(0)-65;
				var m1=bbs.substr(i+4,1).charCodeAt(0)-65;
				var h2=bbs.substr(i+5,1).charCodeAt(0)-65;
				var m2=bbs.substr(i+6,1).charCodeAt(0)-65;
				bb=new BusyBlock(d1,d2,day,h1+m1/4,h2+m2/4);
			}
			ba.push(bb);
		}
		return ba;
	}

	
	this.toStr = function() {
		var s="";
		s+="&term="+(this.term==null?"":this.term);
		s+="&sort="+this.sort;
		s+="&filters="+this.filters.toStr();
		var ser=serializeBusyBlocks(this.bbs);
		s+="&bbs="+ser.bbs;
		s+="&ds="+ser.ds;
		s+="&cams="+CC.setToStr(this.cams);
		s+="&locs="+CC.setToStr(this.locs);
		s+="&isrts="+CC.setToStr(this.instruct);
		s+="&ses="+CC.setToStr(this.session);
		s+="&pl="+(this.planLink?this.planLink:"");
		s+="&pac="+(this.pac?"1":"0");
		var i=0;
		for (var cnfi=0;cnfi<this.cnfs.length;cnfi++) {
			var cnf=this.cnfs[cnfi];
			if (cnf.isBaggage) continue;
			s+="&course_"+i+"_0="+encodeURIComponent(cnf.cnKey);
			s+="&va_"+i+"_0="+vaMap[cnf.cnKey];
			if (cnf.seq) {
				s+="&seq_"+i+"_0="+encodeURIComponent(cnf.seq);
			}

			s+="&sa_"+i+"_0="+cnf.sa;
			s+="&cs_"+i+"_0="+cnf.cs;
			s+="&cpn_"+i+"_0="+cnf.cpn;
			s+="&csn_"+i+"_0="+cnf.csn;
			s+="&ca_"+i+"_0="+CC.setToStr(cnf.ca);
			s+="&dropdown_"+i+"_0="+cnf.drop;
			s+="&ig_"+i+"_0="+((cnf.isrec?8:0)+(cnf.lockdrop?4:0)+(cnf.lock?2:0)+(cnf.ignore?1:0));
			s+="&rq_"+i+"_0="+(cnf.reqId==null?"":encodeURIComponent(cnf.reqId));
			s+="&bg_"+i+"_0="+(cnf.baggage?"1":"0");
			s+="&cr_"+i+"_0="+CC.setToStr(cnf.cr);
			s+="&ss_"+i+"_0="+(cnf.studentSelected?1:0);
			s+="&sbc_"+i+"_0="+cnf.searchByClass;
			i++;
		}
		return s;
	}

	this.loadEnrollmentState = function(complete) {
		if (this.term==null||this.term=="0"||!this.verifyTerm(false)) {
			if (complete) complete();
			return;
		}
		RR.showLoadingDiv(true);
		
		function handleInputParams(complete) {
			if (UU.inputParams==null) {
				if (complete) complete();
				return;
			}
			UU.caseAddCourses(UU.inputParams.courses,function() {
				doInitialCampusSelection(BB.activeState);
				BB.activeState.process(function() {
					if (UU.inputParams && UU.inputParams.pinAlso && (typeof keys !== 'undefined')) {
						BB.activeState.applySelkeysToDropdowns(keys);
						// Process a second time because dropdowns may have
						// changed
						BB.activeState.process();
					}
					
					// Check for push from AAR
					if (UU.inputParams && UU.inputParams.src=="aar") {
						var msg="<p>"+i8n.toImport+"</p>";
						var buttons=[{name:"Got it",action:function() {popupNotice.close();}}];
						RR.popNotice(msg,buttons,null,null,true);
					}
					
					UU.inputParams=null; // Only do once
					if (complete) complete();
					
				});
			},false,false,false,"",UU.inputParams.nopinon,true,true);
		}
		
		MM.pullTermBundle(BB.activeState.term,function() {
			
			if (!authenticated || BB.scratch || $("body").hasClass("block-user")) {
				handleInputParams(complete);
				return;
			}
			
			// Add filter and process
			$.getJSON("api/getEnrollmentState?term="+BB.activeState.term,function(data) {

				// Test code
				// data =
				// {errors:[],cnfs:[{cnKey:"BIOL-241",cnfcount:0,cart:"",enr:"UCALG--2177_71950-71984-"}]};

				// Show any errors
				for (var i=0;i<data.errors.length;i++) {
					var e = data.errors[i].desc;
					RR.addBadWarning(e,false,true);
				}
				
				var header=BB.activeState.getPlanHeader();
				var permitAdd=!header||!header.toggleOffAdditionalCourses;

				for (var i=0;i<data.cnfs.length;i++) {
					var jcnf=data.cnfs[i];
					vaMap[jcnf.cnKey]=jcnf.va;
					var cs=jcnf.enr.length>0?jcnf.enr:jcnf.cart;
					if(cs.length == 0){
						cs = jcnf.auth;
					}
					var drop="kp_"+cs;
					
					// TODO ca if not found in selected campuses?
					var ignore=!permitAdd&&jcnf.cart.length>0;
					var cnf = new CodeNumberFilter(jcnf.cnKey,drop,false,sa,ca,cs,false,false,ignore,false,false,false,jcnf.enr,jcnf.cart,jcnf.waiting,undefined,null,null,jcnf.auth,jcnf.audited,jcnf.waitPos);
					BB.activeState.addCodeNumberFilter(cnf,+jcnf.cnfcount,true,true,false);
				}
				
				RR.showLoadingDiv(false);

				handleInputParams(complete);
			}).fail(function() {
				RR.addBadWarning(i8n.unableToLoad);
				handleInputParams(complete);
			});
		});
		

	}
	
	this.nbOfTryPins = function() {
		var nb=0;
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.ignore) continue;
			if (cnf.drop.indexOf("us_")==0) nb++;
		}
		return nb;
	}

	this.trackCourseConflicts = function() {
		
		var toSend =[];
		for(var i =0; i<this.cnfs.length; i++){
			var cnf = this.cnfs[i];
			var courses1 = cnf.cnPro.cn.courses;
			
			// Filter selected institutions
			var selectInsitutions1 = cnf.selectedInstitutions();

			for (var n1=0; n1<courses1.length; n1++) {
				var institution1 = courses1[n1].inst;
				
				if (!selectInsitutions1.some(function(i){return i === institution1 })) {
					continue;
				}
				
				if(cnf.conflicts && cnf.conflicts.length>0){
					for(var k =0;k<cnf.conflicts.length;k++){
						var conflict = cnf.conflicts[k];
						var courses2 = cnf.conflicts[k].cnPro.cn.courses;

						// Filter selected institutions
						var selectInsitutions2 = conflict.selectedInstitutions();

						for (var n2=0; n2<courses2.length; n2++) {
							var institution2 = courses2[n2].inst;

							if (!selectInsitutions2.some(function(i){return i === institution2 })) {
								continue;
							}

							// To avoid sending the same thing more than once
							var contains = toSend.some(function(i) {
								return i.key1 === conflict.cnKey && i.inst1 === institution2
								 && i.key2 === cnf.cnKey && i.inst2 === institution1
							})
							
							if (!contains) {
								//console.log("Reporting conflict between "+institution1+":"+cnf.cnKey+" and "+institution2+":"+conflict.cnKey)
								toSend.push({
									key1:cnf.cnKey, 
									inst1:institution1,
									key2:conflict.cnKey, 
									inst2:institution2
								});
							}
						}
					}
					cnf.conflicts=[];
				}
			}
		}
		if(toSend.length === 0){
			return ;
		}
		$.ajax({
			url:'api/course-conflict-usage',
			method:'post',
			data:{school_term_id:this.term,payload:JSON.stringify(toSend)}
		}).done(function() {
		});
	}
	
	this.applyPostFiltersToCnfs = function() {
		for (var i=0;i<this.cnfs.length;i++) {
			this.cnfs[i].applyPostFilters(this.filters);
		}
	}
	
	this.processOrSort = function() {
		if (this.sort=="sgrating"||this.sort=="homecamp"||this.getCohortness().max>0) {
			// These can make "heedPostFilters" of engine.js change, meaning we need to regen the results,
			// not only sort and filter.
			this.outdated=true;
			this.process();
		} else {
			ENGINE.sortAndFilterResults(this,true);
			renderResult();
		}
	}

	this.process = function(complete,incremental) {

		var gState=this;
		var processContinue = function() {
			for (var i=0;i<gState.cnfs.length;i++) {
				var cnf=gState.cnfs[i];
				if (!cnf.populate(gState.term)) {
					console.log("Error could not load "+cnf.cnKey);
					gState.cnfs.splice(i,1);
					i--;
				}
			}

			gState.mergeStateIntoWildcards();

			for (var i=0;i<gState.cnfs.length;i++) {
				var cnf=gState.cnfs[i];
				cnf.applyFilters(gState.cams,gState.locs,gState.instruct,gState.session,BB.previewState==gState);
			}

			gState.computeWarnings();

			if (BB.previewState==gState) {
				RR.showLoadingDiv(false);
			}

	   		CA.assignColors();

			// If this GState is the active one, then render it
			if (BB.activeState==gState) {
				PAGES.renderCurrentPage();
				RR.renderAddCoursesPage(BB.activeState,true);
				if (!dwSepApiPullOnDemand) {
					RR.renderMyPlanImport();
				}
				BUBBLES.update();

				if (/* (BB.page=="results" || BB.wideScreen) && */ gState.outdated) {

					RR.showLoadingDiv(false);

					if (!BB.enrollMode) RR.showGeneratingDiv(true);

					Profiler.recordHit("scheduleGenerationRequests");
					// Run each "process" and also on incremental seat updates
					gState.trackCourseConflicts();

					// Regenerate results
					ENGINE.generateResults(gState,false,function(gResults,tracker) {
						gState.results=gResults;
						gState.tracker=tracker;
						var tooMany=tracker.tooMany;
						$(".tooManyResults").toggle(tooMany);
						// RR.settlePlusBox();
						ENGINE.computeOverlap(gState);
						ENGINE.sortAndFilterResults(gState,true);
						Profiler.addValue("schedulesGenerated", gState.sortedFilteredResults.length);
						if (!BB.enrollMode) RR.showGeneratingDiv(false);
						if (!BB.enrollMode) renderResult();
						if (complete) {
							complete();
						}
					});

				} else {
					if (complete) {
						complete();
					}
				}

			} else if (BB.previewState==gState) {
				// Render for preview

				ENGINE.generateResults(gState,false,function(gResults,tracker) {
					gState.results=gResults;
					var r=gState.findCurrentSelectedResult();
					if (r==null) r=new Result(null);
					previewSchedule.setSize(BB.previewState.cnfs);
					previewSchedule.draw(r,BB.previewState);
					if (complete) {
						complete();
					}
				});

			} else {
				if (complete) {
					complete();
				}
			}

		}
		
		var loadClassData = function() {
			// Process CodeNumberFilters
			var s=""; // missing CodeNumbers
			var oldest=(new Date()).getTime();
			
			if (BB.activeState.verifyTerm(gState==BB.previewState)) {
				for (var i=0;i<gState.cnfs.length;i++) {
					var cnf=gState.cnfs[i];
					if (incremental || !cnf.populate(gState.term)) {
						if (cnf.cnPro && cnf.cnPro.cn.since<oldest) oldest=cnf.cnPro.cn.since;
						// We're updating data or we don't have data in JS memory or
						s+="&course_"+i+"_0="+encodeURIComponent(cnf.cnKey);
						s+="&va_"+i+"_0="+vaMap[encodeURIComponent(cnf.cnKey)];
						if (cnf.seq) {
							s+="&seq_"+i+"_0="+encodeURIComponent(cnf.seq);
						}
						s+="&rq_"+i+"_0="+encodeURIComponent(cnf.reqId?cnf.reqId:"");
					} else {
						// We already have data in JS memory
					}
				}
			}
			
			if (s.length>0) {
				// We need to use AJAX to get more data
				s="api/class-data?term="+gState.term+s+nWindow();
				s+="&nouser=1";
				
				if (incremental) {
					s+="&since="+oldest;
				} else {
					RR.showLoadingDiv(true);
				}
				
				UU.isClassDataLoadInProgress = true;
				//console.log(new Date().toLocaleTimeString() + " class-data " + s);
				$.ajax({
					method: "GET",
					url: s,
					cache: false,
					dataType: "xml"
				})
				  .done(function(data) {
					  UU.isClassDataLoadInProgress = false;
					  //console.log(new Date().toLocaleTimeString() + " class-data done");
					  // Load data into browser memory
					  if (incremental) {
						  var change=MM.loadFromXmlIncremental(data,gState);
						  if (!change) return;
					  } else {
						  MM.loadFromXml(data,gState.term);
					  }
					  processContinue();
				  })
				  .fail(function(jqXHR,textStatus) {
					  if (textStatus=="error") {
						  RR.addBadWarning("Connection error... are you connected?");
					  } else {
						  RR.addBadWarning(textStatus+": Failed at "+(new Date())+". URL: "+s);
					  }
				  });
			} else {
				if (incremental) return;
				processContinue();
			}
		}
		loadClassData();
	}

	this.applySelkeysToDropdowns = function(selkeys) {

		var used=[];
		for (var c=0;c<this.cnfs.length;c++) {
			var cnf=this.cnfs[c];
			var gotIt=false;
			for (var i=0;i<selkeys.length;i++) {
				if (1==used[i]) continue; // each selkey should change at most
											// 1 cnf.
				if (cnf.cnKey==selkeys[i] || cnf.setDropPlus(selkeys[i])) {
					used[i]=1;
					gotIt=true;
					break;
				}
			}
			if (!gotIt) {
				if (cnf.enr.length>0) {
					cnf.setDrop("dp_"+cnf.enr);
				} else {
					cnf.ignore=true;
					BB.activeState.outdated=true;
				}
			}
		}

		for (var i=0;i<selkeys.length;i++) {
			if (1!=used[i]) {
				RR.addBadWarning("Class " + selkeys[i] + " cannot be found and may have been cancelled.");
			}
		}
	}

	this.findCurrentSelectedResult = function() {
		// Determine the selkeys that must be in the result
		var keys=[];
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.drop.indexOf("dp_")==0 || cnf.ignore || cnf.cs.length==0) continue;
			keys.push(cnf.cs);
		}

		// Search the results for it.
		// All the selkeys are expected to be
		// found in order. However there may
		// be extra selkeys in the result.
		var p=0;
		for (var i=0;i<this.results.length;i++) {
			var r=this.results[i];
			for (var j=0;j<r.selPros.length;j++) {
				if (r.selPros[j].sel.key==keys[p]) {
					p++;
				}
			}
			if (p==keys.length) {
				return r;
			}
		}
		return null;
	}

	this.addCodeNumberFilter = function(cnf,skipOfSame,overwrite,warn,isImport,cnfsPreImport) {
		var cnfs = cnfsPreImport || this.cnfs;
		var replaceAt=null;
		var isEnrolled=false;
		var conflict=false;
		var sameFound=0;
		for (var i=0;i<cnfs.length;i++) {
			var cnf2=cnfs[i];
			var isRepeated = isImport && cnf2.reqId && cnf.reqId
				? cnf2.reqId.trim()==cnf.reqId.trim()
				: cnf2.cnKey==cnf.cnKey;
			if (isRepeated) {
				sameFound++;
				// More than 1 okay?
				if (!cnf2.allowMulti()) {
					conflict=true;
				}
				if (sameFound>skipOfSame) {
					replaceAt=i;
					isEnrolled=cnf2.enr.length>0;
					break;
				}
			}
		}

		if (replaceAt==null && !conflict) {
			this.cnfs.push(cnf);
			this.outdated=true;
			return true;
		}
		
		if (!overwrite) {
			if (warn) {
				var cd=cnf.cnKey.replace("-"," ").trim();
				if (isImport) {
					if (isEnrolled) {
						RR.addGoodWarning(i8n.s("alreadyAddedPlanEnrolled",cd),false,false);
					} else {
						RR.addBadWarning(i8n.s("alreadyAddedPlan",cd),false,false);
					}
				} else {
					RR.addBadWarning(i8n.s("alreadyAdded",cd));
				}
			}
			return false;
		}

		// Overwrite
		var ocnf=this.cnfs[replaceAt];
		// Carry these params from the GState CNF into the getEnrollmentState
		// CNF
		cnf.reqId=ocnf.reqId;
		cnf.seq=ocnf.seq;
		cnf.lock=ocnf.lock;
		cnf.lockdrop=ocnf.lockdrop;
		cnf.isrec=ocnf.isrec;
		cnf.drop=ocnf.drop;
		cnf.ignore=ocnf.ignore;
		cnf.ca=ocnf.ca;
		cnf.cr=ocnf.cr;
		cnf.cpn=ocnf.cpn;
		cnf.cs=ocnf.cs;
		cnf.baggage=null;
		cnf.isBaggage=false;
		this.outdated=true;
		this.cnfs[replaceAt]=cnf;
		return true;
	}
	
	this.mergeStateIntoWildcards = function() {
		
		var cnfs=this.cnfs;
		// Figure out what user has
		var have={};
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.enr) {
				have[cnf.cnKey]={type:"enr",cnf:cnf};	
			} else if (cnf.cart) {
				have[cnf.cnKey]={type:"cart",cnf:cnf};
			}
		}
		
		// Find the first way that what the user has can be
		// distributed amongst the wildcards' options
		function iterCnf(i,pmatches) {
			if (i>=cnfs.length) {
				return pmatches;
			}
			var cnf=cnfs[i];
			var match=false;
			if (cnf.options && cnf.baggage=="ACCEPT"||cnf.baggage=="ACCEPT_CHANGE") {
				for (var j=0;j<cnf.options.length;j++) {
					var o=cnf.options[j].cnKey;
					if (have[o]) {
						var alreadyMatched=false;
						for (var hi=0;hi<pmatches.length;hi++) {
							if (!pmatches[hi]) continue;
							if (pmatches[hi].cnKey==o) alreadyMatched=true;
						}
						if (!alreadyMatched) {
							match=true;
							pmatches[i]=have[o].cnf;
							i++;
							var set=iterCnf(i,pmatches);
							if (set) {
								return set;
							}
						}
					}
				}
			}
			if (!match) {
				pmatches[i]=null;
				i++;
				var set=iterCnf(i,pmatches);
				if (set) {
					return set;
				}
			}
		}
		
		var pmatches=[];
		
		// The set is an an array all CNFs. If it has non-null
		// entries, it means that the value (representing an enrolled CNF)
		// should
		// be assigned to the wildcard CNF at that index.
		var set=iterCnf(0,pmatches);
		
		// Assign enrollments to wildcard CNFs
		var list=[];
		for (var i=0;i<pmatches.length;i++) {
			var pm=pmatches[i];
			var cnf=cnfs[i];
			if (!pm || cnf==pm) continue;
			if (cnf.baggage=="ACCEPT_CHANGE") {
				list.push(cnf);
			}
			cnf.baggage=pm;
			pm.setBaggageTrue();
		}

		// make the core selected by default for the enrolled ones that allow
		// change
		for (var i=0;i<list.length;i++) {
			this.chooseBaggageOptionFor(list[i]);
		}
	}
	
	this.chooseBaggageOptionFor = function(cnf) {
		var nCnf=cnf.baggage;
		// Make the baggage CNF a wildcard CNF
		nCnf.isBaggage=false;
		// Copy save as "overwrite CNF"
		nCnf.reqId=cnf.reqId;
		nCnf.seq=cnf.seq;
		nCnf.options=cnf.options;
		nCnf.lock=cnf.lock;
		nCnf.lockdrop=cnf.lockdrop;
		nCnf.isrec=cnf.isrec;
		//nCnf.cnfid=cnf.cnfid; // Would cause a new DOM entry
		
		// set back to "enroll"
		nCnf.setDropPlus(nCnf.drop.substring(3));

		// Replace and remove wildcard CNF
		for (var i=0;i<this.cnfs.length;i++) {
			if (this.cnfs[i]==cnf) {
				this.cnfs.splice(i,1);
			}
		}
		
		return nCnf;
	}

	this.removeDropped = function() {
		for (var i=this.cnfs.length-1;i>=0;i--) {
			var cnf=this.cnfs[i];
			if (cnf.drop.indexOf("dp_")==0) {
				var k=this.cnfs[i].cnKey;
				var k2=k.substr(0,k.length-1);
				var p=k.substr(k.length-1,1);
				this.cnfs.splice(i,1);
				this.outdated=true;				
				if (template=="mcm") {
					if (p=="A" || p=="B") {
						for (var j=0;j<this.cnfs.length;j++) {
							if (this.cnfs[j].cnKey.indexOf(k2)==0) {
								this.cnfs.splice(j,1);
								i--;
								break;
							}
						}
					}
				}
			}
		}
	}

	this.removeCodeNumberFilter = function(cnfid,complete,canRestore,noInstantDrop) {
		// Check for same
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.cnfid==cnfid) {

				// Check to see if in cart. If so, remove it.
				if (cnf.cart.length>0 && !disableCart) {
					clickRemoveFromCart(cnf.cart);
					cnf.cart="";
					if (cnf.enr.length<=0) {
						this.cnfs.splice(i,1);
					}
					this.outdated=true;
					RR.addGoodWarning( i8n.removed+ " '" + cleanCnKey(cnf.cnKey) + "' "+i8n.fromShoppingCart);
					AAR.clearReportCache(); // Ensure "Planned" (i.e. in cart) get updated.
					complete();
					return;
				}

				// If CNF has valid baggage, we need to change back to the
				// baggage
				// then run this again
				if (cnf.baggage && cnf.baggage.cnKey) {
					UU.caseChangeCoreOption(cnfid,cnf.baggage.cnKey);
					// this.removeCodeNumberFilter(cnf.baggage.cnfid,complete,canRestore,noInstantDrop)
					// BB.activeState.outdated=true;
					// BB.activeState.process();
					// sendStateToUrl(true);
					return;
				}

				if (cnf.lock) {
					// Not allowed
					return;
				}

				// Check to see if enrolled. If so, set it to drop.
				if (cnf.enr.length>0 && !disableEnroll) {
					if (cnf.drop.indexOf("dp_")==0 && canRestore) {
						// Already dropped. Restore
						cnf.setDropPlus(cnf.drop.substring(3));
					} else {
						if (permitInstantDrop&&!noInstantDrop) {
							
							var yesFctPreserve = function(cnf,gState,i,complete) {
								return function() {
									cnf.enr="";
									if (cnf.cart.length<=0) {
										gState.cnfs.splice(i,1);
									}
									gState.outdated=true;
									RR.addGoodWarning( i8n.s("droppedClass",cleanCnKey(cnf.cnKey)) );
									complete();
								}
							}
							
							var noFctPreserve = function(cnf,gState,complete) {
								return function(isFail) {
									if (!isFail) {
										cnf.setDrop("dp_"+cnf.enr);
									}
									gState.process();
									complete();
								}
							}
							
							clickRemoveFromEnrollment(cnf.enr,noFctPreserve(cnf,this,complete),yesFctPreserve(cnf,this,i,complete));
	
						} else {
							cnf.setDrop("dp_"+cnf.enr);
						}
					}
				}
				else {
					this.cnfs.splice(i,1);
					this.outdated=true;
					RR.addGoodWarning( i8n.removed+ " '" + cleanCnKey(cnf.cnKey) + "'");
				}
			}
		}
		complete();
	}

	this.getCnf = function(cnfid) {
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.cnfid==cnfid) return cnf;
		}
		return null;
	}

	this.getSelPro = function(cnfid,selkey) {
		var cnf=this.getCnf(cnfid);
		if (cnf==null) return null;
		var selPro=cnf.getSelPro(selkey);
		if (selPro!=null) return selPro;
		return null;
	}

	this.computeWarnings = function() {
		//return; // To debug engine.js
		// Used for Req Groups checking
		var allSelPros=[];
		var allCids={}; // CodeNumber and CourseId (when present)
		var allStrms={};
		for (var i=0; i<this.cnfs.length; i++) {
			var cnf=this.cnfs[i];
			var cnPro=cnf.cnPro;
			if (!cnPro.filterPass || cnf.drop.indexOf("dp_")==0 || cnf.ignore) {
				continue;
			}
			for (var j=0;j<cnPro.uselPros.length;j++) {
				var uselPro=cnPro.uselPros[j];
				for (var k=0;k<uselPro.selPros.length;k++) {
					var selPro=uselPro.selPros[k];
					if (!selPro.filterPass) continue;
					allSelPros.push(selPro);
				}
			}
			allCids[cnPro.cn.key]=true;
			for (var crs of cnPro.cn.courses) {
				allCids[crs.cid?crs.cid:crs.key]=true;
			}
		}
		
		var tms=EE.terms[BB.activeState.term];
		if (tms) {
			var sts=EE.terms[BB.activeState.term].sisTerms;
			for (var st of sts) {
				allStrms[st]=true;
			}
		}

		// Requirement Group Warnings
		for (var i=0; i<this.cnfs.length; i++) {
			var cnf=this.cnfs[i];
			cnf.computeWarnings(allSelPros,allCids,allStrms);
		}

		// Warnings for CodeNumbers compared against
		// other CodeNumbers
		for (var i=0; i<this.cnfs.length; i++) {
			var cnf=this.cnfs[i];
			var cnPro=cnf.cnPro;

			// Ensure at least 1 thing selected
			if (!cnPro.filterPass) {
				continue;
			}
			if (cnf.drop.indexOf("dp_")==0 || (cnf.ignore && cnf.enr.length>0)) {
				if (notDroppedWarning) {
					cnPro.warnings.push(i8n.s("notDroppedUntil",i8n.getThisSchedule));
				}
				continue;
			}
			if (cnf.baggage&&cnf.baggage.cnKey) {
				cnPro.warnings.push(i8n.s("This course will replace {}",cnf.baggage.cnKey));
			}

			cnf.conflicts=[];

			// Check with itself
			var r1=cnf.toRequirement(true);
			var requirements = new Array();
			requirements.push(r1);
			var tResults = null;
			ENGINE.doSearch(requirements,true,false,function(gResults) {
				tResults = gResults;
			});

			var expected=0;
			for (var j=0;j<cnPro.uselPros.length;j++) {
				if (cnPro.uselPros[j].filterPass) expected++;
			}

			if (!hideSelfConflicting) {
				if (tResults.length<=0) {
					cnPro.warnings.push(i8n.selfConflicting);  // All classes
																// of this
																// course are
																// self-conflicting
				} else if (tResults.length < expected) {
					cnPro.warnings.push(""+(expected-tResults.length)+" "+i8n.ofThe+" "+cnPro.uselPros.length+" "+i8n.classesSelfConflict); // classes
																																			// self-conflict
				}
			}

			// Ensure it has at least 1 seat available in each selection
			if (cnPro.allFilterPassFull && cnf.enr.length<=0) {
				if (cnPro.filterPassWaits>0) {
					cnPro.warnings.push(i8n.classesFull+ " ("+i8n.s("xWaitlistableClassesAv",cnPro.filterPassWaits)+")" );
				} else {
					cnPro.warnings.push(i8n.classesFull+(waitlistableFilter?i8n.noWaitlistable:""));
				}
			}

			// Check with other CodeNumbers
			var cWarn=false;
			for (var j=0; j<this.cnfs.length; j++) {

				if (i==j) continue;
				var cnf2=this.cnfs[j];
				var cnPro2=this.cnfs[j].cnPro;
				if (!cnPro2.filterPass || cnf2.drop.indexOf("dp_")==0 || cnf2.enr.length>0 || cnf2.ignore) continue;

				var requirements = new Array();
				requirements.push(r1);
				var r2=cnf2.toRequirement(true);
				requirements.push(r2);
				// Do search
				var tResults = null;
				ENGINE.doSearch(requirements,true,false,function(gResults) {
					tResults = gResults;
				});

				if (tResults.length<=0) {
					cnPro.warnings.push(i8n.courseConflict+" "+cnPro2.cn.code+" "+cnPro2.cn.number);
					if (cnf2.cnKey!=cnf.cnKey && !cnf.ignore) { // don't record conflict to
													// self.
						cnf.conflicts.push(cnf2);
					}
				} else {
					// Ensure at least 1 seat in each usel of result
					var hadOpening=false;
					// Ensure at least 1 seat in cnf2
					var thisOpen=false;
					// var waitlistable=false;
					for (var k=0; k<tResults.length; k++) {
						var result=tResults[k];

						var lastusel=null;
						hadOpening=false;
						var foundUselNoOpen=false;
						for (var m=0; m<result.selPros.length; m++) {
							var selPro = result.selPros[m];
							// if (selPro.cnf!=cnf2) continue;
							var sel = selPro.sel;
							if (sel.usel!=lastusel && lastusel!=null) {
								if (!hadOpening) {
									foundUselNoOpen=true;
								}
								hadOpening=false;
							}
							if (!sel.full || selPro.cnf.enr==sel.key) {
								if (!foundUselNoOpen) {
									hadOpening=true;
								}
								if (selPro.cnf==cnf2) {
									thisOpen=true;
								}
							}
							// if (sel.waits>0) {
							// waitlistable=true; // not used yet
							// }
							lastusel=sel.usel;
						}
						if (hadOpening) {
							break;
						}
					}
					if (!thisOpen && i8n.noClassesWithOpenSeats.length>0) {
						if (!cnPro2.allFilterPassFull) { // avoid redundancy
							cnPro.warnings.push(cnPro2.cn.code+" "+cnPro2.cn.number+" "+i8n.noClassesWithOpenSeats);
							cWarn=true;
						}
					} else if (!hadOpening && i8n.noArrangement.length>0) {
						if (!cnPro.allFilterPassFull) { // avoid redundancy
							cnPro.warnings.push(i8n.s("noArrangement",cnPro2.cn.code+" "+cnPro2.cn.number));
							cWarn=true;
						}
					}
				}
			}
			if(cWarn && cnf.options && cnf.options.length>1 && tResults.length<=0){
				cnPro.warnings.push(i8n.electiveCourseSelectionWarning);
			}
		}
	}

	this.clearBusyBlocks = function() {
		this.bbsOutdated=true;
		this.bbs.length=0;
	}

	this.addNewBusyBlock = function(busyBlock,onlyAdd) {
		this.bbsOutdated=true;
		var addIt = true;
		for (var blocki=0; blocki<this.bbs.length; blocki++) {
			var bb = this.bbs[blocki];
			// see if intersection
			if (bb.day!=busyBlock.day) continue;
			if (bb.d1!=busyBlock.d1 || bb.d2!=busyBlock.d2) {
				continue;
			}
			if ((bb.hourEnd+(blockTimeInterval/60)) < busyBlock.hourStart || bb.hourStart > (busyBlock.hourEnd+ (blockTimeInterval/60))) continue;

			// If right next to an existing block, then add it.
			if ((bb.hourEnd+ (blockTimeInterval/60)) == busyBlock.hourStart) {
				busyBlock.hourStart=bb.hourStart;
			}

			// If right next to an existing block, then add it.
			if (bb.hourStart == (busyBlock.hourEnd+ (blockTimeInterval/60))) {
				busyBlock.hourEnd=bb.hourEnd;
			}

			if (onlyAdd) {
				if (bb.hourEnd>busyBlock.hourEnd) busyBlock.hourEnd=bb.hourEnd;
				if (bb.hourStart<busyBlock.hourStart) busyBlock.hourStart=bb.hourStart;
			}

			// Don't add the new if it's identical to the old
			if (bb.hourEnd==busyBlock.hourEnd && bb.hourStart==busyBlock.hourStart && !onlyAdd) {
				addIt = false;
			}
			// Don't add the new if it's only 1 hour
			if (busyBlock.hourEnd-busyBlock.hourStart<=0) {
				addIt = false;
			}

			// intersection. remove this block.
			for (var y=blocki; y<this.bbs.length-1; y++) {
				this.bbs[y]=this.bbs[y+1];
			}
			this.bbs.length = this.bbs.length-1;
			blocki--;
		}

		if (addIt) {
			// Add the new block
			this.bbs.push(busyBlock);
		}
	}

	this.verifyTerm = function(isPreview) {
		var t=""+this.term
		if (!(t>0)) {
			return;
		}
		var found=false;
		var leastOffTerm=t;
		var leastOff=100;
		var currTerm=null;
		for (var t2 in EE.terms) {
			if (t2==t) {
				found=true;
			} else {
				if (t2==BB.activeState.term) {
					currTerm=t2;
				}
				var off=0;
				for (var i=0;i<t.length||i<t2.length;i++) {
					if (t.charAt(i)!=t2.charAt(i)) {
						off++;
					}
				}
				if (off<=leastOff) {
					leastOff=off;
					leastOffTerm=t2;
				}
			}
		}
		if (!found) {
			if (currTerm!=null) {
				this.term=+currTerm;
			} else {
				this.term=+leastOffTerm;
			}
			var msg="The "+(isPreview?"favorite":"link")+" you are trying to "+(isPreview?"preview":"load")+" refers to a term that is no longer available";
			if (isPreview) msg+=" (you may wish to delete it)";
			msg+=".<br/>This software attempted to load it into "+(currTerm?"the current":"a similar")+" term.";
			setTimeout(function() {
				var buttons=[{name:"OK",action:function() {popupNotice.close();}}];
				RR.popNotice(msg,buttons);
			},200);
			
		} else {
			if (!EE.isSelectable(t)) {
				var msg="The "+(isPreview?"favorite":"link")+" you are trying to "+(isPreview?"preview":"load")+" refers to a term you do not have permission to view";
				if (isPreview) msg+=" (you may wish to delete it)";
				msg+=".";
				setTimeout(function() {
					var buttons=[{name:"Start Over",action:function() {popupNotice.close();document.location.href="criteria.jsp?src=clear";}}];
					RR.popNotice(msg,buttons);
				},200);
				return false;
			}
		}

		return true;
	}

	this.isTransient = function() {
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.enr.length<=0 && cnf.cart.length<=0) {
				return true;
			}
		}
		return false;
	}
	
	this.codeNumbers = function() {
		var cns={};
		for (var i=0;i<this.cnfs.length;i++) {
			cns[this.cnfs[i].cnKey]=true;
		}
		var cns2="";
		for (var k in cns) {
			if (cns2.length>0) cns2+=",";
			cns2+=k;
		}
		return cns2;
	}

	// Get the CNF(s) that are joined to the given one.
	this.getJoinedCnfIds = function(cnfid) {
		// allOrNone
		var cnf=this.getCnf(cnfid);
		var id=cnf.getAtomicId();
		if (id==null) return [];
		var joined=[];
		for (var i=0;i<this.cnfs.length;i++) {
			var cnf=this.cnfs[i];
			if (cnf.cnfid==cnfid) continue;
			if (id==cnf.getAtomicId()) {
				joined.push(cnf.cnfid);
			}
		}
		return joined;
	}
	
	// Get the maximum possible cohortness.
	this.getCohortness = function(enforceMaxOnly) {
		var cnt={};
		for (var i=0; i<this.cnfs.length; i++) {
			var cnf=this.cnfs[i];
			if (cnf.ignore) {
				continue;
			}
			var cnPro=cnf.cnPro;
			var ucos=cnPro.ucos;
			for (var id in ucos) {
				if (enforceMaxOnly && !(!MM.cohortGroups[ucos[id].group].cohortness)) {
					continue;
				}
				if (!cnt[id]) {
					cnt[id]=0;
				}
				cnt[id]=cnt[id]+1;
			}
		}
		var maxV=0;
		for (var co in cnt) {
			if (co.length<1) continue;
			if (cnt[co]>maxV) {
				maxV=cnt[co];
			}
		}
		// Compute list of cohorts that meet the max
		var goodCs={};
		for (var co in cnt) {
			if (co.length<1) continue;
			if (cnt[co]==maxV) {
				goodCs[co]=true;
			}
		}
		return {max:maxV,allowed:goodCs};
	}
	
	
	this.defaultCams = function() {
		var dc=defaultCamsPerTerm[BB.activeState.term];
		if (!dc) return {};
		var dcs=dc.split("_");
		var cs={};
		for (var i=0;i<dcs.length;i++) {
			var cam=dcs[i];
			if (!cam) continue;
			cs[cam]=true;
		}
		return cs;
	}
	
	this.defaultCamsGeneralizedToCollege = function() {
		var colleges={};
		var dc=defaultCamsPerTerm[BB.activeState.term];
		if (!dc) return {};
		var dcs=dc.split("_");
		// For each home campus
		for (var i=0;i<dcs.length;i++) {
			var cam=dcs[i];
			if (!cam) continue;
			// Find the college
			for (var j=0;j<mscams.length;j++) {
				if (mscams[j].value==cam) {
					colleges[mscams[j].obj1]=true;
				}
			}
		}
		// For each college, if it belongs to a college, take note
		var cs={};
		for (var i=0;i<mscams.length;i++) {
			if (colleges[mscams[i].obj1]) {
				cs[mscams[i].value]=true;
			}
		}
		return cs;
	}
	
	this.getPlanHeader = function() {
		if (this.planLink) {
			if (this.planLink=="0") return;
			var header=MM.planHeaders[this.planLink];
			if (header) {
				return header;
			}
		}
		return null;
	}

}

function BState(str) {
	var param = function(p,def) {
		return CC.paramOfStr(str,p,def);
	}
	this.access=param("access")=="1";
	this.lang=param("lang","en");
	this.tip=+param("tip",(getCookie("tip")=="0"?0:1));
	if (isNaN(this.tip)) this.tip=1;
	this.page=param("page","results");
	this.scratch=param("scratch")=="1";
	
	var legendCookie=getCookie("legend");
	var legendDefault=legendCookie?legendCookie:(legendOnByDefault?"1":"");
	this.legend=param("legend",legendDefault)=="1";
	this.advice=param("advice","0");
	this.activeState=new GState(str);

	// Temporary GUI items

	if (template=="fpe" || template=="4cd") {
		var timezon = getTimezone();
		timezon = (timezon>0)?timezon-1:0;
		this.tz=timezones[timezon];
	}
	
	this.wideScreen=null; // Set by PAGES.initWindow()
	this.savedStates=[];
	this.previewState=null;
	this.r=0;
	this.welcome=0; // Set by loadState
	this.popuplive=false;
	this.enrollMode=false;

	this.toStr = function() {
		var s="";
		s+="&access="+(this.access?"1":"0");
		s+="&lang="+this.lang;
		s+="&tip="+this.tip;
		s+="&page="+this.page;
		s+="&scratch="+(this.scratch?"1":"0");
		s+="&advice="+(this.advice?this.advice:"0");
		s+="&legend="+(this.legend?"1":"0");
		s+=this.activeState.toStr();
		return s;
	}
}

var cnfid=0;

function CodeNumberFilter(cnKey,drop,reqId,sa,ca,cs,cpn,csn,ignore,lock,lockdrop,isrec,enr,cart,waiting,seq,baggage,cr,auth,audited,waitPos) {
	this.cnKey=cnKey;
	this.cnfid=cnfid++;
	
	this.drop=drop?drop:"al";
	this.reqId=reqId?reqId:null;
	this.oldDrop="al";
	this.sa=sa?sa:"";
	this.ca=ca?ca:{};
	this.cr=cr?cr:{};
	this.cs=cs?cs:"";
	// Choose the specific Sel of the Usel by default.
	if (drop && drop.indexOf("us_")==0 && this.cs=="") this.cs=drop.substr(3);
	this.cpn=cpn?cpn:"";
	this.csn=csn?csn:"";
	this.ignore=ignore?true:false;
	this.lock=lock?true:false;
	this.lockdrop=lockdrop?true:false;
	this.isrec=isrec?true:false;

	this.enr=enr?enr:"";
	this.cart=cart?cart:"";
	this.auth=auth?auth:"";
	
	this.waiting=waiting?true:false;
	this.waitPos=waitPos;
	this.audited=audited?true:false;
	this.seq=seq;
	this.baggage=baggage?baggage:null;
	this.isBaggage=false; // use setBaggageTrue to make true

	this.cnPro=null;
	this.color=999;

	this.anyPostPass=null;
	this.searchByClass="0";
	this.hide=hideCoursesLogic.length>0 ? eval(hideCoursesLogic) : false;
	
	this.atomicId = null;
	
	this.populate = function(term) {
		if (this.cnPro!=null) return true;
		var codeNumber=MM.getCodeNumber(term,this.cnKey);
		if (codeNumber==null) {
			return false;
		}
		var options=MM.getReqIdOptions(term,this.reqId);
		if (options==null) {
			return false;
		}
		this.cnPro=new CodeNumberPro(codeNumber,this);
		this.options=options;

		// Teacher filter (agnostic first/last name order)
		if (this.teacherFilter) {
			var t2=this.teacherFilter.replace(/[^a-zA-Z0-9]/g,"").toUpperCase();
			var uselPros=this.cnPro.uselPros;
			var sa="";
			for (var i=0;i<uselPros.length;i++) {
				for (var j=0;j<uselPros[i].selPros.length;j++) {
					var hasIt=false;
					var clss=uselPros[i].selPros[j].sel.classes;
					for (var k=0;k<clss.length;k++) {
						var tea=clss[k].teacher.replace(/[^a-zA-Z0-9,;]/g,"").toUpperCase().split(";");
						for (var m=0;m<tea.length;m++) {
							var n1=tea[m];
							if (n1.indexOf(t2)>=0) {
								hasIt=true;
								break;
							}
							var tean=tea[m].split(",");
							if (tean.length==1) {
								if (tean[0].indexOf(t2)>=0) {
									hasIt=true;
									break;
								}
							} else {
								if ((tean[0]+tean[1]).indexOf(t2)>=0) {
									hasIt=true;
									break;
								}
								if ((tean[1]+tean[0]).indexOf(t2)>=0) {
									hasIt=true;
									break;
								}
							}
						}
					}
					sa+=(hasIt?"l":"i");
				}
			}
			this.drop="ss";
			this.sa=sa;
		}

		return true;
	}
	
	this.setBaggageTrue = function() {
		this.isBaggage=true;
		this.setDrop("dp_"+this.enr);
		this.reqId=null;
		this.seq=null;
		this.options=null;
	}
	
	// If any course with this CodeNumber allows it, then allow it in the GUI.
	this.allowMulti = function() {
		if (!this.cnPro) {
			// May not be loaded if loading Recommendation. Assume user can.
			return true;
		}
		var courses=this.cnPro.cn.courses;
		for (var i=0;i<courses.length;i++) {
			if (courses[i].ame) {
				return true;
			}
		}
		return false;
	}

	// Will set the "cs" and the drop value if this
	// Cnf contains the given selkey.
	this.setDropPlus = function(selkey,isKeep) {
		var selPro=this.getSelPro(selkey);
		if (selPro==null) return false;
		var uselkey=selPro.uselPro.usel.key;
		this.cs=selkey;
		this.setDrop((isKeep?"kp_":"us_")+uselkey);
		return true;
	}

	this.setDrop = function(drop) {
		if (drop.indexOf("dp_")==0) {
			this.ignore=true;
		} else {
			this.ignore=false;
		}
		BB.activeState.outdated=true;
		this.drop=drop;
		if (drop.indexOf("_")<0) {
			// set the "non-pin" drop
			this.oldDrop=drop;
		}
	}

	this.getSelPro = function(selkey) {
		if (!this.cnPro) return null;
		for (var i=0;i<this.cnPro.uselPros.length;i++) {
			var uselPro=this.cnPro.uselPros[i];
			for (var j=0;j<uselPro.selPros.length;j++) {
				var selPro=uselPro.selPros[j];
				if (selPro.sel.key==selkey) {
					return selPro;
				}
			}
		}
		return null;
	}
	
	// Get the Selection that contains the given ClassNbr
	// and is most similar to the current Selection.
	// Note: Not used yet
	this.getClosestSelPro = function(clskey) {
		var selPro=this.getSelPro(this.cs);
		var keys1=selPro.sel.keys();
		var max=0;
		var maxSelPro=null;
		for (var i=0;i<this.cnPro.uselPros.length;i++) {
			var uselPro=this.cnPro.uselPros[i];
			for (var j=0;j<uselPro.selPros.length;j++) {
				var selPro=uselPro.selPros[j];
				var keys=selPro.sel.keys();
				if (!keys[clskey]) continue;
				var m=0;
				for (var k in keys1) {
					if (k in keys) {
						m++;
					}
				}
				if (m>max) {
					max=m;
					maxSelPro=selPro;
				}
			}
		}
		return maxSelPro;
	}

	this.applyPostFilters = function(filters) {
		var uselPros=this.cnPro.uselPros;
		var anyP=false;
		for (var i=0; i<uselPros.length; i++) {
			var uselPro=uselPros[i];
			for (var j=0; j<uselPro.selPros.length; j++) {
				var selPro=uselPro.selPros[j];
				selPro.postPass=selPro.isPostFilterPass(filters);
				if (selPro.postPass) {
					anyP=true;
				}
			}
		}
		this.anyPostPass=anyP;
	}

	this.applyFilters = function(cams,locs,insts,sessions,isPreview) {
		var locFilter=!("any" in locs);
		var instFilter=filterInstruct && !("any" in insts);
		var sesFilter=filterSession && !("any" in sessions);
		
		var allFilterPassFull=true;
		var anyUselsFilterPass=false;
		var filterPassWaits=0;
		var filterPassSgMatches=0;
		var filterPassFalseByLocation=false;
		var filterPassFalseByInstruct=false;
		var filterPassFalseBySession=false;
		var anyPass=false;
		var filterPassFalseByHue=false;
		var filterPassFalseByOOO=false;
		var allSelsHue=true;
		var filterPassFalseByCore=false;
		var ccams={}; // aCcumulated campuses
		var clocs={}; // aCcumulated locations
		var cpns={}; // aCumulated Period Numbers
		var csessionCodes={}; // aCumulated Session Codes
		var csns={}; // aCumulated Section Numbers
		var cots={}; // aCumulated online types
		var ecams={};
		var enrException=false;

		var usels=this.cnPro.cn.usels;
		var uselPros=this.cnPro.uselPros;
		
		var dropNoPassReason=null;

// var groupNames=["all","open","wait","enrl"];
// var groups={};
// for (var i=0;i<groupNames.length;i++) {
// groups[groupNames[i]]={"cams":0,"locs":0,"insts":0,"ewin":0};
// }

// for (var i=0; i<usels.length; i++) {
// var usel=usels[i];
// var uselPro=uselPros[i];
// for (var j=0; j<usel.sels.length; j++) {
// var sel=usel.sels[j];
// var selPro=uselPro.selPros[j];
//
// var gs=selPro.getGroups();
//
// }
// }

		var openSelFailedCam = false;
		var occ={}; // open class campuses
		var dropSelPro=this.getDropdownSelPro();
		
		for (var i=0; i<usels.length; i++) {
			var usel=usels[i];
			var uselPro=uselPros[i];

			var anySelsFilterPass=false;
			var allSelsFull=true;
			var disp="";
			var sl="";
			var uselWaits=0;
			
			var wcs=parseWildcard(this.reqId);

			for (var j=0; j<usel.sels.length; j++) {
				var sel=usel.sels[j];
				var selPro=uselPro.selPros[j];
				var isDropSel=(selPro==dropSelPro);

				// Set false by wildcard mismatch,hue,enrollment window,period,chosen section number (csn),campuses,locations,instruction mode(s)
				var filterPass=true; // Passes filters on Selections. Show in Course box. Still true if not checked.
				
				// Set false by wildcard mismatch,hue,enrollment window,                                  ,campuses,locations,instruction mode(s)
				var selPassUiTop=true;
				
				// Set false by                   hue,enrollment window
				var includeSel=true; // false to exclude entirely from VSB. Like hue.
				
				// Set true if enrolled or in cart
				var forcePass=false;
				var passPeriod=true;
				
				// Update group match rating
				var sgRating=0;
				if (EE.stuGps) {
					for (var sg in EE.stuGps) {
						$(sel.classes).each(function() {
							if (this.attrs.hasOwnProperty(sg)) {
								sgRating=1;
							}
						})
					}
				}
				sel.sgRating=sgRating;
				
				if (sel.key==this.enr || sel.key==this.cart || this.isSelMatchesSearchClassNbr(sel)) {
					// Selection is enrolled or in cart or searchByClass. Never filter it out.
					forcePass=true;
				}
				
				if (!forcePass && wcs!=null) {
					var needsMatch=false;
					var anyMatch=false;
					for (var m=0;m<wcs.length;m++) {
						// Ensure each matching wildcard with attributes
						// makes the course only contain classes with those
						// attributes.
						var wc=wcs[m];
						if (wc.attrs==null) continue;
// var wcMatch=true;
// if (wc.codes!=null) {
// for (var m1=0;m1<wc.codes.length;m1++) {
// if (selPro.cn.key.indexOf(wc.codes[m1]+"-")!=0) {
// wcMatch=false;
// break;
// }
// }
// if (!wcMatch) continue;
// }
// if (wc.nums!=null) {
// for (var m1=0;m1<wc.nums.length;m1++) {
// if (selPro.cn.key.indexOf("-"+wc.nums[m1])<0) {
// wcMatch=false;
// break;
// }
// }
// if (!wcMatch) continue;
// }
						
						var thisMatch=false;
						needsMatch=true;
						
						for (var m1=0;m1<wc.attrs.length;m1++) {
							// Sync this with CodeNumber.isWildcardMatch
							var attr=wc.attrs[m1];
							if (sel.cores && !(!sel.cores[attr])) {
								// wildcard attr matched course core attr
								thisMatch=true;
								break;
							}
							if (sel.course.rd.indexOf(attr)==0) {
								// wildcard attr matched req desig
								thisMatch=true;
								break;
							}
							if (sel.course.oattrs[attr]) {
								// wildcard attr matched course attribute
								thisMatch=true;
								break;								
							}
							for (var ci=0;ci<sel.classes.length;ci++) {
								if (sel.classes[ci].attrs[attr]) {
									thisMatch=true;
									break;									
								}
							}
						}
						
						if (thisMatch) {
							anyMatch=true;
						}
					}
					
					if (needsMatch && !anyMatch) {
						filterPassFalseByCore=true;
						if (isDropSel) dropNoPassReason="core";
						filterPass=false;
						selPassUiTop=false;
					}
				}
				
				if (!forcePass && sel.hue && !isPreview && !(advisorsSeeHue && isAdvisor)) {
					// skip because it's hide unless enrolled
					filterPass=false;
					selPassUiTop=false;
					includeSel=false;
					filterPassFalseByHue=true;
					if (isDropSel) dropNoPassReason="hue";
				} else {
					allSelsHue=false;
				}

				if (!forcePass && preventOutOfEnrollmentWindow && usel.de!=0 && usel.de<todayCode && !isPreview) {
					// skip completely because drop/add date is past and not
					// enrolled.
					filterPass=false;
					selPassUiTop=false;
					includeSel=false;
					if (isDropSel) dropNoPassReason="o4e";
				}

				if (!forcePass && this.cpn.length>0 && (sel.classes[0].pn!=this.cpn && !(this.cpn=="none" && sel.classes[0].pn==""))) {
					// Chosen Period Number does not match
					filterPass=false;
					passPeriod=false;
					if (isDropSel) dropNoPassReason="cpn";
				}

				if (!forcePass && this.csn.length>0 && sel.classes[0].usn!=this.csn) {
					// Chosen Unique Selection Number does not match
					filterPass=false;
					if (isDropSel) dropNoPassReason="csn";
				}

				var filterPassFalseByCam=false;
				var occ2={};
				for (var k=0; k<sel.classes.length; k++) {
					var cls=sel.classes[k];
					var cam=cls.campus;
					var loc=cls.psl;
					var locPts=loc.split("i");
					var loc2=locPts.length>=2?("SHAREi"+locPts[1]):loc; // Handle "SHARE" locations
					var im = cls.im;
					var ses = cls.pn;
					var sesCode = ses.split('-')[1];
					if (!filterPass && passPeriod) {
						// Already failed some filter
						// unless it failed only the period, in which case keep
						// checking
					} else if (!(cam in cams)) {
						// failed global campus filter
						filterPassFalseByCam=true;
						occ2[cam]=true;
						if (!(cam in this.ca)) {
							// either no amend filter, or failed amend filter.
							filterPass=false;
							selPassUiTop=false;
						}
					} else if ((cam in cams && cam in this.cr)) {
						//present in global campus but removed from course campus - should show warning
						filterPassFalseByCam=true;
						occ2[cam]=true;
						// either no amend filter, or failed amend filter.
						filterPass=false;
						selPassUiTop=false;
					} else if (locFilter && (!isLocationInSelectedLocations(loc, locs)) && !(isLocationInSelectedLocations(loc2, locs))) {
						// failed global location filter
						filterPass=false;
						selPassUiTop=false;
						filterPassFalseByLocation=true;
						if (isDropSel) dropNoPassReason="loc";
					} else if (instFilter && im.length>0 && !(im in insts)) {
						// failed instructional method filter
						filterPass=false;
						selPassUiTop=false;
						filterPassFalseByInstruct=true;
						if (isDropSel) dropNoPassReason="ins";
					}else if (sesFilter && ses.length>0 && !(isSessionFilterPass(sesCode, sessions))) {
						// failed Session filter
						filterPass=false;
						selPassUiTop=false;
						filterPassFalseBySession=true;
						if (isDropSel) dropNoPassReason="ses";
					} else {
						if (filterPass) {
							anyPass=true; // Something passed filter.
						}
					}

					if (forcePass) {
						if (!filterPass) {
							enrException=true;
							filterPass=true;
							anyPass=true;
						}
					}

					// console.log({"selkey":sel.key,"period":sel.classes[0].pn,"filterPass":filterPass,"filterPassFalseByCam":filterPassFalseByCam});
					if (includeSel) {
						ccams[cam]=true;
						clocs[loc]=true;
						csessionCodes[sesCode]=true;
						if (passPeriod) csns[sel.classes[0].usn]=true;
						if (selPassUiTop) {
							cpns[sel.classes[0].pn]=true;
						}
					}
					if (filterPass) {
						ecams[cam]=true;
					}
				}
				if (includeSel && selPassUiTop) {
					if (!cots[sel.ot]) cots[sel.ot]=0;
					cots[sel.ot]++;
				}
				selPro.filterPass=filterPass;
				selPro.selPassUiTop=selPassUiTop;
				if (filterPass) {
					anySelsFilterPass=true;
					if (!sel.full) {
						allFilterPassFull=false;
						allSelsFull=false;
					} else {
						if (sel.waits>0) {
							filterPassWaits++;
							uselWaits++; // FIXME - not sure this makes sense because does not factor in all sels
						}
					}
					filterPassSgMatches+=sel.sgRating;
					if (disp.length>0) {
						disp+=" or ";
					}
					if (sel.usn.length>0) {
						if (sl.indexOf(sel.usn)<0) { // only once
							if (sl.length>0) sl+=",";
							sl+=sel.usn;
						}
					}
					disp+=sel.disp;
				} else {
					if (!sel.full && filterPassFalseByCam) {
						for (var occi in occ2) {
							occ[occi]=true;
						}
						openSelFailedCam=true;
					}
				}
			}
			if (anySelsFilterPass) {
				anyUselsFilterPass=true;
			}
			if (disp.length>45) {
				disp=disp.substr(0,22)+"..."+disp.substr(disp.length-18,disp.length);
			}
			if (sl.length>0) {
				disp="Section"+(sl.indexOf(",")>=0?"s":"")+" "+sl+": "+disp;
			}
			uselPro.allFilterPassFull=allSelsFull;
			uselPro.waits=uselWaits;
			uselPro.filterPass=anySelsFilterPass;
			uselPro.disp=disp;
		}
		
		
		this.cnPro.allFilterPassFull=allFilterPassFull;
		this.cnPro.filterPass=anyUselsFilterPass;
		this.cnPro.ots=cots;
		this.cnPro.filterPassWaits=filterPassWaits;
		this.cnPro.filterPassSgMatches=filterPassSgMatches;
		this.cnPro.cams=ccams;

		var periodUsed=true;
		if (this.cpn!=""&&this.cpn!="none") {
			var periodUsed=cpns[this.cpn];
			cpns[this.cpn]=true;			
		}
		
		this.cnPro.pns=cpns;
		this.cnPro.sns=csns;
		this.cnPro.ecams=ecams;
		this.cnPro.enrException=enrException;

		var filteredOutDropdown=(dropSelPro!=null && !dropSelPro.uselPro.filterPass);
		var otherCamGood=(allFilterPassFull && this.enr.length<=0 && openSelFailedCam);

		var t="";
		if (!anyPass) {
			var avail=filterPassFalseByHue?i8n.available.toLowerCase():"";
			var o4e=preventOutOfEnrollmentWindow?i8n.stillOpenForEnrollement:"";
			var wsa=filterPassFalseByCore?i8n.wSelAttribute:"";
			if (this.cnPro.allSelProsDenied) {
				t+="<span class='noentry'></span>"+"No classes are available due to scheduling rules.";
			} else if (allSelsHue) {
				t+="<span class='noentry'></span>"+i8n.s("allClassesHue",wsa,o4e);
			} else if (!periodUsed) {
				t+="<span class='noentry'></span>"+i8n.s("noClassesXWPeriod",avail,wsa,o4e);
			} else if (filterPassFalseByInstruct) {
				t+="<span class='noentry'></span>"+i8n.s("imFilteredOutCourse",avail,wsa,o4e);
			} else if (filterPassFalseByLocation) {
				t+="<span class='noentry'></span>"+i8n.s("noClasses",avail,wsa,o4e)+ i8n.occurAtSelectedlocations +getLocations(clocs)+".";
			}  else if (filterPassFalseBySession) {
				t+="<span class='noentry'></span>"+i8n.s("noClasses",avail,wsa,o4e)+ i8n.occurAtSelectedSessions +getSessions(csessionCodes)+".";
			} else {
				if (filterPassFalseByOOO) {
					t+= "<span class='noentry'></span>Not all classes are being tried";
				} else {					
					if (countProperties(cams)<=0) {
						t+= "<span class='noentry'></span>"+i8n.noCampusesSelectedAbove;
					} else {
						t+="<span class='noentry'></span>";
						var tName=EE.terms[BB.activeState.term].name
						t+= i8n.s("thisCourseHasNoClasses",avail,wsa,o4e,tName) + " ";
						if (countProperties(this.ca)>0) {
							t+="<span class='cam_ammed_in_use'></span>";
						}
					}
					if (!locFilter && countProperties(ccams)>0) {
						t+= i8n.chooseCampusToselectThisCourse;
						if (countProperties(this.ca)>0) {
							t+="<span class='cam_ammed_in_use'></span>";
						}
					}
				}
			}
		} else if (filteredOutDropdown) {
			if (dropNoPassReason=="ins") {
				t+="<span class='noentry noentry_hard'></span>"+i8n.imFilteredOutSelectedClass;
			} else if (dropNoPassReason=="loc") {
				t+="<span class='noentry noentry_hard'></span>"+i8n.doesNotoccurLocations+" ";
				if (!locFilter) {
					t+= i8n.youMustIncludeCampus;
				}
			} else {
				t+="<span class='noentry noentry_hard'></span>";
				var rea=i8n.selClassNot;
				if (dropNoPassReason=="core") {
					rea=i8n.selClassCore;
				} else if (dropNoPassReason="o4e") {
					rea=i8n.selClassO4e;
				} else if (dropNoPassReason="cpn") {
					rea=i8n.selClassCpn;
				} else if (dropNoPassReason="csn") {
					rea=i8n.selClassCsn;
				}
				t+=i8n.s("theSelClass",rea);
			}
		} else if (otherCamGood) {
			t+="<span class='noentry noentry_hard'></span>There are open classes of this at other campuses";
		} else {
			if (!locFilter) {
				t+=i8n.selectAdditionalCampuses+"<span class=\"selAddCam\"></span>";
			}
		}
		this.cnPro.stoptext=t;

		var st2="";     
		if (!filterPassFalseByInstruct && !filterPassFalseByLocation && !locFilter&& !filterPassFalseBySession) {
			st2=getCampuses((otherCamGood?occ:ccams),this.ca,cams);
		}
		this.cnPro.stoptext2=st2;
		
		/**
		 * @param loc class location
		 * @param locs selected locationss
		 * 
		 * returns true if loc matches with selected locs. 
		 */
		function isLocationInSelectedLocations(loc, locs) {
			var classLocs = loc.split("|");
			for (var n=0; n<classLocs.length; n++) {
				if (classLocs[n] in locs) {
					return true
				}
			}
			return false;
		}
		
		/**
		 * @param sesCode class session
		 * @param sessions selected sessions
		 * 
		 * returns true if sesCode matches with selected session in sessions. 
		 */
		function isSessionFilterPass(sesCode, sessions) {
			if (matchSessionLessThanOrEqual) {
				if(!sesCode) 
					return true;
				
				for(var s in sessions){
					if((parseInt(sesCode) <= parseInt(s) && parseInt(s) != 16) || (parseInt(sesCode) > 12 && parseInt(s) == 16))
						return true;
				}
				
				return false;
			} else {
				return (sesCode in sessions);
			}
		}
		
		/**
		 * 
		 * @param ccams
		 *            all campuses of course
		 * @param ca
		 *            campuses selected by user for this course
		 * @param cams
		 *            global campus filter
		 * @returns {String} HTML
		 */
		function getCampuses(ccams,ca,cams) {
			var s="";
			for (var c in ccams) {
				if (c.length<1) continue;
				var desc=getCampusDesc(c);
				s+="<li><label>";
				s+="<input class=\"class_cam_chk\" data-cam=\""+c+"\" type=\"checkbox\"";
				var inGlobal=(c in cams);
				if ((c in ca) || inGlobal) {
					s+=" checked=\"checked\"";
				}
				if (inGlobal) {
					s+=" disabled=\"disabled\"";
				}
				s+="/>";
				s+=desc;
				s+="</label></li>";
			}
			return s;
		}

		// Apply Selection Mask
		var tsi=0; // total selection index
		for (var i=0;i<uselPros.length;i++) {
			var uselPro=uselPros[i];
			for (var j=0;j<uselPro.selPros.length;j++) {
				var selPro=uselPro.selPros[j];
				selPro.selected=(this.sa.charAt(tsi)!="i");
				tsi++;
			}
		}


		// Apply Dropdown selection
		var dropDP=false;
		var dropSS=false;
		var dropUS=false;
		var dropOC=false;
		var dropOO=false;
		var dropLD=false;
		var dropIG=false;
		var dropKP=false;
		var includeAll=false;
		if (this.drop.indexOf("al")==0) {
			includeAll=true;
		} else if (this.drop.indexOf("ss")==0) {
			dropSS=true;
		} else if (this.drop.indexOf("us_")==0) {
			dropUS=true;
		} else if (this.drop.indexOf("oc")==0) {
			dropOC=true;
		} else if (this.drop.indexOf("oo")==0) {
			dropOO=true;
		} else if (this.drop.indexOf("ld")==0) {
			dropLD=true;
		} else if (this.drop.indexOf("ig")==0) {
			dropIG=true;
		} else if (this.drop.indexOf("kp_")==0) {
			dropKP=true;
		} else if (this.drop.indexOf("dp_")==0) {
			dropDP=true;
		}

		for (var j=0;j<uselPros.length;j++) {
			var uselPro=uselPros[j];
			for (var k=0;k<uselPro.selPros.length;k++) {
				var selPro=uselPro.selPros[k];

				var inc=true;

				if (!selPro.filterPass) {
					inc=false;
				} else if (includeAll) {
					// Include all selections
				} else if (dropIG || dropDP) {
					inc=false;
				} else if (dropSS) {
					if (!selPro.selected) {
						inc=false;
					}
				} else if (dropUS) {
					if (!selPro.uselPro.usel.isKeyMatch(this.drop.substr(3))) {
						inc=false;
					}
				} else if (dropOC) {
					if (selPro.sel.ot.indexOf("c")<0) {
						// Online Types must contain "c" for campus
						// for us to include it.
						inc=false;
					}
				} else if (dropOO) {
					if (selPro.sel.ot.indexOf("l")<0 && selPro.sel.ot.indexOf("o")<0) {
						inc=false;
					}
				} else if (dropLD) {
					if (selPro.sel.ot.indexOf("l")<0) {
						inc=false;
					}
				} else if (dropKP) {
					if (selPro.sel.key!=selPro.cnf.enr && selPro.sel.key!=selPro.cnf.cart) {
						if (selPro.cnf.enr.length==0 && selPro.cnf.cart.length==0 && selPro.uselPro.usel.isKeyMatch(this.drop.substr(3))) {
							// include!
							if (selPro.sel.key==this.drop.substr(3)) {
								this.drop="us_"+this.drop.substr(3);	
							}
						} else {
							inc=false;
						}
					}
				}

				selPro.included=inc;
			}
		}

		this.cnPro.computeRelevantRequirementGroups();
		this.cnPro.computeRelevantNotes();
		this.cnPro.computeRelevantAttrs();
		var ro=this.cnPro.cn.computeRelevantOfferings(cams);
		this.cnPro.cn.computeRelevantFields(ro);
		this.cnPro.computeRelevantCourseAttrs(ro);
	}
	
	this.isSelMatchesSearchClassNbr=function(sel){
		var classes = sel.classes;
		for(var x in classes){
			if(this.searchByClass==classes[x].key){
				return true;
			}
		}
		return false;
	}
	
	this.computeTotals = function() {
		var tsels=0;
		var tselsInc=0;
		var tcls=0;
		var tselsPUT=0;
		var tselsFP=0;
		var tselsFPaS=0;
		var usels=this.cnPro.cn.usels;
		var uselPros=this.cnPro.uselPros;
		for (var i=0; i<usels.length; i++) {
			var usel=usels[i];
			var uselPro=uselPros[i];
			for (var j=0; j<usel.sels.length; j++) {
				var sel=usel.sels[j];
				var selPro=uselPro.selPros[j];
				tsels++;
				if (selPro.selPassUiTop) tselsPUT++;
				if (selPro.included) tselsInc++;
				if (selPro.filterPass) tselsFP++;
				if (selPro.selected&&selPro.filterPass) tselsFPaS++;
				tcls+=sel.classes.length;
			}
		}
		var o={tusels:usels.length,tsels:tsels,tselsPUT:tselsPUT,tselsInc:tselsInc,tcls:tcls,tselsFP:tselsFP,tselsFPaS:tselsFPaS};
		//console.log(o);
		return o;
	}
	
	this.selectedInstitutions = function() {
		function campusToInst(c) {
			if (c.indexOf("i")>0) {
				return c.split("i")[0]; // PeopleSoft and others
			} else {
				return ""; // Banner and others
			}
		}
		
		var cnPro=this.cnPro;
		return Object.keys(cnPro.ecams)
			.filter(function(k){return cnPro.ecams[k]})
			.map(function(k){
				return campusToInst(k);
			});
	}

	this.computeWarnings = function(allSelPros,allCids,allStrms) {
		// Compute Requirement Group Warnings
		var cnPro=this.cnPro;
		cnPro.warnings.length=0;
		if (!cnPro.filterPass || this.drop.indexOf("dp_")==0) {
			return;
		}
		
		// Filter selected institutions
		var selectInst=this.selectedInstitutions();
		
		// Compute Course-level Requirement Group Warnings for unsatisfied Co-requisites
		var dcidsc={}; // Desired course ids to satisfy coreqs course-level
		for (var j=0;j<cnPro.cn.courses.length;j++) {
			var course=cnPro.cn.courses[j];
			
			if (!selectInst.some(function(i){return i === course.inst })) {
				continue;
			}
			
			for (var lines of course.rgsLines) {
				var result=evalCourseRg(lines,allCids,allStrms); // 0=not met, 1=met, 2=unknown
				if (result==0) {
					var rgLinesDesc = lines.filter(function(item){return item.desc})
						.map(function(item){return item.desc});
					for (var desc of rgLinesDesc) {
						cnPro.warnings.push(desc);
					}
					for (var cid in course.dcids) {
						if (!allCids[cid]) {
							dcidsc[cid]=true;
						}
					}
				}
			}
			
			if(template=="cmu" && course.rdesc != ''){
				var linkedCourseWarning = "Requirement: ";
				if (i>0) linkedCourseWarning += "; ";
				linkedCourseWarning += "<a style='text-decoration:underline' href='javascript:UU.caseAddCourse(\""+course.rdesc+"\");'>"+course.rdesc+"</a> ";
				linkedCourseWarning += " must be taken concurrently";
				this.cnPro.warnings.push(linkedCourseWarning);
			}
		}
		
		if (countProperties(dcidsc)>0) {
			var mc="";
			for (var cid in dcidsc) {
				if (mc.length>0) mc+=", and/or ";
				var crs=MM.cids[cid];
				crs=crs?crs:cid;
				mc+="<a style='text-decoration:underline' href='javascript:UU.caseAddCourse(\""+crs+"\");' title='Select this course'>"+crs+"</a>";
			}
			cnPro.warnings.push(i8n.s("takenTogetherCourse",mc));
		}


		// Compute Selection-level Requirement Group Warnings
		var dcids={}; // Desired course ids to satisfy coreqs class-level
		var sat=false;
		//var linkSat=true;
		for (var j=0;j<cnPro.uselPros.length;j++) {
			var uselPro=cnPro.uselPros[j];
			for (var k=0;k<uselPro.selPros.length;k++) {
				var selPro=uselPro.selPros[k];
				if (!selPro.filterPass) continue;
				if (selPro.isSatisfied(allSelPros)) {
					sat=true;
				}
				//if(!selPro.isLinkedCourseSatisfied(allSelPros)) {
				//	linkSat=false;
				//}

				// KCTCS - warn about classes being hidden due to associated
				// courses not in the list
				if (hideUncheckedClassNotes && !selPro.selected) continue;
				for (var bi=0; bi<selPro.sel.classes.length; bi++) {
					var cls=selPro.sel.classes[bi];
					for (var cid in cls.dcids) {
						if (!allCids[cid]) {
							dcids[cid]=true;
						}
					}
				}
			}
		}
		//if(!sat && linkSat) {
		//	cnPro.warnings.push(i8n.noClassesSatisfy);
		//}

		if (cnPro.enrException) {
			if (this.enr.length>0) {
				cnPro.warnings.push(i8n.doesNotOccurFilters);
			} else {
				cnPro.warnings.push(i8n.cartDoesNotFilters);
			}
		}

		if (countProperties(dcids)>0) {
			var mc="";
			for (var cid in dcids) {
				if (mc.length>0) mc+=", and/or ";
				var crs=MM.cids[cid];
				crs=crs?crs:cid;
				mc+="<a style='text-decoration:underline' href='javascript:UU.caseAddCourse(\""+crs+"\");' title='Select this course'>"+crs+"</a>";
			}
			cnPro.warnings.push(i8n.s("takenTogether","other classes",mc));
		}
		
		var dSelPro=this.getDropdownSelPro();
		if (dSelPro) {
			var selPros=dSelPro.uselPro.selPros;
			var okay=false;
			for (var i=0;i<selPros.length;i++) {
				if (!selPros[i].cohortDeniesInclusion()) {
					okay=true;
				}
			}
			if (!okay) {
				this.cnPro.warnings.push("The selected class does not belong to the right course block");
			}
		}
		// Warning messages for Linked Rule Courses.
		//var linkedCourses=cnPro.cn.linkedCourse2;
		//if(!linkSat && countProperties(linkedCourses)>0){
		//	var linkedCourseWarning = "Requirement: ";
		//	var first=true;
		//	for (var lc in linkedCourses) {
		//		//var linkedCourse = linkedCourseArray[i];
		//		var sels=linkedCourses[lc];
		//		//console.log(linkedCourse);
		//		if (!first) linkedCourseWarning += " and ";
		//		linkedCourseWarning+="<a style='text-decoration:underline' href='javascript:UU.caseAddCourse(\""+lc+"\");'>"+lc;
		//		linkedCourseWarning+="</a> ";
		//		var nbsels=countProperties(sels);
		//		if (nbsels==0) {
		//			// nothing
		//		} else if (nbsels==1) {
		//			linkedCourseWarning+=" "+Object.values(sels)[0];
		//		} else {
		//			linkedCourseWarning+=" ("+Object.values(sels).join(" or ")+")";
		//		}
		//		first=false;
		//	}
		//	linkedCourseWarning += " must be taken concurrently";
		//	this.cnPro.warnings.push(linkedCourseWarning);
		//}
	}

	this.toRequirement = function(includeAll) {
		var shellsT = [];
		shellsT.push(this.toShell(includeAll));
		return new Requirement(shellsT,1);
	}

	this.toShell = function(includeAll) {
		var includes=new Array();
		var uselPros=this.cnPro.uselPros;
		for (var j=0;j<uselPros.length;j++) {
			var uselPro=uselPros[j];
			var oneIncluded=false;
			for (var k=0;k<uselPro.selPros.length;k++) {
				if (uselPro.selPros[k].included) {
					oneIncluded=true;
					break;
				}
			}
			if (includeAll || oneIncluded) {
				includes.push({rank:(""+uselPro.rank()+(10000+j)),ind:j});
			}
		}

		includes.sort(function(a,b) {
			if (a.rank>b.rank) return 1;
			if (a.rank<b.rank) return -1;
			return 0;
		})

		var sortedIncludes = [];
		for (var i=0;i<includes.length;i++) {
			sortedIncludes.push(includes[i].ind);
		}

		return new Shell(this,sortedIncludes);
	}

	this.pin = function(add) {
		if (add) {
			if (this.cs==null) return false;
			this.setDropPlus(this.cs);
			return true;
		} else {
			if (this.lockdrop /* && !isAdvisor */) return false;
			this.lockdrop=false;
			this.setDrop(this.oldDrop);
			return true;
		}
	}

	this.isPinned = function() {
		return (this.drop.indexOf("_")==2 && this.drop.indexOf("dp_")!=0);
	}

	this.getEnrolledSelPro = function() {
		if (this.enr.length<=0) return null;
		return this.getSelPro(this.enr);
	}

	this.getDropdownSelPro = function () {
		if (this.drop.indexOf("_")<=0 || this.drop.indexOf("dp_")==0) return null;
		return this.getSelPro(this.drop.substr(3));
	}

	this.getCartSelPro = function() {
		if (this.cart.length<=0) return null;
		return this.getSelPro(this.cart);
	}
	
	this.getAtomicId = function() {
		return this.cnPro.atomicId;
	}

}

function CodeNumberPro(cn,cnf) {
	this.cn=cn;
	this.uselPros=new Array();
	for (var i=0;i<cn.usels.length;i++) {
		this.uselPros.push(new USelectionPro(cn.usels[i],cnf,cn));
	}

	// Set by applyFilter method
	this.allFilterPassFull=null;
	this.filterPass=null;
	this.ots=null;
	this.filterPassWaits=null;
	this.filterPassSgMatches=null;
	this.cams=null;
	this.pns=null;
	this.sns=null;
	this.ecams=null;
	this.enrException=null;

	this.stoptext=null;
	this.stoptext2=null;
	this.warnings=[];

	this.reqGs=null;
	
	var ucos={};
	for (var i=0;i<this.uselPros.length;i++) {
		var uselPro=this.uselPros[i];
		var ucos2=uselPro.ucos;
		for (var id in ucos2) {
			ucos[id]=ucos2[id];
		}
	}
	this.ucos=ucos; // All user Cohorts of this CodeNumber
	var atomKey=null;
	for (var id in ucos) {
		var uco=ucos[id];
		if(uco.group=="ERoLG"){
			atomKey="1";
		}
	}
	this.atomicId=atomKey;
	
	var denied=true;
	for (var i=0;i<this.uselPros.length;i++) {
		var uselPro=this.uselPros[i];
		for (var j=0;j<uselPro.selPros.length;j++) {
			var selPro=uselPro.selPros[j];
			if (selPro.cohortDeniesInclusion(ucos)) {
				selPro.sel.hue=true;
			} else {
				denied=false;
			}
		}
	}
	this.allSelProsDenied=denied;
	
	this.computeRelevantRequirementGroups = function() {
		var reqGs=new CombinedDescription();
		// for each requirement group of non-filtered selections
		// determine all acadCareers and all acadGroups
		for (var i=0; i<this.uselPros.length; i++) {
			var uselPro=this.uselPros[i];
			for (var seli=0; seli<uselPro.selPros.length; seli++) {
				var selPro=uselPro.selPros[seli];
				var sel=selPro.sel;
				if (selPro.filterPass) {
					
					var o=sel.course; // Course Offering
					var rdesc="";
					if (sel.ucr) {
						// Use course requirement
						rdesc=o.rdesc;
					}
					
					// For each class in the Selection
					for (var j=0;j<sel.classes.length;j++) {
						var c=sel.classes[j];
						// If the class has an associated class req group
						if (c.rgs.length>0) {
							// Add the Class Association req to the req desc.
							if (rdesc.length>0) {
								rdesc=padForNext(rdesc);
							}
							rdesc+=c.rdesc;
						}
					}
					
					if (rdesc=="") rdesc="None";
					
					reqGs.addDescription(rdesc,{ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid,seldisp:sel.disp});
					
				}
			}
		}
		this.reqGs=reqGs;
	}

	this.notes=new CombinedDescription();
	this.computeRelevantNotes = function() {
		var notes=new CombinedDescription();
		var ea=0;
		for (var i=0; i<this.uselPros.length; i++) {
			var uselPro=this.uselPros[i];
			for (var seli=0; seli<uselPro.selPros.length; seli++) {
				var selPro=uselPro.selPros[seli];
				var o=selPro.sel.course;
				if (!selPro.filterPass) continue;
				if (hideUncheckedClassNotes && !selPro.selected) continue;
				for (var bi=0; bi<selPro.sel.classes.length; bi++) {
					var cls=selPro.sel.classes[bi];
					ea++;
					if (cls.n.length>0) {
						notes.addDescription(cls.n,{disp:cls.disp,ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid})
					}
				}
			}
		}
		notes.setExpectedAdds(ea);
		this.notes=notes;
	}

	this.cattrs=null;
	this.computeRelevantCourseAttrs = function(ro) {
		var cattrs={};		
		for (var i=0; i<ro.length; i++) {
			var c=ro[i];
			for (var k in c.oattrs) {
				cattrs[k]=c.oattrs[k];	
			}
		}
		this.cattrs=cattrs;
	}

	this.attrs=null;
	this.attrsCD=new CombinedDescription();
	this.eattrsCD={};
	this.computeRelevantAttrs = function() { // TODO TEST THIS AGAIN
		var attrs={};
		var attrsCD=new CombinedDescription();
		var eattrsCD={};
		var ea=0;
		
		// Get list of relevant classes
		var clss=[];
		for (var i=0; i<this.uselPros.length; i++) {
			var uselPro=this.uselPros[i];
			for (var seli=0; seli<uselPro.selPros.length; seli++) {
				var selPro=uselPro.selPros[seli];
				var o=selPro.sel.course;
				if (!selPro.filterPass) continue;
				if (hideUncheckedClassNotes && !selPro.selected) continue;
				for (var bi=0; bi<selPro.sel.classes.length; bi++) {
					var cls=selPro.sel.classes[bi];
					clss.push(cls);
				}
			}
		}
		
		// Aggregate list of attributes
		var alleattrs={};
		for (var clsi=0;clsi<clss.length;clsi++) {
			var cls=clss[clsi];
			for (var a in cls.eattrs) {
				alleattrs[a]=true;
			}
		}
		
		// Loop
		for (var clsi=0;clsi<clss.length;clsi++) {
			var cls=clss[clsi];		
			for (var a in cls.attrs) {
				// Add attribute if DNE
				if (!attrs[a]) {
					attrs[a]={};
				}
				// Add attribute possible val if DNE
				var vals=cls.attrs[a];
				for (var vi=0;vi<vals.length;vi++) {
					var val=vals[vi];
					if (!attrs[a][val]) {
						attrs[a][val]=[];
					}
					// Add class to possible val (to remove)
					attrs[a][val].push(cls.disp);
				}
			}
			var disp=prepAttributes(cls.attrs);
			ea++;
			attrsCD.addDescription(disp,{disp:cls.disp,ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid});
			for (var a in alleattrs) {
				var pa=prepExtAttribute(a,cls.eattrs[a]);
				if (!pa) continue;
				var cd=eattrsCD[pa.title];
				if (!cd) {
					cd=new CombinedDescription();
					eattrsCD[pa.title]=cd;
				}
				cd.addDescription(pa.disp,{disp:cls.disp,ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid});
			}
		}
		
		attrsCD.setExpectedAdds(ea);
		for (var a in eattrsCD) {
			eattrsCD[a].setExpectedAdds(ea);
		}
		this.attrs=attrs;
		this.attrsCD=attrsCD;
		this.eattrsCD=eattrsCD;
	}
	
	this.hasCourseAttrValue = function(val) {
		for (var a in cnf.cnPro.cattrs) {
			if (cnf.cnPro.cattrs[a].indexOf(val)>=0) {
				return true;
			}
		}
		return false;
	}

	function Attr(key) {
		this.key=key;
		this.val=null;
	}

}

function USelectionPro(usel,cnf,cn) {
	this.usel=usel;
	this.cnf=cnf;
	this.selPros=new Array();

	var ucos={};
	for (var i=0;i<usel.sels.length;i++) {
		this.selPros.push(new SelectionPro(usel.sels[i],this,cn));
		ucos=usel.sels[i].ucos;
	}
	this.ucos=ucos; // Should be same for all sels of usel

	this.rank = function() {
		if (uselSortRule=="rand") return Math.random();
		if (uselSortRule=="alpha") return this.usel.sels[0].disp;
		if (uselSortRule=="taken") {
			var fillPercMin=1000;
			for (var i=0;i<usel.sels.length;i++) {
				var sel=usel.sels[i];
				if (!this.selPros[i].included) continue;
				if (sel.fillPerc*100>=minSeatsTakenPercToPromote && sel.fillPerc<fillPercMin) {
					fillPercMin=sel.fillPerc;
				}
			}
			return fillPercMin;
		}
		return 0;
	}
}

function SelectionPro(sel,uselPro,cn) {
	this.sel=sel;
	this.uselPro=uselPro;
	this.cnf=this.uselPro.cnf;
	this.cn=cn;

	this.selected=true; // set by CodeNumberFilter.sa (selection mask)
	this.included=true;    // See def'n in applyFilters
	this.filterPass=null;  // See def'n in applyFilters
	this.selPassUiTop=null;// See def'n in applyFilters
	this.postPass=null; // Set after results generated and before sortAndFilter by isPostFilterPass

	var rank=0;
	if (selSortRule=="rand") {
		rank=Math.random();
	} else if (selSortRule=="alpha") {
		rank=sel.disp;
	} else if (selSortRule=="taken") {
		rank=(sel.fillPerc*100>=minSeatsTakenPercToPromote)?sel.fillPerc:1000;
	}
	this.rank=rank;

	//this.isLinkedCourseSatisfied=function(selPros) {
	//	for (var cnk in this.cn.linkedCourse2) {
	//		var sks=this.cn.linkedCourse2[cnk];
	//		var found=false;
	//		for(var x=0; x<selPros.length; x++){
	//			var selPro=selPros[x];
	//			var cnKey=selPro.cn.key;
	//			var selKey=selPro.sel.key;
	//			if (cnKey==cnk) {
	//				// At least 1 selection from each unique CodeNumber in the Rule must be found
	//				if (countProperties(sks)==0||sks[selKey]) {
	//					found=true;
	//					break;
	//				}
	//			}
	//		}
	//		if (!found) {
	//			return false;
	//		}
	//	}
	//	return true;
	//}
	
	var isMetFct = function(rgLine,selPros,filters) { // Uses selections
		for (var si=0;si<selPros.length;si++) {
			var selPro=selPros[si];
			if (filters && !selPro.isPostFilterPass(filters)) {
				continue;
			}
			if (rgLine.type!="CRSE"||rgLine.rtype!="CO") return 2;
			if (rgLine.cid.length>0) {
				// PS Mode
				if (rgLine.strm=="") return 2;
				if (selPro.sel.course.cid==rgLine.cid && selPro.sel.classes[0].ac==rgLine.ac && selPro.sel.strm==rgLine.strm) {
					return 1;
				}
			} else {
				// Other SIS
				if (selPro.sel.cn.key==rgLine.cnKey) {
					if (rgLine.classNbrs.length==0) {
						return 1;
					} else {
						loop1:
						for (var cn of rgLine.classNbrs){
							for (var cls of selPro.sel.classes) {
								if (cls.key==cn) {
									continue loop1;	
								}
							}
							return 0;
						}
						return 1;
					}
				}
			}
		}
		return 0;
	}
	
	this.isSatisfied=function(selPros,filters) {

		// Course-level		
		for (var lines of this.sel.course.rgsLinesFromRule) {
			if (evalRgLines(lines,isMetFct,selPros,filters)==0) {
				return false;
			}
		}
		
		// Class-level
		for (var cls of this.sel.classes) {
			for (var lines of cls.rgsLines) {
				if (evalRgLines(lines,isMetFct,selPros,filters)==0) {
					return false;
				}
			}
		}
		return true;
	}
	
	this.hasClassAttrValue = function(val) {
		for (var a in this.sel.classes) {
			for (var b in this.sel.classes[a].attrs) {
				if (this.sel.classes[a].attrs[b].indexOf(val)>=0) {
					return true;
				}
			}
		}
		return false;
	}

// this.getGroups = function() {
// var gs=["all"];
// if (!this.sel.full) gs.push("open");
// if (this.sel.full && this.sel.waits>0) gs.push("wait");
// if (this.sel.key==this.uselPro.cnf.enr) gs.push("enrl");
// return gs;
// }

	this.isPostFilterPass = function(filters) {
		if (!this.included) return false;
		// Ignore full/waitlist/reserve filters if enrolled.
		if (this.sel.key!=this.uselPro.cnf.enr) {
			if (filters.hideFull && this.sel.full && this.sel.waits<=0) return false;
			if (filters.hideFull && filters.hideWaitlistable && this.sel.full) return false;
			if (this.sel.reserved && filters.hideReserved) return false;
			// This last condition is debatable/confusing
			if (!filters.hideFull && filters.hideWaitlistable && this.sel.waits>0 && !this.sel.full) return false;
		}

		var ot=this.sel.ot;
		if (filters.hideOnCampus && ot.indexOf("c")>=0) return false;
		if (filters.hideOnline && (ot.indexOf("o")>=0 || ot.indexOf("l")>=0)) return false;
		if (filters.hideOffCampus && ot=="f") return false;

		if (filters.hideClosed && this.sel.closed) return false;
		if (filters.hideHonors && this.sel.hon>0) return false;
		var drop = this.cnf.drop;
		var oldDrop = this.cnf.oldDrop;
		if ((drop.indexOf("oc")==0 || oldDrop.indexOf("oc")==0) && ot.indexOf("c")<0) return false;
		if ((drop.indexOf("oo")==0 || oldDrop.indexOf("oo")==0) && ot.indexOf("l")<0 && ot.indexOf("o")<0) return false;
		//if ((drop.indexOf("ld")==0 || oldDrop.indexOf("ld")==0) && ot.indexOf("l")<0) return false;
		return true;
	}

	this.isChosen = function() {
		return this.cnf.cs==this.sel.key;
	}
	
	this.isPinned = function() {
		if (!this.cnf.isPinned()) return false;
		// A pin will pin all sels in the usel.
		var dsp=this.cnf.getDropdownSelPro();
        if (!dsp) return false;
        var selPros=dsp.uselPro.selPros;
		for (var i=0;i<selPros.length;i++) {
			if (selPros[i]==this) return true;
		}
		return false;
	}
	
	this.cohortDeniesInclusion = function(cnfucos) {
		// Find every enforcemax cohort groups in this CodeNumber. For each make sure
		// this selection has a cohort of that group.
		var ucos=cnfucos?cnfucos:this.cnf.cnPro.ucos;
		for (var id in ucos) {
			var uco=ucos[id];
			if (!MM.cohortGroups[uco.group].cohortness) { // if this is null, Gson leaves the field absent
				// Found a cohort group in CN with enforemax. Make sure Selection has cohort in this group
				var found=false;
				for (var id2 in this.sel.ucos) {
					var seluco=this.sel.ucos[id2];
					if (seluco.group==uco.group) {
						found=true;
						break;
					}
				}
				if (!found) {
					return true;	
				}
			} 
		}
		return false;
	}

}

function CodeNumber(cnEl,cnTimeBlocks,term) {
	this.key=cnEl.getAttribute("key");
	this.term=term;
	this.courses=[];
	this.usels=[];
	this.linkedCourse=[];
	

	this.code=cnEl.getAttribute("code");
	this.number=cnEl.getAttribute("number");
	this.faculty=cnEl.getAttribute("faculty");
	this.since=(new Date()).getTime();

	for (var nodei=0; nodei<cnEl.childNodes.length; nodei++) {
		var cEl=cnEl.childNodes[nodei];
		if (cEl.nodeType!=1) continue;
		if (cEl.nodeName=="offering") {
			var course = new Course2(cEl);
			this.courses.push(course);
		}
	}
	
	for (var nodei=0; nodei<cnEl.childNodes.length; nodei++) {
		var lc=cnEl.childNodes[nodei];
		if (lc.nodeType!=1) continue;
		if (lc.nodeName=="linkCourse") {
			var linkedCourse = new linkedCourseKeys(lc);
			this.linkedCourse.push(linkedCourse);
		}
	}
	this.linkedCourse2={};
	for (var i=0;i<this.linkedCourse.length;i++) {
		var lc=this.linkedCourse[i];
		if (!this.linkedCourse2[lc.key]) {
			this.linkedCourse2[lc.key]={};
		}
		if (lc.selectionKey.length>0) {
			this.linkedCourse2[lc.key][lc.selectionKey]=lc.skdisp;
		}
	}
	
	for (var nodei=0; nodei<cnEl.childNodes.length; nodei++) {
		var uselectionEl=cnEl.childNodes[nodei];
		// check node type
		if (uselectionEl.nodeType!=1) continue;
		if (uselectionEl.nodeName!="uselection") continue;
		var uselection = new USelection2(uselectionEl,this,cnTimeBlocks);
		this.usels.push(uselection);
	}

	// Put the Cross Listed description together
	var cldesc=null;
	for (var i=0;i<this.courses.length;i++) {
		var c=this.courses[i];
		// var rdesc2="";
		if (this.courses.length>1) {
			// rdesc2+=c.ac+": "+c.d;
			if (cldesc!=null && cldesc!=c.clcn) {
				cldesc="";
			} else {
				cldesc=c.clcn;
			}
		} else {
			cldesc=c.clcn;
		}
	}
	this.cldesc=cldesc==null?"":cldesc.replace(/,/g,", ");


	this.updateLiveSeats = function(sels) {
		var change = false;
		for (var i=0; i<this.usels.length; i++) {
			var usel = this.usels[i];
			for (var j=0;j<sels.length;j++) {
				if (usel.updateSelection(sels[j])) {
					change=true;
				}
			}
		}
		this.since=(new Date()).getTime();
		return change;
	}
	
	// These can change based on CourseID
	this.title="uncalc";
	this.desc="uncalc";
	this.snote="uncalc";
	this.cores=[];

	this.computeRelevantOfferings = function(cams) {
		var ro=[];
		
		// compute ro by inst
		for (var i=0;i<this.courses.length;i++) {
			var crs=this.courses[i];
			for (var cam in cams) {
				var ii=cam.indexOf("i");
				if (ii>0) {
					cam=cam.substr(0,ii);
				}
				if (crs.inst==cam) {
					ro.push(crs);
					break;
				}				
			}
		}

		var roMap = {};
		if (ro.length==0) {
			// compute ro by campus
			for (var i=0;i<this.courses.length;i++) {
				var crs=this.courses[i];
				crs.cams=[]
				for (var cam in cams) {
					loop1:
					for(var x = 0; x < this.usels.length; x++){
						var sels = this.usels[x].sels;
						for(var y = 0; y < sels.length; y++){
							var sel = sels[y];
							for(var z = 0; z < sel.classes.length; z++){
								//is cam in course
								if(sel.course.key == crs.key && sel.classes[z].campus == cam) {
									crs.cams.push(cam);
									if(!roMap[crs.key]){
										roMap[crs.key]=crs;
									}
									break loop1;
								}
							}
						}
					}
				}
			}
			for (var key in roMap) {
				var crs = roMap[key];
				ro.push(crs);
			}
			if(ro.length > 1){
				for (var i=0;i<ro.length;i++) {
					var crs=ro[i];
					if(!crs.origTitle){
						crs.origTitle=crs.title;
					}
					crs.title=crs.origTitle+' ('+crs.cams.join(',')+')';
				}
			}
		}
			
		if (ro.length==0) {
			// fall back
			if (this.courses.length>0) {
				ro.push(this.courses[0]);
			}
		}
		return ro;
	}
	
	this.computeRelevantFields = function(ro) {
		var titles=new CombinedDescription();
		var descs=new CombinedDescription();
		var snotes=new CombinedDescription();
		var cs=[];
		var title="";
		var desc="";
		var snote="";
		for (var i=0;i<ro.length;i++) {
			var o=ro[i];
			
			titles.addDescription(o.title,{ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid});
			descs.addDescription(o.desc,{ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid});
			snotes.addDescription(o.snote,{ac:o.ac,ag:o.ag,inst:o.inst,cid:o.cid});
			
			if (!(o.oattrs['c_cores']===undefined)) {
				var cores=o.oattrs['c_cores'];
				for (var j=0;j<cores.length;j++) {
					cs.push(cores[j]);
				}
			}
		}
		this.title=titles.describeIt("","{}"," / ",", ",false);
		this.desc=descs.describeIt(" (for {} classes): ","{}",". ",", ",true,"other",true);
		this.snote=snotes.describeIt(" (for {} classes): ","{}",". ",", ",true,"other",true);
		this.cores=cs;
	}
	
}
function linkedCourseKeys(lc) {
	this.key=lc.getAttribute("key");
	this.selectionKey=lc.getAttribute("selectionKey");
	this.skdisp=lc.getAttribute("skdisp");
}
function Course2(cEl) {
	this.key=cEl.getAttribute("key");
	this.cid=cEl.getAttribute("cid");
	this.inst=cEl.getAttribute("inst");
	this.ac=cEl.getAttribute("ac");
	this.ag=cEl.getAttribute("ag");
	this.ao=cEl.getAttribute("ao");
	this.rgs=cEl.getAttribute("rgs").split(",").filter(function(s){return s.length>0;});
	processRgs(this);
	this.ti=cEl.getAttribute("ti");
	this.eq=cEl.getAttribute("eq");
	this.clcn=cEl.getAttribute("clcn");
	this.rdesc=MM.findReqGroupDesc(this.rgs);
	var oattrRun="this.oattrs="+cEl.getAttribute("oattrs")+";";
	eval(oattrRun);
	this.title=cEl.getAttribute("title");
	this.origTitle=this.title;
	this.desc=cEl.getAttribute("desc");
	this.snote=cEl.getAttribute("snote");
	this.ame=cEl.getAttribute("ame")=="1"?true:false;
	this.rd=cEl.getAttribute("rd");
}

function USelection2(uselEl,cn,cnTimeBlocks) {
	this.cn=cn;
	this.key=uselEl.getAttribute("key");
	this.d1=+uselEl.getAttribute("d1");
	this.d2=+uselEl.getAttribute("d2");
	this.de=+uselEl.getAttribute("de");
	this.ss=uselEl.getAttribute("ss");
	this.mp=uselEl.getAttribute("mp")=="true"?true:false;
	this.bs=uselEl.getAttribute("bs").split(",");
	for (var i=0;i<this.bs.length;i++) {
		this.bs[i]=+this.bs[i];
	}
	this.sels = new Array();

	var ymd1 = new YearMonthDay(this.d1);
	var ymd2 = new YearMonthDay(this.d2);
	this.ds=getMonth(ymd1.m%12)+" "+ymd1.d+" - "+getMonth(ymd2.m%12)+" "+ymd2.d;

	var seli=0;
	var hon=0;
	var usn=null;
	var usnSame=true;
	for (var i=0; i<uselEl.childNodes.length; i++) {
		var unknownEl=uselEl.childNodes[i];
		if (unknownEl.nodeName!="selection") {
			continue;
		}
		var sel = new Selection2(unknownEl,cn,this,cnTimeBlocks);
		this.sels[seli]=sel;

		hon+=sel.hon;
		seli++;
		if (usn==null) {
			usn=sel.usn;
		}
		if (usn!=sel.usn) {
			usnSame=false;
		}
	}
	this.usn=usnSame?usn:null;
	this.hon=hon;
	this.isKeyMatch = function(key) {
		for (var i=0;i<this.sels.length;i++) {
			if (this.sels[i].key==key) {
				return this.sels[i];
			}
		}
		return null;
	}
	this.updateSelection = function(sel) {
		for (var i=0;i<this.sels.length;i++) {
			if (this.sels[i].key!=sel.key) continue;
			// Overwrite old selection's ClassModels with new ones
			this.sels[i].setClasses(sel.classes);
			return true;
		}
		return false;
	}
}

var vaMap = {};

function Selection2(selEl,cn,usel,cnTimeBlocks) {
	this.cn=cn;
	this.usel=usel;
	this.key=selEl.getAttribute("key");
	vaMap[this.key]=selEl.getAttribute("va");
	var cmkey=selEl.getAttribute("cmkey");
	this.credits=selEl.getAttribute("credits");
	this.creditsMax=selEl.getAttribute("creditsMax");
	this.apUnits=selEl.getAttribute("apUnits");
	this.thc=selEl.getAttribute("thc");
	this.isApproved=selEl.getAttribute("isApproved");
	
	var ucosRun="this.ucos="+selEl.getAttribute("ucos")+";";
	eval(ucosRun);
	
	this.inst=selEl.getAttribute("inst");
	this.ac=selEl.getAttribute("ac");
	this.strm=selEl.getAttribute("strm");
	this.ucr=selEl.getAttribute("ucr")=="1"?true:false;

	// Determine course offering
	if (this.cn!=null) { // null for incremental updates
		for (var i=0;i<this.cn.courses.length;i++) {
			if (this.cn.courses[i].key==cmkey) {
				this.course=this.cn.courses[i];
			}
		}
	}

	// Get XML elements into array
	this.acreqs=false;
	var classes=new Array();
	for (var nodei=0; nodei<selEl.childNodes.length; nodei++) {
		var cEl=selEl.childNodes[nodei];
		if (cEl.nodeType!=1) continue;
		var cls = new Class(cEl,cnTimeBlocks);
		if (cls.rgsLines.length>0) {
			this.acreqs=true;
		}
		classes.push(cls);
	}

	// Set new blocks (i.e. ClassModels) to this Selection
	this.setClasses = function(classes) {
		var disp="";
		var closed=false;
		var hon=0;
		var waits=1;
		var full=false;
		var usn=null;
		var usnSame=true;
		var pn=null;
		var pnSame=true;
		var fillPerc=0;
		var ots="";
		var hue=false;
		var cores=null;
		var reserved=false;
		
		var homeCams="";
		if (typeof BB  != "undefined") {
			homeCams=generalizeSortHomeCampToCollege?BB.activeState.defaultCamsGeneralizedToCollege():BB.activeState.defaultCams();
		}
		var homeRating=0;
		
		for (var bi=0; bi<classes.length; bi++) {
			var cls = classes[bi];
			if (cls.nres<=0) reserved=true;
			if (cls.c) closed=true;
			if (cls.hue) hue=true;
			if (cls.secNo.charAt(0)=='H') {
				hon++;
			}
			if (ots.indexOf(cls.ot)<0) {
				ots+=cls.ot;
			}
			if (homeCams[cls.campus]) {
				homeRating=1;
			}
			if (!(cls.attrs['s_cores']===undefined)) {
				var coreL=cls.attrs.s_cores;
				cores={};
				for (var ci=0;ci<coreL.length;ci++) {
					var coo=coreL[ci];
					if (coo.length==0) continue;
					cores[coo]=true;
				}
			}
			if (!cls.dispOnly()) {
				full=full||cls.isFull;
				if (cls.ws<1) {
					waits=0;
				}
				var fillPerc2 = (cls.me<=0||full?1:1-(cls.os/cls.me));
				if (fillPerc2>fillPerc) {
					fillPerc=fillPerc2;
				}
				if (disp.length>0) {
					disp+=" - ";
				}
				disp+=cls.disp;

				// If all blocks have the same Unique Selection Number then save
				// it into usn.
				if (usn==null) {
					usn=cls.usn;
				}
				if (cls.usn!=usn) {
					usnSame=false;
				}
				// If all blocks have the same Period Number then save it into
				// pn.
				if (pn==null) {
					pn=cls.pn;
				}
				if (cls.pn!=pn) {
					pnSame=false;
				}

			}
		}
		this.usn=usnSame?(usn==null?"":usn):"";
		this.pn=pnSame?(pn==null?"":pn):"";
		this.closed=closed;
		this.hue=hue; // Can be set true by cohortDeniesInclusion
		this.hon=hon;
		this.cores=cores;
		if (showPeriodWithDisp && this.pn.length>0) {
			disp=""+i8n.period+" "+this.pn+": "+disp;
		}
		this.disp=disp;
		this.waits=waits;
		this.full=full;
		this.fillPerc=fillPerc;
		this.classes = classes;

		this.ot=ots;
		this.onCampus=(ots.indexOf("c")>=0);
		this.online=(ots.indexOf("o")>=0||ots.indexOf("l")>=0);
		this.reserved = reserved;
		this.homeRating=homeRating;
	}

	this.setClasses(classes);
	
	// Get set of classNbrs
	this.keys = function() {
		var k=[];
		for (var i=0;i<this.classes.length;i++) {
			k[this.classes[i].key]=true;
		}
		return k;
	}
}

function processRgs(obj) { // process requirement groups at course-level or class-level
	obj.rdesc=MM.findReqGroupDesc(obj.rgs);
	obj.rgsLines=[]; // doesn't include catalogue level (ucr)
	obj.rgsLinesFromRule=[];
	obj.dcids={}; // Desired course ids (or cnKeys) to satisfy coreqs

	// Determine all Req. Group Lines that are part of this model
	for (var rg of obj.rgs) {
		var testable=true;
		var lines=[];
		for (var r of MM.rgLines) {
			if (r.reqg==rg) {
				lines.push(r);
				if (!r.isTestable()) testable=false;
			}
		}
		obj.rgsLines.push(lines);
		if (rg.indexOf("RGfL")==0) {
			obj.rgsLinesFromRule.push(lines);
		}
		if (testable) {
			for (var l of lines) {
				obj.dcids[l.cid?l.cid:l.cnKey]=true;
			}
		}
	}	
}

function Class(cEl,cnTimeBlocks) {
	this.type=cEl.getAttribute("type");
	this.key=cEl.getAttribute("key");
	this.cartid=cEl.getAttribute("cartid");
	this.secNo=cEl.getAttribute("secNo");
	this.isAuthorized=cEl.getAttribute("isApproved");
	this.location=cEl.getAttribute("location");
	this.status=cEl.getAttribute("status");
	this.psl=cEl.getAttribute("psl");
	this.u=(cEl.getAttribute("u")=="true"?true:false); // unknown seat
														// availability
	this.c=(cEl.getAttribute("c")=="true"?true:false); // closed
	this.hue=(cEl.getAttribute("hue")=="1"?true:false); // hidden unless
														// enrolled
	this.os=+cEl.getAttribute("os");
	this.me=+cEl.getAttribute("me");
	this.csos=+cEl.getAttribute("csos");
	this.csme=+cEl.getAttribute("csme");
	this.isFull=+cEl.getAttribute("isFull");
	this.ws=+cEl.getAttribute("ws");
	this.custstat=cEl.getAttribute("custstat");
	this.wc=+cEl.getAttribute("wc");
	this.wlst=cEl.getAttribute("wlst");
	this.n=cEl.getAttribute("n"); // notes
	this.txtb=cEl.getAttribute("txtb"); // TextBooks
	this.fd=cEl.getAttribute("fd"); // full desc
	this.disp=cEl.getAttribute("disp");
	this.usn=cEl.getAttribute("usn");
	this.ot=cEl.getAttribute("ot");
	this.im=cEl.getAttribute("im");
	this.hs=cEl.getAttribute("hs");
	this.credits=cEl.getAttribute("credits");
	this.creditsMax=cEl.getAttribute("creditsMax");
	this.rgs=cEl.getAttribute("rgs").split(",").filter(function(s){return s.length>0;});
	processRgs(this);
	var examblocks="this.examblocks="+cEl.getAttribute("examblocks")+";";
	eval(examblocks);
	this.rdesc=MM.findReqGroupDesc(this.rgs);
	this.ac=cEl.getAttribute("ac");
	this.pn=cEl.getAttribute("pn");
	this.teacher=cEl.getAttribute("teacher");
	this.location=cEl.getAttribute("location");
	var loosRun="this.loos="+cEl.getAttribute("loos")+";";
	eval(loosRun);
	this.campus=cEl.getAttribute("campus");
	var attrRun="this.attrs="+cEl.getAttribute("attrs")+";";
	eval(attrRun);
	var eattrRun="this.eattrs="+cEl.getAttribute("eattrs")+";";
	eval(eattrRun);
	this.recl=cEl.getAttribute("recl");
	this.recul=cEl.getAttribute("recul");
	this.nres=+cEl.getAttribute("nres");

	var getTimeBlock = function(id) {
		for (var i=0; i<cnTimeBlocks.length; i++) {
			if (cnTimeBlocks[i].id==id) {
				return cnTimeBlocks[i];
			}
		}
		console.log("Timeblock id="+id+" not found");
		return null;
	}

	var timeblockids=cEl.getAttribute("timeblockids").split(",");
	this.timeblocks = new Array();
	for (var i=0; i<timeblockids.length; i++) {
		var id = timeblockids[i];
		if (id=="") continue; // online courses do this
		var tb = getTimeBlock(id,cnTimeBlocks);
		this.timeblocks[i] = tb;
	}

	this.getLocForTimeBlock = function(id) {
		if (this.loos) {
			var loc=this.loos[id];
			if (loc) {
				if (loc.indexOf(";")>=0) {
					return "(multiple)";
				}
				return loc;
			} else {
				return this.location;
			}
		}
		return this.location;
	}

	this.dispOnly = function() {
		return (this.key.indexOf(".")>=0);
	}
	
	
	this.getFullState = function() {
		if (this.isFull) {
			if (this.ws>0) {
				// waitlist
				return "yellow";
			}
			// full
			return "red";
		}
		if (onReservedFilter && this.nres<=0) {
			// reserved
			return "orange";
		}
		// open
		return "green"; 
	}
}


function TimeBlock(id,day,t1,t2,d1,d2,s,xm,ot,type) {
	this.id=id;
	this.day=day; // 1=Sunday, 2=Monday, ...
	this.t1=t1;
	this.t2=t2;
	this.d1=d1;
	this.d2=d2;
	this.s=s; // Date String: Ex: Feb 5 - Jun 15
	this.xm=xm; // is exam
	this.ot=ot;
	this.offset=0;
	this.overlap=0;
	this.type=type;
	
	this.applyOffset = function(offset) {
		var diff=offset-this.offset;
		this.t1=this.t1+diff;
		this.t2=this.t2+diff;
		this.offset=offset;
	}
	this.weekDay = function (long){
		if (long) {
			return getDay2(this.day);
		}
		return getDay(this.day);
	};
	this.duration = function (){
		if (!(typeof BB === "undefined")) {
			var french=(BB.lang=="fr");
			var hour12=!french;
		}
		var ymd1 = new YearMonthDay(this.d1);
		var ymd2 = new YearMonthDay(this.d2);
		var t="";
		if (french) {
			t+=ymd1.d+" "+getMonth(ymd1.m%12);
			if (d1!=d2) {
				t+=" - "+ymd1.d+" "+getMonth(ymd2.m%12);
			}
		} else {
			t+=getMonth(ymd1.m%12)+" "+ymd1.d;
			if (d1!=d2) {
				t+=" - "+getMonth(ymd2.m%12)+" "+ymd2.d;
			}
		}
		return t;
	};
	this.toTime = function (){
		if (!(typeof BB === "undefined")) {
			var french=(BB.lang=="fr");
			var hour12=!french;
			if(BB.tz){
				t1 = t1+BB.tz.offset*60;
				t2 = t2+BB.tz.offset*60
			}
		}

		var t="",t1 = this.t1,t2 = this.t2;

		var h1=Math.floor(t1/60);
		var m1=t1-h1*60;
		if (m1<=9) m1="0"+m1;
		var h2=Math.floor(t2/60);
		var m2=t2-h2*60;

		if (m2<=9) m2="0"+m2;
		var a1="";
		var a2="";
		if (hour12) {
			a1="AM";
			if (h1>=12) {
				a1="PM";
			}
			if (h1>12) {
				h1-=12;
			}
			a2="AM";
			if (h2>=12) {
				a2="PM";
			}
			if (h2>12) {
				h2-=12;
			}
		}
		if (!(typeof i8n === "undefined")) t+=h1+":"+m1+" "+a1+" "+i8n.to+" "+h2+":"+m2+" "+a2;
		else t+=h1+":"+m1+" "+a1+" to "+h2+":"+m2+" "+a2;
		return t;
	}

	this.toTimeFormatted = function (){
		if (!(typeof BB === "undefined")) {
			var french=(BB.lang=="fr");
			var hour12=!french;
			if(BB.tz){
				t1 = this.t1+BB.tz.offset*60;
				t2 = this.t2+BB.tz.offset*60
			}
		}

		var t="",t1 = t1 ? t1 : this.t1,t2 = t2 ? t2 : this.t2;

		var h1=Math.floor(t1/60);
		var m1=t1-h1*60;
		if (m1<=9) m1="0"+m1;
		var h2=Math.floor(t2/60);
		var m2=t2-h2*60;

		if (m2<=9) m2="0"+m2;
		var a1="";
		var a2="";
		
		if (hour12) {
			a1="AM";
			if (h1>=12) {
				a1="PM";
			}
			if (h1>12) {
				h1-=12;
			}
			a2="AM";
			if (h2>=12 && h2 < 24) {
				a2="PM";
			}
			if (h2>12) {
				h2-=12;
			}
		}
		if (!(typeof i8n === "undefined")) t+=h1+":"+m1+" "+a1+" "+i8n.to+" "+h2+":"+m2+" "+a2;
		else t+=h1+":"+m1+" "+a1+" - "+h2+":"+m2+" "+a2;
		return t;
	}

	this.doesOccurBetween = function(v1,v2) {
		// 1. What dateCode is the first occurrence of <day> on or after v1?
		var day=(v1+1)%7; // Get day of week of v1 (0=Sunday, 1=Monday)
		var d=(this.day-1)-day;
		if (d<0) d+=7;
		var d0=v1+d;
		// 2. Ensure this dateCode (d0) within v1,v2 and within d1,d2
		if (d0>v2 || d0<this.d1 || d0>this.d2) {
			return false;
		}
		return true;
	}

	this.isSameDay = function (){
		return this.d1==this.d2;
	};
}

function Timezone(id,offset,abbr,name,dstWarning) {
	this.id=id;
	this.offset=offset;
	this.abbr=abbr;
	this.name=name;
	this.dstWarning=dstWarning;
}

var timezones=new Array();
timezones.push(new Timezone(1,-4,"<br/>HST*","Hawaii",true));
timezones.push(new Timezone(2,-3,"AKST<br/>AKDT","Alaska",false));
timezones.push(new Timezone(3,-2,"PST<br/>PDT","Pacific  (US &amp; Canada)",false));
timezones.push(new Timezone(4,-1,"MST<br/>MDT","Mountain Time (US &amp; Canada)",false));
timezones.push(new Timezone(5,-1,"<br/>MST*","Arizona",true));
timezones.push(new Timezone(6,0,"CST<br/>CDT","Central Time (US &amp; Canada)",false));
timezones.push(new Timezone(7,1,"EST<br/>EDT","Eastern Time (US &amp; Canada)",false));
timezones.push(new Timezone(8,2,"AST<br/>ADT","Atlantic (Canada)",false));
// timezones.push(new Timezone(9,2.5,"NST<br/>NDT","Newfoundland
// (Canada)",false)); // timetable.js doesn't support half hour

function getTimezone() {
    var tmSummer = new Date(Date.UTC(2005, 6, 30, 0, 0, 0, 0));
    var so = -1 * tmSummer.getTimezoneOffset();
    var tmWinter = new Date(Date.UTC(2005, 12, 30, 0, 0, 0, 0));
    var wo = -1 * tmWinter.getTimezoneOffset();
    if (-600 == so && -600 == wo) return 1; // Hawaii
    if (-480 == so && -540 == wo) return 2; // Alaska
    if (-420 == so && -480 == wo) return 3; // Pacific
    if (-360 == so && -420 == wo) return 4; // Mountain
    if (-420 == so && -420 == wo) return 5; // Arizona
    if (-300 == so && -360 == wo) return 6; // Central
    if (-240 == so && -300 == wo) return 7; // Eastern
    if (-180 == so && -240 == wo) return 8; // Atlantic
    // if (-150 == so && -210 == wo) return 9; // Newfoundland
    return 0;
}

function Filters(str) {
	this.hideFull=str==""?defaultHideFullClasses:(str.charAt(0)=="l");
	this.hideOnline=(str.charAt(1)=="l");
	this.hideOnCampus=(str.charAt(2)=="l");
	this.hideBadCohort=(str.charAt(3)=="l");
	this.hideWaitlistable=(str.charAt(4)=="l");
	this.hideClosed=(str.charAt(5)=="l");
	this.hideHonors=(str.charAt(6)=="l");
	this.hideNoHonors=(str.charAt(7)=="l");
	this.hideOffCampus=str.charAt(8)==""?hideOffCampusDefault:(str.charAt(8)=="l");
	this.hideReserved=(str.charAt(9)=="l");

	this.toStr = function() {
		var s="";
		s+=(this.hideFull?"l":"i");
		s+=(this.hideOnline?"l":"i");
		s+=(this.hideOnCampus?"l":"i");
		s+=(this.hideBadCohort?"l":"i");
		s+=(this.hideWaitlistable?"l":"i");
		s+=(this.hideClosed?"l":"i");
		s+=(this.hideHonors?"l":"i");
		s+=(this.hideNoHonors?"l":"i");
		s+=(this.hideOffCampus?"l":"i");
		s+=(this.hideReserved?"l":"i");
		return s;
	}
}

function Reasons() {
	this.nonOverlapResults=0;
	this.reasonPins=false;
	this.reasonCoreqs=false;
	this.reasonHideNoHonors=false;
}

function BusyBlock(d1,d2,day,hourStart,hourEnd) {
	this.d1=d1;
	this.d2=d2;
	this.day=day;
	this.hourStart=hourStart;
	this.hourEnd=hourEnd;
}

function ReqGroupLine(rglEl) {
	// PS_RQ_GRP_TBL
	this.reqg=rglEl.getAttribute("reqg");
	this.desc=rglEl.getAttribute("desc");
	this.connand=(rglEl.getAttribute("connand")=="true");
	// PS_RQ_GRP_DET_TBL
	this.line=rglEl.getAttribute("line");
	this.type=rglEl.getAttribute("type");
	this.rtype=rglEl.getAttribute("rtype");
	this.lineand=(rglEl.getAttribute("lineand")=="true");
	this.cid=rglEl.getAttribute("cid");
	this.ac=rglEl.getAttribute("ac");
	this.cnKey=rglEl.getAttribute("cnKey");
	this.classNbrs=rglEl.getAttribute("classNbrs").split("-").filter(function(s){return s.length>0;});
	this.ieq=(rglEl.getAttribute("ieq")=="true");
	this.top=rglEl.getAttribute("top");
	this.strm=rglEl.getAttribute("strm");

	this.isTestable=function(courseLevel) {
		return (this.type=="CRSE" && this.rtype=="CO" && (courseLevel || (this.ac!="0"||this.classNbrs.length>0)));
	}

}

// Color assignment
var CA = (function() {
	var my = {};
	var ass = [];
	for (var i=0;i<=12;i++) {
		ass[i]={key:"",age:99};
	}

	function nextGoodColor(key) {
		// Find color not used in a while
		for (var i=1;i<=12;i++) {
			if (ass[i].key==key) return i;
			if (ass[i].age>3) {
				ass[i].key=key;
				return i;
			}
		}
		return 0;
	}

	function assignState(gState) {
		if (gState==null) return;
		for (var i=0;i<gState.cnfs.length;i++) {
			var cnf=gState.cnfs[i];
			if (cnf.color>12) {
				cnf.color=nextGoodColor(cnf.reqId!=null?cnf.reqId:cnf.cnKey);
			}
			ass[cnf.color].age=0;
		}
	}

	my.assignColors = function() {
		for (var i=0;i<=12;i++) {
			ass[i].age++;
		}
		assignState(BB.activeState);
		assignState(BB.previewState);
	}

	return my;
}());