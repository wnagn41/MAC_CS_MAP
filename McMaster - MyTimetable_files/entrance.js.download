// TODO Temp
var localRecs=[];

// Controls the flow of the user entering VSB
var EE = (function() {
	var my = {};
	var doneCompulsory=false;
	my.activeStateChangeListeners = [];
	
	my.pauseResults=pauseResults;
	var displayedRecs={}; // term->nb
	var compDisplayedRecs={};
	
		
	my.isSelectable = function isSelectable(term) {
		if (isAdvisor) {
			return true;
		}
		var t=EE.terms[term];
		if (!t) {
			return false;
		}
		
		return my.isShow(t) && !t.preventSelection;
	}
	
	function isShow(term) {
		return isAdvisor || !isAuthenticated || term.enrollable;
	}
	
	my.isShow = isShow;
	
	my.dispRecsForTerm = function(term) {
		var r=displayedRecs[term]
		if (r) return r;
		return 0;
	}
	
	my.isCompulsoryRecsForTerm = function(term) {
		if (compDisplayedRecs[term]) return true;
		return false;
	}
	
	my.initEntrance = function(enabledTerms) {
		var completionPromise = $.Deferred().resolve();
		//console.log(enabledTerms);
		my.terms=enabledTerms;
		
		var atLeast1Term=false;
		for (var t in EE.terms) {
			var term=EE.terms[t];
			if (isShow(term)) {
				atLeast1Term=true;
			}
		}
		
		if (!isAuthenticated || !atLeast1Term) {
			// skip AJAX plans
			doneCompulsory=true;
			initEntranceDom(false);
		} else {
			if (showPlansOnWelcome) {
				return $.getJSON("api/getAcademicPlans").then(function(plans) {
					//plans=[]; // TESTPOINT
					for (var i=0;i<plans.length;i++) {
						var p=plans[i];
						MM.planHeaders[p.id]=p;
						if (p.planRecInfo && p.planRecInfo.compulsory) {
							var term=EE.terms[p.termCode];
							if (term) {
								term.hasCompulsory=true; // TESTPOINT
							}
						}
					}
					// see if any term has no compulsory plan
					var one=false;
					for (var term in EE.terms) {
						var t=EE.terms[term];
						if (isShow(t) && !t.hasCompulsory) {
							one=true;
							break;
						}
					}
					doneCompulsory=one;
					//second param true is a flag to add plan only
					initEntranceDom(false, true);
					return my.loadRecommendations();
				}).fail(function() {
					console.log("Static data not ready or getAcademicPlans failed.");
					alert("Could not load academic plans.");
					doneCompulsory=true;
					initEntranceDom(false);
				});
			} else {
				return my.loadRecommendations();
			}
		}
		return completionPromise;
	}
	
	my.loadRecommendations = function() {
		if (hideRecommendationDisplay) {
			doneCompulsory=true;
			initEntranceDom(false);
		} else {
			// Get Recommendations for this student
			var studentId = adviseeId || userId;
			return $.getJSON("api/v2/recommendations/search/findByStudentsOrderByPlanTermCodeAsc?student=" + studentId).then(function(data){
				var localRecsUser2 = data.recommendations;
				vaMap = Object.assign(vaMap, data.validationKeys);
				var localRecsUser = [];
				
				for (var index in localRecsUser2) {
					var rec=localRecsUser2[index];
					MM.recHeaders[rec.id]=rec;
					var p=rec.plan; // A Recommendation is a container for a Plan.
					MM.planHeaders[p.id]=p;
					var term=EE.terms[p.termCode];
					if (term) {
						if (rec.compulsory) {
							term.hasCompulsory=true;
							term.compRec=rec;
						}
						if (isShow(term)) {
							localRecsUser.push(rec);
						}
					}
				}
				// see if any term has no compulsory plan
				var one=false;
				for (var term in EE.terms) {
					var t=EE.terms[term];
					if (isShow(t) && !t.hasCompulsory) {
						one=true;
						break;
					}
				}
				doneCompulsory=one;
				
				// Obtain adviser IDs and term code
				var advisersMap = {};
				var termCode = null;
				for (var index in localRecsUser) {
					var r = localRecsUser[index];
					var creatorId = r.plan.creator;
					if(creatorId) { advisersMap[creatorId] = creatorId; }
					var editorId = r.plan.editor;
					if(editorId) { advisersMap[editorId] = editorId; }
					termCode = r.plan.termCode;
				}
				
				// List of adviser IDs
				var adviserIds = Object.keys(advisersMap);
				if(adviserIds.length > 0) {
					// Request advisor names
					return $.ajax({
					    url: 'api/v2/system-users/advisers',
					    data: { adviserIds: adviserIds, termCode: termCode, studentId: studentId },
					    traditional: true,
					    method: 'GET',
					    success: function(advisers) {
					    	// Insert the adviser name into the plan
					    	for (var index in localRecsUser) {
								var r = localRecsUser[index];
								if(r.plan.editor) {
									r.plan.adviserName = advisers[r.plan.editor];
								}
								if(!r.plan.adviserName) {
									r.plan.adviserName = advisers[r.plan.creator];
								}
					    	}
							// Display the user recommendations
							initEntranceDom(localRecsUser);
					    }
					});
				} else {
					// Display the user recommendations
					initEntranceDom(localRecsUser);
				}
			}).fail(function() {
				console.log("findByStudentsOrderByPlanTermCodeAsc data not available");
				doneCompulsory=true;
				initEntranceDom(false);
			});
			
		}

	}
	my.displayedTerms = function() {
		var c=[];
		for (var term in my.terms) {
			var t=my.terms[term];
			if (isShow(t)) {
				c.push(term);
			}
		}
		return c;
	}
	
	my.isDoneCompulsory = function() {
		return doneCompulsory;
	}
	
	my.updateWelcomeInputDetail = function() {
		if (UU.inputParams!=null) {
			if (UU.inputParams.courses) {
				var cs=UU.inputParams.courses.split(",");
				var csHtml="";
				for (var i=0;i<cs.length;i++) {
					var escaped = $("<div>").text(cs[i]).html();
					csHtml+="<div class='msItemR'><div class='msItemN'><div class='msItemT'>"+escaped+"</div></div></div>";
				}
				$(".welcome_term_input_notice").html("<div class='msItemR'><div class='msItemNb'><div class='msItemTb'>You are about to view courses: </div></div></div>"+csHtml);
			} else if (UU.inputParams.src=="aar") {
				$(".welcome_term_input_notice").text("You are about to import your course queue");
			}
		}
	}
	
	my.updateImportButtons = function(term) {
		// Degree and Capp Plan
		$.getJSON("api/v2/web-reg-mode?term="+term, function(modes) {
			var isBlockStudent = modes.indexOf("B")>=0;
			var isLockStudent = modes.indexOf("L")>=0;
			var isCourseStudent = modes.indexOf("C")>=0;
			
			var showCappPlan = isAdvising || (!isBlockStudent && !isLockStudent);
			var showImportPlan = isAdvising || (!isCourseStudent);
			
			$('#cappButton').toggle(showCappPlan);
			$('#degreePlanButton').toggle(showImportPlan);
			
			if (isBlockStudent) {
				$(".noSelectAdvice").text("As a block-based student, use the button below to import your blocks of courses.");
			}
			if (isLockStudent) {
				$(".noSelectAdvice").text("You have been assigned a specific block of courses. Use the button below if you wish to re-import this block of courses.");
			}
			if (isCourseStudent) {
				$(".noSelectAdvice").text("As a course-based student, use the button below to select courses from your Registration Program Plan.");
			}
		});
		
		// Recommendation
		var showRec = false;
		for (var id in MM.planHeaders) {
			var p=MM.planHeaders[id];
			
			if (p.termCode === BB.activeState.term
					&& p.planType === "RECOMMENDATION") {
				showRec = true;
				break;
			}
		}
		
		$('#recImportButton').toggle(showRec);
	}
	
	my.updateManuTermState = function(term) {
		for (var term2 in EE.terms) {
			var t=EE.terms[term2];
			if (EE.isShow(t)) {
				$("#menu-term" + term2 + "-check").hide();
				if (term2 == term) {
					$(".active-term-label").html(t.name);
				}
			}
		}
		
		$("#menu-term" + term + "-check").show();
		$(".main_menu").hide();

		if (BB.welcome == 0 && term != 0) {
			UU.caseTermContinue(term);
		}
		
		if (!dwAuditApiPullOnDemand) {
			DWA.loadAudits();
		}
	}
	
	function initEntranceDom(localRecsUser, addPlan) {
		if(!localRecsUser) {
			localRecsUser = [];
		}
		
		var template= ['<div class="sresult" id="sresult_{{id1}}" data-term-code="{{termCode}}" data-compulsory="{{compulsory}}">',
            '<a href="javascript:void(0);" onclick="{{onclick}}" title="Click to load recommendation">',
            '<div class="sthumb"><canvas class="thumbnail" id="thumbtests_{{id}}" width="100" height="100"></canvas></div>',
            '<div class="sdetails">',
            '<div class="stitle">{{termName}}</div>',
            '<div class="stitle">{{title}}</div>',
            '<div class="sdescription">{{description}}</div>',
            '<div class="sdate">{{date}}</div>',
            '<div style="font-size:0.8em; font-style:italic;">{{adviserName}}</div>',
            '</div>',
            '<div style="clear:both;"></div></a>',
            '</div>'];
		
		var recOnSoleTermCode=false;
		var soleTermCode=null;

		function addRecommendationOrPlan(adviserName,termName,title,description,date,onclick,timeblocks,overtext,termCode,compulsory) {		
			console.log("addRecommendationOrPlan START for "+termName);
			if (!displayedRecs[termCode]) {
				displayedRecs[termCode]=0;
			}
			displayedRecs[termCode]++;
			
			if (compulsory) {
				compDisplayedRecs[termCode]=true;
			}
			
			title=(title==null?"":title);
			description=(description==null?"":description);
			var i=$('#suggestedResult').children().length;
			var dateS=date?dateFormated(date):"";
			var newTemplate = template.join('');
			newTemplate = newTemplate.replace('{{termName}}',termName).replace('{{title}}',title).replace('{{description}}',description).replace('{{id}}',i);
			newTemplate = newTemplate.replace('{{id1}}',i).replace('{{date}}',dateS).replace('{{onclick}}',onclick);
			
            if (adviserName) {
				newTemplate = newTemplate.replace('{{adviserName}}', 'Recommended by: '+adviserName);
			} else {
				// Advisor name unknown in systemusers 
				newTemplate = newTemplate.replace('{{adviserName}}', '');
			}
			if (termCode) {
				newTemplate = newTemplate.replace('{{termCode}}',termCode);
			}
			if (compulsory) {
				newTemplate = newTemplate.replace('{{compulsory}}',compulsory);
			}
			
			var elements = $(newTemplate);
			//console.log("DESCRIPTION:: "+description)
			//console.log("newTemplate:: "+newTemplate)
			$('#suggestedResult').append(elements);
			if (timeblocks) {
				drawThumbnail([],"thumbtests_"+i,overtext,null,null,"#f7f6f6");
				//$("#thumbtests_"+i).parent().append('<div class="courseCount1">'+overtext+'</div>');
			} else {
				drawThumbnail(time_blocks,"thumbtests_"+i);
			}
			if (termCode==soleTermCode && selectTermIf1) {
				recOnSoleTermCode=true;
			}
			//console.log("Recommendation ends");
		}
		
		// Terms
		var wh="";
		var menuTermsHtml="";
//		var $e=$("#phone_term_select");
//		var $e2=$(".desktop_term_select");
		var cnt=0;
		var removeInstAcSpanIds = [];
		
		// Global holds
		if (GG.holds[0]) {
			var wa = "";
			wa += '<div class="welcome_term_subtext">' + ((!isAdvisor && blockUserByGlobalHold)?i8n.welcomeTermActionTextBlocking:i8n.welcomeTermActionText) + '</div>'
			wa += "<div class='demo-card-wide mdl-card mdl-shadow--2dp term-card action-required-hold'>";
			wa += "<a class='term-card-title'"
			if (welcomeActionLink) {
				wa += " href='"+welcomeActionLink+"' target='blank'";
			} else {
				wa += " style='pointer-events: none;'";
			}
			wa += '>Action Required' + "</a>";
			wa += '<p>'+ (i8n.welcomeActionSubText) +'</p>';
			wa += "<div class='term-card-detail'>";
			wa += "<span class='term-notes'>" + GG.holds[0] + "</span>";
			wa += "</div>";
			if (GG.holdsTypes[0]["ACTION_ITEM"]) {
				wa += '<p>'+ (i8n.postActionItemsSubText) +'</p>';
			}
			wa += '<p>'+ (i8n.postHoldsSubText) +'</p>';
			wa += "</div></div>";
			$('#welcomeActions').html(wa);
		}
		
		for (var term in my.terms) {
			var t=my.terms[term];
			if (isShow(t)) {
//				$e.append("<option value='"+term+"'>"+i8n.term+" "+t.name+"</option>");
//				var lab="";
//				lab+="<label class='term_radio_item'"+(t.hasCompulsory?" title='This term has been assigned a mandatory plan'":"")+"><input name='radterm' id='term_"+term+"' class='termRadio' type='radio' onclick='"+(t.hasCompulsory?"UU.caseChangeTermWithCompulsory(\""+term+"\");":("updateTerm2(\""+term+"\");"))+"'/>";
//				lab+=" <span>"+t.name+"</span></label>";
//				$e2.append(lab);
				cnt++;
				if (cnt==1) {
					soleTermCode=term;
				} else {
					soleTermCode=null;
				}
				
				var noact="";
				if (t.sandbox) {
					noact="<span class='term-selection-hold'><span class='term-selection-hold-item'><i class='fa fa-wrench'></i> ";
					noact+="This is a sandbox term only visible to certain users. The class schedule may still be in development.";
					noact+="</span></span>"; 					
				}
				// fa-minus-circle
				var prevTermSelection=false;
				if (EE.studentDetail && EE.studentDetail.awareOfTermActivation && !GG.trmAc[term]) {
					noact+="<span class='term-selection-hold'><span class='term-selection-info-item'>";
					if (preventTermIfNoActivation) {
						prevTermSelection=true;
						noact+="<i class='fa fa-minus-circle'></i> ";
					} else {
						noact+="<i class='fa fa-info-circle'></i> ";
					}
					noact+=(isAdvising?i8n.notTermActivatedAdvising:i8n.notTermActivated);
					noact+="</span></span>";
				}
				//var dates = (GG.dates[term]?GG.dates[term].join(''):'');
				var notes = (GG.notes[term]?GG.notes[term].join(''):'');
				var holds = (GG.holds[term]?GG.holds[term].join(''):'');
				
				var now=new Date().getTime();
				
				var schoolTermIds=schoolTermIdsFromVisibleTerm(term);
				prevTermSelection=prevTermSelection || 
					(EE.studentDetail && EE.studentDetail.holds && EE.studentDetail.holds.find(function(h) {
					return (h.firstSchoolTermId === 0 || schoolTermIds.find(sti => h.firstSchoolTermId <= sti)) 	
						&& (h.lastSchoolTermId === 0 || schoolTermIds.find(sti => h.lastSchoolTermId >= sti)) 
						&& h.active 
						&& h.dateCreated < new Date().getTime()
						&& (h.dateExpiring==0 || h.dateExpiring>now)
						&& h.preventTermSelection;
				}));
				
				if (isAdvisor&&prevTermSelection) {
					prevTermSelection=false;
					noact+="<span class='term-selection-hold'><span class='term-selection-info-item'><i class='fa fa-info-circle'></i> ";
					noact+="Term selection permitted only because you are an advisor.";
					noact+="</span></span>";
				}
				
				t.preventSelection=!!prevTermSelection;
				
				wh += "<div class='demo-card-wide mdl-card mdl-shadow--2dp term-card' data-term='" + term + "'>";
				wh += "<a class='term-card-title "
				
				if (prevTermSelection) {
					wh += "disabled-term-selection"
				}
				wh += "'";
				if (!prevTermSelection) {
					wh += " href='javascript:UU.caseTermContinue(" + term + ");'";
				}
				wh += ">" + t.name + "</a>";
				
				if(GG.notes[term] && GG.notes[term].length == 1){
					removeInstAcSpanIds.push(term+"_instAcadCareer");
				}
				if (noact.length>0  || holds.length>0 || notes.length>0) {
					wh += "<div class='term-card-detail'>";
					wh += "<span class='term-notes'>" + noact;
					wh += holds + notes + "</span>";
					wh += "</div>";
				}
				
				//wh += "<div class='mdl-card__actions mdl-card--border' style='text-align:right'>";
				//wh += "</div>";
				
				wh += "</div>";

				var selected =  typeof(BB) !== 'undefined'?BB.activeState.term == term:false;
				var selection = selected? "":"style='display:none;'";
						
				if (!prevTermSelection) {
					menuTermsHtml +=
						"<a href='javascript:void(0)' class='menu_item select_term'" 
							+" onclick='UU.caseChangeTermIfOkay(" + term + ");$(\".main_menu\").hide();'>"
							+ t.name
							+ "<i class='fa fa-check' id='menu-term" + term + "-check' " + selection + "></i> "
						+"</a>";
				}
			} else {
				t.preventSelection=false;
			}
		}
		
		$(".menu_item.select_term").remove();
		$(".main_menu").prepend(menuTermsHtml);
		$("#welcomeTerms").html(wh);
		
		//Remove InstAcadCareer Span elements usin removeInstAcSpanIds(where only 1 InstAcadCareer present for vst)
		for(var i = 0; i < removeInstAcSpanIds.length; i++){
			var id = removeInstAcSpanIds[i];
			$('div[id="'+id+'"]').remove();
		}
		
		if (window.BB) {
			RR.displayAdvice(BB.advice);
		}
		
		// Steps
		var nb=1;
		// Are we using step 1? (term)
		if (selectTermIf1 && cnt<=1) nb--;
		$(".bubbleNb1").html(nb);
		
		// Are we using step 2a? (campus)
		if ($("#locationRegion").length<=0 || preopenCampusSelector || neverShowFilterStep) nb--;
		$(".bubbleNb2a").html(++nb);
		$(".bubbleNb2").html(++nb);
		$(".bubbleNb3").html(++nb);
		$(".bubbleNb3a").html(++nb);
		
		
		
		// Recommendations
		var one=false;
		var hideSkip = false;

		if (showPlansOnWelcome && addPlan) {
			console.log("showPlansOnWelcome:: "+showPlansOnWelcome+",  Adding Total Plans:: "+MM.planHeaders);
			for (var id in MM.planHeaders) {
				var p=MM.planHeaders[id]
			    //console.log("showPlansOnWelcome Plan : "+p.description);
				one=true;
				
				var t=EE.terms[p.termCode].name;
				var tit="";
				var desc="";
				if (p.credits) {
					tit=p.description;
					desc=""+(Math.round(+p.credits*100)/100)+" credits";
				} else {
					tit="";
					desc=p.description;
				}
				t=t.replace(/'/g,"\\'");
				var onclick = "UU.caseWelcomeContinue();return UU.caseImportPlan('"+id+"',false,'"+t+"',null)";
				var overText = p.planGroup.plannedCourses.length + " Courses";
				var compulsory = false;
				if(p.planRecInfo){
					compulsory = p.planRecInfo.compulsory;
				}
				addRecommendationOrPlan(null,t,tit,desc,null,onclick,[],overText,p.termCode,compulsory);
			}
			
		} 
		if (localRecsUser.length > 0) {
			// Get Recommendations for this user

			var params = localRecsUser.reduce(function(a, b){
				return a + "id="+b.id+"&";
			}, "?");
			
			params = params.slice(0, -1);
			
			if (!isAdvising) {
				$.ajax({
					url:"api/v2/recommendations/displayed" + params,
					type:"POST"
				});
			}

			if (localRecsUser.length > 0) {
				one=true;
				// Update access time
				localStorage.setItem('localRecs', JSON.stringify(localRecs));
			} 
			//console.log("Adding Total Recomendations "+localRecsUser.length);

	    	for(var i=0;i<localRecsUser.length;i++){
	    		var row = localRecsUser[i];
	    		if (row.compulsory) {
	    			hideSkip = true;
	    		}

				// Workaround for IE. Remove time from date so it can be parsed by IE
				var recDate=row.plan.timeCreated;
	    		var dateCreated=recDate?dateFromISO8601(recDate):null;
				var pac=row.permitAditionalCourses;
				var newstate=row.state.replace("&pac=1","").replace("&pac=0","")+"&pac="+(pac?"1":"0");
	    		var onclick="UU.caseChangeTerm("+row.plan.termCode+");UU.caseWelcomeContinue();UU.caseLoadRecommendation('"+newstate+"','?id="+row.id+"','"+row.plan.id+"');";
	    		var courseNumber = getCoursesList(row.state);
    			var overText = (courseNumber>1)?(courseNumber+' Courses'):'1 Course';
    			var termName=EE.terms[row.plan.termCode].name;
    			addRecommendationOrPlan(row.plan.adviserName,termName,row.plan.title,row.plan.description,dateCreated,onclick,[],overText,row.plan.termCode,row.compulsory);
	    	}	    	
		}
		
		if (one) {
			var msg="";
			msg+="<span class='compulsory-recommendation-text'>"+i8n.selectPlanToContinue+"</span>";
			msg+="<span class='optional-recommendation-text wideOnly'>You may select one of these recommended plans or skip to view your current courses on the left.</span>";
			msg+="<span class='optional-recommendation-text mobileRegularOnly'>You may select one of these recommended plans or skip and select your courses.</span>";
			$('#recommendedShow').html(msg);
		}
		$('#recommendedShow').toggle(one);
		

		// Arrange Welcome DOM as per
		// holdWelcome, selectTermIf1, and hasRecommendation
		
		var skipTerm=(selectTermIf1 && cnt==1);
		var welcomeHtml=$(".reg_welcome .welcome_holder").html();
		if (holdWelcome) {
			if (recOnSoleTermCode) {
				$(".reg_recommendation .welcome-back").hide();
				$(".reg_recommendation .welcome-doubleback").show();
			}
		} else {
			$(".reg_welcome .welcome_cont_but").addClass("mobileRegularOnly");
			if (!skipTerm) {
				$(".reg_term .welcome_holder").html(welcomeHtml);
				$(".reg_term .welcome-back").hide();
				$(".reg_term .welcome_title2").hide();
			} else {
				if (recOnSoleTermCode) {
					$(".reg_recommendation .welcome_holder").html(welcomeHtml);
					$(".reg_recommendation .welcome-back").hide();
				} else {
					// as-is
				} 
			}
		}
		
		var haveACampus=false;
		var dcs="_"+defaultCams;
		for (var i=0; i<mscams.length; i++) {
			var v=mscams[i].value;
			if (dcs.indexOf("_"+v+"_")>=0) {
				haveACampus=true;
				break;
			}
		}
		if (!haveACampus && defaultCams.length>0 && isAuthenticated) {
			$(".sorry_wrong_campus").show();
			$(".welcome_term_subtext").hide();
		} else {
			if (cnt==0) {
				$(".sorry_no_terms").show();
				$(".welcome_term_subtext").hide();
			}
		}
		
		RR.filterImportButtons();
		
		// Fade in page page now that it's ready
		$("#bodyContent.eeLoading").addClass("eeLoadingDone");
		$(".eeLoadingAnimation").removeClass("eeLoadingAnimationSee");
	}
	
	function getCoursesList(state){
		var i=0;
		while (state.indexOf("course_"+i+"_0=")>=0) {
			i++;
		}
		return i;
	}
	
	function dateFormated(date){
		var monthNames = ["January", "February", "March", "April", "May", "June",
		                  "July", "August", "September", "October", "November", "December"
		                ];
		return monthNames[date.getMonth()]+' '+date.getDate() + ', '+date.getFullYear();
	}
	
	my.newDay = function() {
		for (var term in my.terms) {
			var t=my.terms[term];
			if (todayCode+1==t.ee) {
				alert("Enrollment has begun for the next term. Refresh this page to enable enrollment functions.");
				break;
			}
		}
	}
	
	my.isBlockAdditionalCourses = function(term) {
		var haveRecForTerm=false;
		for (var id in MM.recHeaders) {
			var rec=MM.recHeaders[id];
			if (rec.plan.termCode!=term) continue;
			haveRecForTerm=true;
			if (!rec.compulsory) return false;
			if (rec.permitAditionalCourses) return false;
		}
		// true only if >1 Rec for term, and all of them are compulsory and don't permit additional courses
		return haveRecForTerm;
	}
	
	return my;
	
})();




var BUBBLES = (function() {
	var lastBubble=null;
	var my={};
	var campusStepShown=neverShowFilterStep || (!filterCollege && !filterCampus && !filterLocation && !filterInstruct);
	
	my.skipCampusStep = function() {
		campusStepShown=true;
	}
	
	var getAppropriateBubble = function() {
		if (!EE.isDoneCompulsory() || $(".course_state:visible").length>0) {
			return "-1";
		}
		if (BB.activeState.term==0) {
			return "1";
		}
		if (BB.activeState.getVisibleCnfs().length>0) {
			return "3";
		}
		if ($("#locationRegion:visible").length>0) {
			if (!campusStepShown) return "2a";
		}
		if ($(".plusInput:visible").length>0) {
			return "2";
		}
		return "3";
	}
	
	var hideAllBubbles = function() {
		lastBubble="-1";
		setBubble("1",false,true);
		setBubble("2a",false,true);
		setBubble("2",false,true);
		setBubble("3",false,true);
		setBubble("3b",false,true);
	}
	
	var setBubble = function(bubble,show,instant) {
		if (bubble=="-1" && !show) {
			hideAllBubbles();
		} else if (bubble=="1") {
			if (show) {
				$("#step1bubble").fadeIn((instant?0:1300));
			} else {
				$("#step1bubble").fadeOut((instant?0:1300));
			}
			$("#step1bubble").toggleClass("disableImports",show);
		} else if (bubble=="2a") {
			if (show) {
				$("#step2abubble").addClass("takespace").fadeIn((instant?0:700));
			} else {
				$("#step2abubble").removeClass("takespace").fadeOut((instant?0:700));
			}
		} else if (bubble=="2") {
			if (show) {
				$("#step2bubble").addClass("takespace").fadeIn((instant?0:700));	
			} else {
				$("#step2bubble").removeClass("takespace").fadeOut((instant?0:700));
			}
		} else if (bubble=="3a") {
			if (show) {
				$("#step3abubble").addClass("takespace").fadeIn((instant?0:700));
			} else {
				$("#step3abubble").removeClass("takespace").fadeOut((instant?0:700));
			}
		} else if (bubble=="3") {
			if (show) {
				$("#step3bubble").fadeIn((instant?0:700));
			} else {
				$("#step3bubble").fadeOut((instant?0:700));
			}
		}
	}

	var showTheRightBubble = function() {
		if (BB.access) {
			if (lastBubble!="-1") {
				hideAllBubbles();
			}
			return; // Do not show any bubbles in accessibility mode!
		}
		
		var ab=getAppropriateBubble();
		if (lastBubble==ab) {
			return;
		}
		
		var mobile=isMobile();
		setBubble(lastBubble,false,mobile);
		setBubble(ab,true,false); 
		RR.settleMidrange();
		
		$(".mobileRoom").toggle(ab=="1" || ab=="2a");
		
		if (!BB.access && !mobile && PAGES.isCriteriaOpen()) {
			if (ab=="1") {
				// Focus on first radio
				//$(".termRadio:first").focus();
				//$("#phone_term_select").focus();
			} else if (ab=="2a") {
				// Focus on Select... item when user is directed to it.
				$(".ms_select_link:visible").focus();
			} else if (ab=="2") {
				// Focus on "Select Course" when appropriate
				$("#code_number").focus();
				//window.scrollTo($("#code_number").offset().top,0);
			}
		}
		
		lastBubble=ab;
	}
	
	my.update = function(instant) {
		showTheRightBubble();
	}
	my.hideEducationPlanBubble = function(){
		setBubble('3a',false,true);
	}
	return my;
}());

