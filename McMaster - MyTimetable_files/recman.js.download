var rec_data = {
	id : "R-1003",
	plan:{
	creator : "Maureen",
	timeCreated : (new Date()).getTime(),
	timeEdited : (new Date()).getTime(),
	title : "Example Title",
	description : "My message",
	term : 201701,
	tags : [],
	},
	editor : "Sam",
	groups : ["Advisors"],
	compulsory : true,
	permitAditionalCourses : true,
	state : "example_state",
	students : ["AA0012"]
};

// Recommendation List
var RML = (function() {
	
	var my = {};
	my.currentList = [];
	my.createRecommendationTags = [];
	my.createRecommendationGroups = [];
	my.totalItemCount;
	my.isLoadingPage = false;
	my.pageSize = 25;
	my.initRecList = function() {
		// set up handlers
		$(".rec-but-new").click(function() {
			RML.showEditPage();
			
			if (adviseeId) {
				MR.getCurrentRec().students.push(adviseeId);
				MR.updateToField();
				MR.didChange(true);
				addedStudents = true;
			}
		});

		var timerid;
		$("#rec_search_input").on("input",function(e){
			var value = $(this).val();
			clearTimeout(timerid);
			timerid = setTimeout(function() {
			    if($(this).data("lastval")!= value){
		            my.renderListUsingSearch(value, 0);
				    $(this).data("lastval",value);
			    };
		    },350);
		});
		
		$("input[type=radio][name=switch_2][value='"+defaultRecShowType+"']").attr("checked","checked");

		$("input[type=radio][name=switch_2]").change(function(e) {
			my.renderListUsingSearch($("#rec_search_input").val(), 0);
		});

        // Setup SELECTIZE.JS on the tags field when creating recommendations
		$('#input-rec-tags-add').selectize({
		    delimiter: ',',	// Tab also works
		    plugins: ['remove_button'],
		    persist: true,
		    create: function (input) {
    				// Return this for display purposes
		        return { value: input, text: input };
		    },
		    onItemRemove: function (input) {
		    		// Remove from collection
		    		my.createRecommendationTags.splice($.inArray(input, my.createRecommendationTags), 1);
					MR.didChange(true);
		    },
		    onItemAdd: function (input, $item) {
		    		// Check whether the tag already exists
		    		var tagExists = false;
		    		$.each(my.createRecommendationTags, function(index, value) {
		    			if(value === input) {
		    				tagExists = true;
		    				return false;
		    			}
		    		});

	    			// Add to list if it does not exist
		    		if (!tagExists) {
						my.createRecommendationTags.push(input);
						MR.didChange(true);
					}
		    }
		});

		
		
		$(".rec-add-input").selectize({
		    delimiter: '',	// Tab also works
		    plugins: ['remove_button'],
		    persist: false,
		    create: !recommendKnownUserOnly,
		    onItemAdd: function (input, $item) {
		    		var studentsSelectize = $(".rec-add-input")[0].selectize;
					studentsSelectize.clearOptions();
					studentsSelectize.renderCache = {}
					studentsSelectize.clear();
		    		studentsSelectize.close();
		    	
		    		if (!input) {
		    			return;
		    		}
					
					if (input.indexOf("{") == 0) {
						input=JSON.parse(input).id
					}

					// Prevent advisor from advising themselves
					if (advisorCantAdviseSelf && (input === userId || input.id === userId)) {
						$("#recAddWarning").html("Advisors are not allowed to advise themselves");
						$("#recAddWarning").slideDown();
						setTimeout(function() {
							$("#recAddWarning").slideUp();
						}, 3000)
						return;
					}
					
					MR.getCurrentRec().students.push(input);
					MR.updateToField();
					MR.didChange(true);
					addedStudents = true;
		    },
		    score: function() { return function() { return 1; }; },

			onType: function(value) {
				var studentsSelectize = $(".rec-add-input")[0].selectize;

				studentsSelectize.clearOptions();
				studentsSelectize.renderCache = {}

				if (!value) {
		    		studentsSelectize.clear();
		    		studentsSelectize.close();
		    		return;
				}
				
				studentsSelectize.addOption({
					text:"Loading...",
					value: ""
				});

				studentsSelectize.refreshOptions();
				$.ajax(
				{
					url: "api/v2/system-users?prefix=" + value,
					type : "get",
					success: function(data){
						studentsSelectize.clearOptions();
						studentsSelectize.renderCache = {}

						data.users.forEach(function(t){
							studentsSelectize.addOption({
								text:t.name + " " + t.id,
								value: JSON.stringify(t),
								user:t
							});
						});

						studentsSelectize.refreshOptions(data.systemUserRepositoryStatus);
					}
				});
			},
			render: {
				option: function(data, escape) {
					if (data.user) {
						return '<div class="student-suggestion">' +
							'<div class="student-name">' + escape(data.user.name) + '</div>' +
							'<div class="student-id">'  + escape(data.user.id) + '</div>' +
							'</div>';
					} else {
						return '<div class="student-suggestion">' +
						'<div class="student-name">Loading...</div>' +
						'</div>';								
					}
				}
			}
		});

		// Setup SELECTIZE.JS on the groups field when creating recommendations
		$('#input-rec-groups-add').selectize({
		    delimiter: ',',	// Tab also works
		    plugins: ['remove_button'],
		    persist: false,
			valueField: 'id',
			labelField: 'name',
			searchField: ['name'],
		    create: false,
		    onItemRemove: function (input) {
		    	// Remove from collection
		    	MR.didChange(true);
		    	my.createRecommendationGroups.splice($.inArray(input, my.createRecommendationGroups), 1);
		    },
		    onItemAdd: function (input, item) {
	    		// Check whether the group already exists
	    		var exists = false;
	    		 $.each(my.createRecommendationGroups, function(index, value) {
	    			if(value === input) {
	    				exists = true;
	    				return false;
	    			}
	    		});

    			// Add to list if it does not exist
				if (!exists) {
					my.createRecommendationGroups.push(input);
					MR.didChange(true);
				}
		    }
		});
	}
	
	my.slidePage = function(isEdit) {
		var speed=600;
		var w=$("#tab_recommendations").width();
		if (isEdit) {
			$("#page_rec_list").stop().css("margin-left","0px").animate({"margin-left":"-"+w+"px"},speed,function() {$(this).hide()});
			$("#page_rec_edit").stop().css("margin-left",w+"px").css("position","absolute").show().animate({"margin-left":"0px"},speed,function() {$(this).css("position","relative")});
		} else {
			$("#page_rec_list").stop().css("margin-left","-"+w+"px").show().animate({"margin-left":"0px"},speed);
			$("#page_rec_edit").stop().css("margin-left","0px").css("position","absolute").animate({"margin-left":""+w+"px"},speed,function() {$(this).hide()});
		}
	}
	
	my.showEditPage = function(rec) {
		var groupsSelectize = $("#input-rec-groups-add")[0].selectize;
		groupsSelectize.clearOptions();

		MR.loadAvailableGroups();

		if (!rec) {
			MR.renderRec(rec);
		} else {
			// rec.students = rec.students? rec.students.splice():[];
			if (rec && rec._highlight) {
				$.getJSON("api/v2/recommendations/" + rec.id, function(recData) {
					$.getJSON(recData._links.groups.href, function(groupData) {
						var groups = groupData._embedded["user-groups"];
						var isEditable = groups.length == 0 || groups.filter(function(g){return g.users.includes(userId);}).length > 0;
						recData.groups = groups.map(function(g){return g._links.self.href;})
						recData.isEditable = isEditable;
						MR.renderRec(recData);
					});
				});
			} else {
				$.getJSON(rec._links.groups.href, function(groupData) {
					var groups = groupData._embedded["user-groups"];
					var isEditable = groups.length == 0 || groups.filter(function(g){return g.users.includes(userId);}).length > 0;
					rec.groups = groups.map(function(g){return {name:g.name, id:g._links.self.href};})
					rec.isEditable = isEditable;
					MR.renderRec(rec);
				});
			}
		}
		RML.slidePage(true);
		
	}
	
	function loadNames(list, success) {
		var uniqueAdvisors = [];
		
		list.forEach(function(r){
			if (uniqueAdvisors.indexOf(r.plan.creator) === -1) {
				uniqueAdvisors.push(r.plan.creator);
			}});
		
		$.ajax({
			url: 'api/v2/system-users/names',
			data : JSON.stringify(uniqueAdvisors),
			type : "POST",
			contentType : 'application/json',
		})
		.done(function(data) {
			success(data);
		});
	}
	
	function renderList(list, append, totalCount, userNames) {
		var counterText = "";
		counterText = "Found " + totalCount + " result" + (list.length!=1?"s":"");
		$(".rec_results_count").text(counterText);

		if (typeof BB!=="undefined") {
			$(".rec_results_noterm").toggle(BB.activeState.term=="0")
		}

		// draw list
		if (append) {
			my.currentList = my.currentList.concat(list);
		} else{
			my.currentList = list;
			$(".rec-result-used").remove();
		}

		for (var i = 0; i < list.length; i++) {
			var rec = list[i];
			var clone = $(".rec_result").first().clone();
			clone.find(".recr-id").text("#"+rec.id);

			// Workaround. Remove time from date so it can be parsed
			var recDate = rec.plan.timeCreated;
			var dtext="";
			if (recDate) { // Safeguard because SearchableIgnore was in Plan.java for a while.
				var newRecDate = null;
				var endI=recDate.indexOf("T1")>0?recDate.indexOf("T1"):recDate.indexOf("T0");
				if (endI>0) {
					newRecDate = recDate.substring(0, endI);
					newRecDate=new Date(newRecDate)
					newRecDate.setDate(newRecDate.getDate() + 1);
				} else {
					newRecDate=new Date(recDate)
				}
				dtext=getDateFromJsDate(newRecDate);
			}
			
			clone.find(".recr-created").text(dtext);
			var creator = rec.plan.creator;
			clone.find(".recr-advisor").text(userNames[creator]?userNames[creator]:creator);
			clone.find(".recr-advisor").attr('title', 
					userNames[creator]?userNames[creator] + " ("+creator+")":creator);

			var stext = "";
			var show = 1;
			var studentsCount = rec.students?rec.students.length:0;
			for (var si = 0; si < studentsCount && si < show; si++) {
				stext += rec.students[si];
			}
			if (si < studentsCount) {
				stext += " and " + (rec.students.length - show) + " others";
			}
			clone.find(".recr-students").text(stext);

			clone.find(".recr-title").text(rec.plan.title?rec.plan.title:"");
			clone.addClass("rec-result-used");
			clone.data("result-row-index",i);
			clone[0].rec = rec;
			$(".rec_results").append(clone);
			clone.click(function(event) {
				RML.showEditPage(event.currentTarget.rec);
			});

			if (rec._highlight) {
				var resultHighlights = Object.getOwnPropertyNames(rec._highlight);
				// Remove term code from highlight, it's part of the search but we don't want it highlighted.
				 // resultHighlights = resultHighlights.filter(function(item){return item !== "plan_termCode" && item !== "plan_creator" && item !== "plan_editor"});
				var highlightProperty = resultHighlights[0];
				var highlightPropertyCapitalized = highlightProperty.split("_").pop();
				highlightPropertyCapitalized = highlightPropertyCapitalized.charAt(0).toUpperCase() + highlightPropertyCapitalized.slice(1);
				var searchResult = highlightPropertyCapitalized + ": " + rec._highlight[highlightProperty];

				clone.find(".rec_search_highlight_text").html(searchResult);
				clone.find(".rec_search_highlight_title").html("Matching:");
			}

			clone.show();
		}

	}

	my.renderListUsingSearch = function(searchText, page) {
		var termCode = window.BB?window.BB.activeState.term:0;
		
		if(termCode === 0) {
			return;
		}
		
		var showFilter = "";
		var findByPrefix = "";
		switch ($("input[type=radio][name=switch_2]:checked").val()) {
			case "modified":
				showFilter = "&plan_editor="+userId;
				findByPrefix = "AndPlanEditor";
				break;
			case "created":
				showFilter = "&plan_creator="+userId;
				findByPrefix = "AndPlanCreator";
				break;
		}


		page = page?page:0;

		if (my.isLoadingPage) {
			console.log("Ignoring duplicated list request");
			return;
		}

		my.isLoadingPage = true;

		// Filter advisee here
		var adviseeQuery = adviseeId?"&students="+adviseeId:"";
		
		if (searchText) {
			$.getJSON("api/v2/search?type=recommendations&plan_termCode="+termCode+"&searchText="+searchText+showFilter+adviseeQuery+"&size="+my.pageSize+"&page="+page, function(data) {
				var searchHits = data.hits.hits;

				var suggestedRecommendations = searchHits.map(function(item){
					// Remove highlight items that do not match the search text. 
					// This is needed because we are also searching by term code and possibly editor/creator. 
					Object.getOwnPropertyNames(item.highlight)
					 	.filter(function(field) {
					 		item.highlight[field] = item.highlight[field].filter(function(value){
					 			return value.toLowerCase().match(searchText.toLowerCase().split(" ").join(".+"));
					 		})
					 		
					 		return item.highlight[field].length == 0;
					 	})
					 	.forEach(function(field) {
					 		delete item.highlight[field];
					 	})
					//delete item.highlight.plan_termCode;
					//delete item.highlight.plan_creator;
					//delete item.highlight.plan_editor;
					item._source._highlight = item.highlight;
					item._source.plan = {
							creator: item._source.plan_creator,
							title : item._source.plan_title,
							timeCreated : item._source.plan_timeCreated
					}
					return item._source;
				}).filter(function(r){return r._highlight && Object.getOwnPropertyNames(r._highlight).length > 0});
				
				RML.totalItemCount = suggestedRecommendations.length;
				loadNames(suggestedRecommendations, function(userNames) {
					renderList(suggestedRecommendations, page !== 0, RML.totalItemCount, userNames);					
				});
				my.isLoadingPage = false
				RML.isSearch = true;
			}).error(function(){
				console.log("Failed to contact server");
				my.isLoadingPage = false;
			});
		} else {
			$.getJSON("api/v2/recommendations/search/findByPlanTermCode"+findByPrefix+"?termCode="+termCode+adviseeQuery+"&size="+my.pageSize+"&page="+page+showFilter, function(data) {
				RML.totalItemCount = data.page.totalElements;
				loadNames(data._embedded.recommendations, function(userNames) {
					renderList(data._embedded.recommendations, page !== 0, RML.totalItemCount, userNames);
				});
				my.isLoadingPage = false
				RML.isSearch = false;
			}).error(function(){
				console.log("Failed to contact server");
				my.isLoadingPage = false;
			});
		}
	}
	return my;
}());

$(document).ready(function() {
	if (typeof isAdvisor === 'undefined') {
		// using this JS from another page
		return;
	}
	if (!isAdvisor) {
		return;
	}

	RML.initRecList();
	MR.initRecManager();

	RML.renderListUsingSearch();
	EE.activeStateChangeListeners.push(RML.renderListUsingSearch);

	window.addEventListener("state-changed", function(event) {
		var currentUrl = window.location.search; 

		if (currentUrl !== MR.lastSavedState) {
			MR.didChange(true);			
		} else {
			MR.didChange(false);			
		}
	});
	
	
	//MR.renderRec(rec_data);
})

// Manage Recommendation
var MR = (function() {

	var my = {};
	var self;
	var currentRec = null;
	var isNew = false;
	var unsavedWork = false;
	var lastSavedState;
	var updateTimeout;


		pollImportStatus = function() {
			var focusedStatus = $('.import-status').filter(':focus').attr('statusid');
			var refocus = function() {
				if (focusedStatus) {
					$('.import-status.'+focusedStatus).focus();
				}	
			}
	
			var format = new Intl.DateTimeFormat('en', { year: 'numeric', month:'long', day:'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' });
			$.get('api/v2/recommendations/import/status', function(data) {
				if (data.length) {
					$('#rec-import-progress-status').hide();
					var n=0;
					$('#rec-import-progress').html(data.map(function(item){
						n++;
						var warnings = item.warnings.join("; ").replace("'", "");
						var s="<div onclick='MR.toggleImportStatus(\""+item.id+"\")' tabindex='0' class='focusable cbox import-status "+item.id+"' statusid='"+item.id+"' title='Expand/collapse detail'>";
						s+="<div class='header'>";

						var tp;						
						if (item.validate) {
							s+="<i id='status-icon-"+n+"' style='padding-right: 5px; align-self: center;' class='fa fa-shield'></i>"
							tp = "File validation";
						} else {
							s+="<i id='status-icon-"+n+"' style='padding-right: 5px; align-self: center;' class='fa fa-save'></i>"
							tp = "Import";
						}

						s+='<span class="importType">'+tp+'</span>';
						//s+='<div class="mdl-tooltip" for="status-icon-'+n+'">Import</div>';
						
						s+="<span style='flex-grow: 1;'>"+format.format(new Date(item.startTime))+"</span>";
						s+="<span title='"+warnings+"' id='rec-status-"+n+"-warning'><i style='padding-right:2px;' class='fa fa-exclamation-triangle'></i>"+item.warnings.length;
						//s+='<div class="Dmdl-tooltip mdl-tooltip--top dynID" for="rec-status-'+n+'-warning">Warnings</div>'
						s+="</span>";
						var percent = parseInt((item.invalid+item.processed)*100/item.total);
						
						if (Number.isNaN(percent)) {
							percent = "-";	
						}
						percent=100;
						s+="<span style='padding-left:5px;'>"+percent+"%</span>";
						s+="</div>";
						s+="<div class='sub-header'>";
	
						if (item.mode === 'delete') {
							s+="<span><span class='field'>Deleted</span> <span class='value'>"+item.deleted+"</span></span>";
						} else {
							s+="<span><span class='field'>Created</span> <span class='value'>"+item.created+"</span></span>";
						}

						s+="<span><span class='field'>Overwritten</span> <span class='value'>"+item.overwritten+"</span></span>";
						s+="<span><span class='field'>Skipped</span> <span class='value'>"+item.skipped+"</span></span>";
						s+="<span><span class='field'>Students</span><span class='value'>"+item.students+"</span></span>";
						s+="<span><span class='field'>Lines ignored</span> <span class='value'>"+item.skipped+"</span></span>";
						s+="</div>";						s+="<div class='warnings' style='overflow: auto;'>";

						
						if (item.warnings && item.warnings.length) {
							for (var w of item.warnings) {
								s+="<span>"+w+"</span>";
							}
						} else {
							s+="No warnings";
						}
						s+="</div>";
						
						//s+="<span style='padding-left:25px;'>c:1</span>";
						//s+="<span style='padding-left:2px;'>w:1</span>";

						var c=item.status!=='complete'?'visibility: hidden;':'';
						
//						s+="<span style='padding-left:5px; opacity:.6;"+c+"'>";
//						s+="<button onclick='MR.clearImportStatus(\""+item.id+"\")' class='mdl-button mdl-js-button mdl-button--icon'><i class='fa fa-ban'></i></button>"
//						s+="</span>"
						s+="</div>"
						return s;
					}));
					
					$('#rec-import-progress').find('.import-status')
						.keypress(function(key){
							if (key.keyCode === 13 || key.keyCode === 32) {
								$(this).click();
							}
						});
					
					//$('#rec-import-progress .Dmdl-tooltip').each(function(item){
						//console.log({upgrade:$(this[0])})
						//componentHandler.upgradeElement($(this[0]));
					//})
					
				} else {
					$('#rec-import-progress').html("");
					$('#rec-import-progress-status').html('Empty');
					$('#rec-import-progress-status').show();
				}

				RR.updateFocus(0, true);
				refocus();
			})
		}
	
	// Poll import progress status
	var update = function(){
		pollImportStatus();
		updateTimeout = setTimeout(function(){
			if ($('#rec-import-progress').is(":visible")) update();
		}, 2000);
	}

	my.getCurrentRec = function(){return currentRec}

	my.clearImportStatus = function(status){
		$.ajax({
			url:'api/v2/recommendations/import/status/'+status,
			method:'DELETE'
		});
	}
	
	my.toggleImportStatus = function(item){
		var show = $('.import-status.'+item).height() < 50;
		var animateTime = 200;
		
		if (show) {
			clearTimeout(updateTimeout);
			
			$('.import-status.'+item).addClass('expanded');
			
			if ($('.import-status:not(.'+item+')').length) {
				$('.import-status:not(.'+item+')').animate({opacity:"0px", height: "0px", padding:"0px", margin:"0px"}, animateTime,
					function(){
						$('.import-status.'+item).animate({height: "180px"}, animateTime);
					});
			} else {
					$('.import-status.'+item).animate({height: "180px"}, animateTime);
			}
		} else {
			$('.import-status.'+item).removeClass('expanded');

			$('.import-status.'+item).animate({height: "25px"}, animateTime,
				function(){
					$('.import-status:not(.'+item+')').animate({opacity:"1px", height: "25px", padding:"5px", margin:"5px"}, animateTime);
					setTimeout(function(){
						update();
					},animateTime)
				});
		}
	}

	my.initRecManager = function() {

		self = $(document);
		// set up handlers

		self.find(".rec-message, .rec-title, .rec-add-input").on("input",function(e){
			my.didChange(true);
		});

		self.find(".recf-compulsory, .recf-lock-select").on("change",function(e){
			my.didChange(true);
		});
		
		self.find(".recb-select-all").click(function() {
			var allchecked = $(".rec-name-chk").not(":checked").length == 0;
			$(".rec-name-chk").prop("checked", !allchecked);
			refreshButDisState();
		});
		self.find(".recb-remove").click(function() {
			MR.didChange(true);
			$($(".rec-name-chk:checked").get().reverse()).each(function() {
				var i = $(this).data("index");
				currentRec.students.splice(i, 1);
				MR.updateToField();
			});
			$(".rec-name-chk:checked").parents(".rec-name-item").remove();
			refreshButDisState();
		});
		self.find(".recb-advise").click(function() {
			var i = $(".rec-name-chk:checked").data("index");
			var userid=currentRec.students[i];
			UU.caseStartAdvising(userid,true);
		});
		self.find(".rec-add-button").click(function() {
			var ids = $(".rec-add-input").val().split(",");
			$(".rec-add-input").val("");
			for (var i = 0; i < ids.length; i++) {
				var id = ids[i].trim();
				if (id.length <= 0)
					continue;
				// See if exists
				var have=false;
				for (var j=0; j<currentRec.students.length; j++) {
					if (currentRec.students[j]==id) {
						have=true;
						break;
					}
				}
				if (have) continue;
				currentRec.students.push(id);
			}
			my.updateToField();

			MR.didChange(true);
			addedStudents = true;
		});
		self.find(".rec-add-input").keypress(function(e) {
			if (e.keyCode == 13)
				$(".rec-add-button").click();
		});
		function showListPage() {
			RML.slidePage(false);
			PAGES.settleWindow();
		}
		self.find(".rec-but-back,.rec-but-cancel").click(function() {
			if (!unsavedWork) {
				showListPage();
				RML.renderListUsingSearch();
				return;
			}

			var buttons=[
					{
						name:"Continue",
						action:function() {
							popupNotice.close();
							showListPage();
							RML.renderListUsingSearch();
						}
					},
					{
						name:"Cancel",
						action:popupNotice.close
					}]

			var h="";
			h+="<div style='padding-bottom: 15px;position:relative;'>";
			h+="Any unsaved information will be lost, would you like to continue?";
			h+="</div>";

			RR.popNotice(h,buttons,false,"Unsaved recommendation");
		});
		self.find(".rec-but-delete").click(function() {
			if (currentRec.id) {
				deleteRecommendation(currentRec, function(){
					RML.renderListUsingSearch();
					showListPage();
				})
			}

		});

		self.find(".rec_results").bind('scroll', function () {
		console.log(RML.totalItemCount + ":" + RML.currentList.length)
					if (RML.totalItemCount == RML.currentList.length) {
						return;
					}
	        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight - 1) {
    	        var currentPage = RML.currentList.length / RML.pageSize - 1;
    	        RML.renderListUsingSearch($("#rec_search_input").val(), currentPage + 1);
        	}
		});

		deleteRecommendation = function(recommendation, success) {
			var url = "api/v2/recommendations/" + recommendation.id;
			$.ajax(
				{
					url: url,
					type : "DELETE",
					success: success
				});
		}

		getStudentsWithRecommendations = function(studentOverideCheck, success) {
			if (!addedStudents || !studentOverideCheck || currentRec.students.length==0) {
				success([]);
				return;
			}
			var params = currentRec.students.reduce(function(a, b){
				return a + "s="+b+"&";
			}, "?").slice(0, -1);

			var url = "api/v2/recommendations/students" + params + (currentRec.id && currentRec.id !== "(unsaved)" ?"&ignore="+currentRec.id:"") +  "&termCode=" + BB.activeState.term;
			$.ajax(
				{
					url: url,
					type : "GET",
					success: success
				});
		}

		buildStudentsText = function(students, capitalize) {
					var studentsText=students.slice(0, 2).join(" and ");
					var allStudents = students.slice(2, 3);
					allStudents.push(studentsText);
					studentsText = allStudents.join(", ");

					if(students.length>3) {
						var others = students.length - 3;
						studentsText = students.slice(0, 3).join(", ") + " and " + others + (others > 1?" others":" other");
					}

					var s = capitalize?"Student":"student";
					
					return (students.length>1?s+"s ":s+" ") + studentsText;
		}

		handleExistingRecommendations = function(studentOverideCheck, success) {
			getStudentsWithRecommendations(studentOverideCheck, function(studentsList) {
				if (studentsList.length>0) {

					var students = studentsList.map(function(s){return s.studentId;});
					var studentsCantOverwrite = studentsList.filter(function(s){return !s.canOverwriteAll;}).map(function(s){return s.studentId;});
					var studentshasCompulsory = studentsList.filter(function(s){return s.hasCompulsory;}).map(function(s){return s.studentId;});

					var studentsText=buildStudentsText(students, true);
					var studentsCantOverwriteText="";

					if(studentsCantOverwrite.length > 0) {
						studentsCantOverwriteText = buildStudentsText(studentsCantOverwrite, true);
						studentsCantOverwriteText+=" won't have all recommendations overwritten due to access rights";
					}

					var studentshasCompulsoryText="";

					if(studentshasCompulsory.length > 0) {
						studentshasCompulsoryText = " and " + buildStudentsText(studentshasCompulsory, false);
						studentshasCompulsoryText+=(studentshasCompulsory.length===1?" has":" have") + " mandatory recommendation(s)";
					}

					
					
					var h="";
					h+="<div style='padding-bottom: 15px;position:relative;'>";
					h+=studentsText +  " already "+(students.length>1?"have":"has")+" recommendation(s)";
					h+= studentshasCompulsoryText + " for this term.";
					h+=" Would you like to: <br> <ul>"
					h+="<li><strong>Overwrite</strong> - Give these student(s) this recommendation instead of the existing one. "+studentsCantOverwriteText+" </li>"
					h+="<li><strong>Create another</strong> - Give these student(s) this recommendation in addition to the existing one. </li>"
					h+="<li><strong>Skip</strong> - Remove these students who already have a recommendation from this recommendation and send this recommendation only to the remaining students. </li>";
					h+="</ul></div>";
					var buttons=[
						{
							name:"Cancel",
							action:function() {
								popupNotice.close;
								$(".rec-but-save").html("Save");
								$(".rec-but-save").prop("disabled", false);								
							}
						},
						{
							name:"Overwrite",
							action:function() {
									var params = currentRec.students.reduce(function(a, b){
										return a + "s="+b+"&";
									}, "?").slice(0, -1);
									params=params||"?";

									var url = "api/v2/recommendations/students" + params+(currentRec.id && currentRec.id !== "(unsaved)" ?"&ignore="+currentRec.id:"") + "&termCode=" + BB.activeState.term;;
									$.ajax(
										{
											url: url,
											type : "DELETE",
											success: success
										});
								popupNotice.close();
							}
						},
						{
							name:"Create another",
							action:function() {
								popupNotice.close();
								success();
							}
						},
						{
							name:"Skip",
							action:function() {
								currentRec.students = $(currentRec.students).not(students).get();
								popupNotice.close();
								success();
							}
						}]
					RR.popNotice(h,buttons,false,"Recommendation Conflict");
				} else {
					success();
				}
			});

		}
		saveAction = function(studentOverideCheck) {
			$(".rec-but-save").prop("disabled", true);
			$(".rec-but-save").html("Saving...");
			domToRec();
			createRecommendation(studentOverideCheck, function(rec){
				postRecommendation(rec, function(savedRec){
					currentRec.id = savedRec.id;
					RML.renderListUsingSearch();
					MR.renderRec(currentRec, true);
					
					MR.didChange(false);
					MR.lastSavedState = window.location.search;
				});
			});
		}

		createRecommendation = function(studentOverideCheck, success) {
			handleExistingRecommendations(studentOverideCheck, function(){
				var courses = [];

				BB.activeState.cnfs.forEach(function(item){
					var course = {
						code:item.cnKey,
						'@class':".PlannedCourseOffering"
					};

					var selectionLocked;
					var selectionKey;

					if (item.cs.length > 0) {
						selectionKey = item.cs;
					} else {
						var drop = item.drop;
						var selectionFromDrop = drop.substring(drop.indexOf("_") + 1, drop.length);

						if (selectionFromDrop.length == 0 || selectionFromDrop === drop) {
							return;
						}

						selectionKey = selectionFromDrop;
					}

					if (item.lockdrop) {
						course.locked = true;
						course.selections = [{
							selectionKey: selectionKey,
							locked:true
						}];
					}	else if (item.lock) {
						course.locked = true;
						course.selections = [{
							selectionKey : selectionKey,
							locked:false
						}];
					} else {
						course.locked = false;
						course.selections = [{
								selectionKey : selectionKey,
								locked:false
						}];
					}

					courses.push(course);
				});


				var recommendation = currentRec;
				recommendation.id = currentRec.id == "(unsaved)"? undefined:currentRec.id;
				recommendation.plan.planGroup = {
					type: "Union",
					plannedCourses:courses,
					groups:[]
				}

				success(recommendation);
			});
		}
		
		postRecommendation = function(recommendation, success) {
			recommendation.plan.editor = userId;

			// if (!recommendation.plan.creator) {
				// recommendation.plan.creator = userId;
			// }

			var isNew = !recommendation.id;

			var url = "api/v2/recommendations/" + (!isNew?recommendation.id:"");
			var type = isNew? "POST":"PUT";

			if (!isNew) {
				$.ajax(
				{
						url: url + "/groups",
						data : recommendation.groups.join("\n"),
						contentType : 'text/uri-list',
						type : "PUT",
					});
			}

			$.ajax(
			  {
					url: url,
					data : JSON.stringify(recommendation),
					contentType : 'application/json',
					type : type,
					success: success,
					async: false
				});
		}

		self.find(".rec-but-save").click(function() {
			saveAction(true);
		});

		self.find(".rec-but-duplicate").click(function() {
			var newRec=JSON.parse(JSON.stringify(currentRec));
			newRec.students=[];
			newRec.id="(unsaved)";
			newRec.plan.creator=userId;
			delete newRec.plan.id;
			newRec.plan.editor=userId;
			newRec.plan.timeCreated=(new Date()).getTime();
			newRec.timeEdited=(new Date()).getTime();
			isNew=true;
			currentRec=newRec;
			MR.renderRec(currentRec);
		});
		self.find(".recb-splice").click(function() {
			// save selected student(s)
			var stus=[];
			$(".rec-name-chk:checked").each(function() {
				var i = $(this).data("index");
				stus.push(currentRec.students[i]);
			})

			// Remove selected students
			$(".recb-remove").click();
			// Save it
			saveAction(false);

			// Duplicate
			var newRec=JSON.parse(JSON.stringify(currentRec));
			// with selected students
			newRec.students=stus;
			newRec.id="(unsaved)";
			newRec.plan.creator=userId;
			delete newRec.plan.id;
			newRec.editor=userId;
			newRec.plan.timeCreated=(new Date()).getTime();
			newRec.plan.timeEdited=(new Date()).getTime();
			isNew=true;
			currentRec=newRec;
			MR.renderRec(currentRec);

			saveAction(false);
		});
		self.find(".rec-grp-button").click(function() {
			var h="";
			h+="<div style='margin-bottom:6px'>";
			h+="Select Student Group:";
			h+="</div>";
			h+="<div><select id=\"student_group_select\"><option value=\"\">Loading please wait...</option></select> &nbsp; <span id=\"student_group_size\"></span></div>";

			var selectGroup = function() {
				var emplids=$("#student_group_size").data("emplids");
				$("#student_group_size").removeData("emplids");
				for (var i=0;i<emplids.length;i++) {
					var id=emplids[i];
					var have=false;
					for (var j=0; j<currentRec.students.length; j++) {
						if (currentRec.students[j]==id) {
							have=true;
							break;
						}
					}
					if (have) continue;
					currentRec.students.push(id);
				}
				my.updateToField();
				MR.didChange(true);
				addedStudents = true;

			};
			
			// Buttons
			var buttons = [{
				name: "Import IDs",
				action: selectGroup
			}, {
				name: "Cancel"
			}];
			
			RR.popNotice(h,buttons,false,"Import from Student Group");
			$('input.pbut0').attr("disabled",true);
			$.get("api/v2/studentgroups/groups",function(data) {
				var obj={};
				for (var i=0;i<data.length;i++) {
					var r=data[i];
					obj[r.inst+"_"+r.group]=r.inst+" - "+r.descr;
				}
				writeObjectIntoSelect($("#student_group_select"),obj,false,true);
			});
			$("#student_group_select").off().change(function() {
				var k=$(this).val();
				var inst=k.split("_")[0];
				var grp=k.split("_")[1];
				$("#student_group_size").text("...");
				$('input.pbut0').attr("disabled",true);
				$.get("api/v2/studentgroups/emplids",{term:BB.activeState.term,institution:inst,group:grp},function(data) {
					$("#student_group_size").text(data.length + " students").data("emplids",data);
					$('input.pbut0').attr("disabled",data.length<=0);
				});
			});
			
		});
		self.find(".rec-csv-button").click(function() {
			var h="";
			h+="<div style='padding-bottom: 15px;position:relative;'>";
			h+=i8n.studentCSV;
			h+="</div>";
			h+="<input type='file' name='csvfile' id='csvfile' accept='.csv' value='test' title='Select File'/>";
			h+="</div>";
			h+="<div id='progress' class='progress' style='height:10px;'>";
        	h+="<div class='progress-bar progress-bar-success' style='background:green;height:10px;width:0px;'></div>";
    		h+="</div>";
			var buttons=[{name:"Cancel",action:function() {popupNotice.close();}}];
			RR.popNotice(h,buttons,false,"Import CSV File");

			$('#csvfile').fileupload({
		        url: 'api/upload',
		        dataType: 'json',
		        add:function (e,data){
		        	$('#progress').show();
		        	data.submit();
		        },
		        done: function (e, data) {
		        	for(var k =0; k<data._response.result.length;k++){
		        		var d= data._response.result[k];
			        	$('.rec-add-input').val(d.name.trim());
			        	$('.rec-add-button').click();
		        	}

					$('.popupNoticeButtonMessage').html("Student IDs successfully imported");
					$('.popupNoticeButtonMessage').siblings('input').attr('value', 'Close');
		        	MR.didChange(true);
		        },
		        progressall: function (e, data) {
		        	$('#progress').show();
		            var progress = parseInt(data.loaded / data.total * 100, 10);
		            $('#progress .progress-bar').css(
		                'width',
		                progress + '%'
		            );
		        }
		    });
		});
		
		self.find(".rec-import-csv").click(function() {
			var h="";
			h+="<div style='padding-bottom: 15px;position:relative;'>";
			h+=i8n.recCSV;
			h+="</div>";

			// Import progress
			h+="<div style='text-align: center;'>Tasks progress</div>"
			h+="<div id='rec-import-progress-status' style='text-align: center; margin: 10px; opacity: .6;'>Loading...</div>"
			h+="<div style='height:200px;overflow-x:auto;overflow-y:scroll;'>";
			h+="<div id='rec-import-progress'>"
			h+="</div>"
			h+="</div>"

			h+="<div id='progress' class='progress' style='height:10px;'>";
			h+="</div>";

			h+="<div style='padding-bottom: 15px;position:relative;'>";
			h+=" Select the default import mode: <br>"
			h+="<input checked style='margin: 5px;' id='rec-add' type='radio' name='rec-import-sel' value='add'>"
			h+="	<label for='rec-add'><strong>Create another</strong> - Create recommendations found in the CSV file, and assign them to student(s) even if those students already have assigned recommendation(s) for the term. </label><br>"
			h+="<input style='margin: 5px;' id='rec-skip' type='radio' name='rec-import-sel' value='skip'>"
			h+="	<label for='rec-skip'><strong>Skip</strong> - Create recommendations found in the CSV file, but skip assigning student(s) that already have assigned recommendation(s) for the term.</label><br>";
			h+="<input style='margin: 5px;' id='rec-over' type='radio' name='rec-import-sel' value='overwrite'>"
			h+="	<label for='rec-over'><strong>Overwrite</strong> - Create recommendations found in the CSV file, assign the student(s) to these, and remove those students from any existing recommendation(s) for the term.</label><br>"
			h+="<input style='margin: 5px;' id='rec-delete' type='radio' name='rec-import-sel' value='delete'>"
			h+="	<label for='rec-delete'><strong>Delete</strong> - Delete student(s) from any existing recommendation(s). If any of these recommendations are left with 0 students, the recommendation will be deleted.</label><br>"
			h+="</div>";

			h+="<input type='file' name='csvfile' id='csvfile' accept='.csv' value='test' title='Select File'/>";

			//h+="<div>";
			h+='<button disabled style="margin-right:15px;" id="recValidate" class="mdl-button mdl-js-button mdl-button--raised white-background disable-no-results disable-no-crf" id="suggestState" data-upgraded=",MaterialButton">';
  			h+="Validate";
			h+="</button>";
			h+='<button disabled id="recImport" class="mdl-button--accent mdl-button mdl-js-button mdl-button--raised white-background disable-no-results disable-no-crf" id="suggestState" data-upgraded=",MaterialButton">';
  			h+="Import";
			h+="</button>";
			//h+="</div>";
			var buttons=[{name:"Close",action:function() {popupNotice.close();RML.renderListUsingSearch();}}];
			RR.popNotice(h,buttons,false,"Import Recommendations by CSV");

			$("input[name=rec-import-sel]").change(function() {
				$('#recImport').attr('disabled', true);
			}) 

			update();
			var uploadData; 
			$('#recValidate').click(function(){
				$('#csvfile').fileupload({
			        url: 'api/v2/recommendations/import?mode='+$("input[name=rec-import-sel]:checked").val()+'&validate=true',
				});
				uploadData.submit().done(function(){
					pollImportStatus();
				});
				$('#recImport').removeAttr('disabled');
				
				var statusId = $('.import-status.expanded').attr('statusid');
				
				if (statusId) {
					MR.toggleImportStatus(statusId);
				}
			});
			
			$('#recImport').click(function(){
				$('#csvfile').fileupload({
			        url: 'api/v2/recommendations/import?mode='+$("input[name=rec-import-sel]:checked").val()+'&validate=false',
				});
				uploadData.submit().done(function(){
					pollImportStatus();
				});				
				var statusId = $('.import-status.expanded').attr('statusid');
				
				if (statusId) {
					MR.toggleImportStatus(statusId);
				}
			});

			$('#csvfile').fileupload({
				replaceFileInput:false,
		        dataType: 'json',
		        add:function (e,data){
					uploadData = data;
					$('#recValidate').removeAttr('disabled');
					$('#recImport').attr('disabled', true);
		        },
		        done: function (e, data) {
		        	for(var k =0; k<data._response.result.length;k++){
		        		var d= data._response.result[k];
			        	$('.rec-add-input').val(d.name.trim());
			        	$('.rec-add-button').click();
		        	}
		        	popupNotice.close();
		        	MR.didChange(true);
		        },
		        progressall: function (e, data) {
		        	$('#progress').show();
		            var progress = parseInt(data.loaded / data.total * 100, 10);
		            $('#progress .progress-bar').css(
		                'width',
		                progress + '%'
		            );
		        }
		    });
		});
	}

	my.didChange = function(isDirty) {
		unsavedWork=isDirty;
		$(".rec-but-save").prop("disabled", !isDirty);
		$(".rec-but-save").html(isDirty?"Save":"Saved");
	}

	function refreshButDisState() {
		var size = $(".rec-name-chk:checked").length;
		var some = size>0;
		var justOne = size==1;
		var nb_all = $(".rec-name-chk").length;
		var sub = nb_all>1 && size>=1 && size<nb_all;
		$(".recb-advise").prop("disabled", !justOne);
		$(".recb-remove").prop("disabled", !some);
		$(".recb-splice").prop("disabled", !sub);
		$(".recb-select-all").prop("disabled",nb_all==0);
	}

	my.updateToField = function() {
		$.ajax({
				url: 'api/v2/system-users/names',
				data : JSON.stringify([].concat(currentRec.students, currentRec.plan.creator)),
				type : "POST",
				contentType : 'application/json'
			})
			.done(function(data) {
			var h = "";
			for (var i = 0; i < currentRec.students.length; i++) {
				var stu = currentRec.students[i];
				var nameValid=true;
				var sname=data[stu];
				if (!sname) {
					nameValid=false;
					sname=i8n.invalidOr;
				}
				h += "<div class='rec-name-item'><label class='rec-student-tooltip' title='"+sname+"' sid='"+stu+"'>";
				h += "<input type='checkbox' class='rec-name-chk' data-index='" + i	+ "'/>";
				if (true && nameValid) {
					h+=sname+" ("+stu+")";
				} else {
					h += stu;
				}
				h += "</label></div>";
			}
			self.find(".rec-scrol-div").html(h);
			
			// Creator update
			var cname=data[currentRec.plan.creator];
			if (cname) {
				self.find(".recf-creator").text(cname+" ("+ currentRec.plan.creator+")");
			}
			
			$(".rec-name-chk").change(function() {
				refreshButDisState();
			});
			refreshButDisState();
		});
	}

	my.loadAvailableGroups = function() {
			$.ajax(
				{
					url: "api/v2/user-groups/search/myGroups",
					type : "get",
					success: function(data){
						var allGroups = data._embedded["user-groups"];
						var groupsSelectize = $("#input-rec-groups-add")[0].selectize;
						var availableGroups = allGroups.map(function(g){return {name:g.name,id:g._links.self.href}});
						if (availableGroups.length>0) {
							// Only show the "Groups" input if there is at least 1 to choose from
							$(".rec-groups-row").show();
						}
						groupsSelectize.addOption(availableGroups);
					}
				});
	}

	my.renderRec = function(rec, ignoreGroups) {
		if (rec==null || typeof rec == 'undefined') {
			// create blank one
			rec = {
				id : "(unsaved)",
				plan: {
				creator : userId,
				timeCreated : (new Date()).getTime(),
				timeEdited : (new Date()).getTime(),
				title : "",
				description : "",
				tags : "",
				termCode : BB.activeState.term
				},
				editor : userId,
				groups : [],
				compulsory : false,
				permitAditionalCourses : true,
				state : BB.activeState.toStr(),
				students : [],
				isEditable : true
			};
			RML.createRecommendationTags = [];
			RML.createRecommendationGroups = [];
		} else {
			isNew = false;
			// Load recommendation into browser
			UU.caseLoadRecommendation(rec.state);
		}
		if (rec.id=="(unsaved)") {
			isNew = true;
			MR.lastSavedState = ""; 
		} else {
			MR.lastSavedState = window.location.search;
		}

		currentRec = rec;
		// render recommendation into GUI
		self.find(".recf-id").text(rec.id);
		self.find(".recf-creator").text(rec.plan.creator);
		currentRec.students && currentRec.students.sort();
		my.updateToField();
		self.find(".rec-title").val(rec.plan.title);
		self.find(".rec-message").val(rec.plan.description);
		self.find("#input-rec-tags-add").items = ["a", "b"];//rec.plan.tags

		var tagsSelectize = $("#input-rec-tags-add")[0].selectize;
		RML.createRecommendationTags = [];
		tagsSelectize.clear();

		rec.plan.tags && rec.plan.tags.forEach(function(t){
			tagsSelectize.addOption({
				text:t,
				value: t
			});
			tagsSelectize.addItem(t);
			unsavedWork=false;
		});
		// rec.plan.tags = [];

		if (!ignoreGroups) {
			var groupsSelectize = $("#input-rec-groups-add")[0].selectize;
			RML.createRecommendationGroups = [];
			groupsSelectize.clear();

			groupsSelectize.addOption(rec.groups);

			rec.groups && rec.groups.forEach(function(t){
				groupsSelectize.addItem(t.id);
			});
		}

		self.find(".recf-compulsory").prop("checked", rec.compulsory);
		self.find(".recf-lock-select").prop("checked", rec.permitAditionalCourses);
		// self.find(".recf-groups").val(rec.groups);
		self.find(".rec-header").text((isNew?"Create Recommendation":"Edit Recommendation #"+rec.id));
		self.find(".rec-but-delete").toggle(!isNew);
		self.find(".rec-but-cancel").toggle(isNew);
		self.find(".rec-but-duplicate").prop("disabled",isNew||unsavedWork);
		self.find(".rec-but-save").prop("disabled",!isNew);
		self.find(".rec-but-save").html(isNew?"Save":"Saved");
		self.find(".rec-but-prev,.rec-but-next").prop("disabled",isNew);

		if (currentRec.isEditable) {
			$("#page_rec_edit_form").removeClass("rec-disabled");
		} else {
			$("#page_rec_edit_form").addClass("rec-disabled");
		}

		unsaved = false;
		unsavedWork = false;
		addedStudents = false;
	}

	function domToRec() {
		currentRec.editor = userId;
		currentRec.timeEdited = (new Date()).getTime();
		currentRec.plan = $.extend(currentRec.plan,{
			title : self.find(".rec-title").val(),
			description : self.find(".rec-message").val(),
			//tags : self.find(".recf-tags").val().split(" "),
		    tags: RML.createRecommendationTags,
			timeCreated : (new Date()).getTime(),
			termCode: BB.activeState.term
		});
		currentRec.compulsory = self.find(".recf-compulsory").is(":checked");
		currentRec.permitAditionalCourses = self.find(".recf-lock-select").is(":checked");
		currentRec.state = BB.activeState.toStr();
		currentRec.groups = RML.createRecommendationGroups;
	}
	
	my.recToString = function(rec) {
		return groupToString(rec.plan.planGroup);
	}
	
	function groupToString(gp) {
		var s="";
		var sep=", ";
		if (gp.type=="choice") sep=" or ";
		for (var i=0;i<gp.plannedCourses.length;i++) {
			var pc=gp.plannedCourses[i];
			if (i>0) s+=sep;
			s+=pc.code;
		}
		for (var i=0;i<gp.groups.length;i++) {
			var nestedGp=gp.groups[i];
			if (s.length>0) s+=sep;
			s+="("+groupToString(nestedGp)+")";
		}
		return s;
	}

	return my;
}());
