(function() {
	/**
	 * 3 packages:
	 * AutoSuggest 			- core
	 * AutoSuggest.access 	- accesibility utility
	 * AutoSuggest.render 	- dispaly manager
	 * AutoSuggest.util 	- utility functions
	 *
	 * constructor:
	 * AutoSuggest.init(opts) - opts will override default configuration below
	 *
	 * AutoSuggest.renderUI() - refreshes the UI
	 */

	if(typeof(AutoSuggest) != "undefined") {
		return;
	}

	/**
	 * Default configuration for VSB, can be overwritten with init() parameter
	 */
	AutoSuggest = {
		// PUBLIC VARIABLES
		target: "#code_number",
		onselect: function(itemname,input,reason) {
				UU.caseAddCourse(itemname,input,reason);
				$(AutoSuggest.target).val("").parent().removeClass("is-dirty");
		},
		showResults: autoCompleteSize,
		script: "api/courses/suggestions",
		accessibility: false,

		// PRIVATE VARIABLES
		results: [],
		hidden: true,
		activeResult: -1,
		accessTimer: null,
		accessAnnouced: true,
		updateResize: true,
		updateScroll: true,
		pageNum:0,
		updateResult:false,
		loadingResult:false,
		finalResult:false,
		// NAVIGATION constants
		NAVIGATION_DOWN: 40, // Arrow down
		NAVIGATION_UP: 38, // Arrow up
		ACTION: 13, // Enter
		ESC: 27 // Escape
	};

	AutoSuggest.bindCloseEvent = function (e){
		if($(e.target).parents('#suggestion_box').length == 0){
			AutoSuggest.render.clear();
		}
	},
	/**
	 * Initiates the class and listeners
	 * @param opts - Overrides default configuration
	 */
	AutoSuggest.init = function(opts) {
		// Overriding
		for(key in opts) {
			AutoSuggest[key] = opts[key];
		}
		
		$(this.target).on("input",function(event) {
				return AutoSuggest.handleInputEvent.call(AutoSuggest, event);
			});

		$(this.target).on("keydown",function(event) {
				return AutoSuggest.handleKeyStroke.call(AutoSuggest, event);
			});

		$(this.target).attr("role", "combobox")
					  .attr("autocomplete", "off");


		//$("body").attr("role", "application");

		setInterval(function() {
			AutoSuggest.render.updatePosition();
		}, 300);

		window.onresize = function() {
			var me = AutoSuggest;

			if(me.updateResize && !me.hidden) {
				me.updateResize = false;

				setTimeout(function() {
					me.render.updatePosition();
					me.updateResize = true;
				}, 100);
			}
		};

		window.onscroll = function(e) {
			var me = AutoSuggest;

			if(!me.hidden && me.updateScroll) {
				me.updateScroll = false;

				setTimeout(function() {
					me.render.updatePosition();
					me.updateScroll = true;
				}, 100);
			}
		}
	};

	/**
	 * This methods will draw the UI/Update components according to class variables
	 */
	AutoSuggest.renderUI = function() {
		var me = AutoSuggest;
		var firsttime = me.hidden;

		me.hidden = false;


		if($("#suggestion_box").length == 0) {

			// The box doesn't exist
			//var html = [
			//     "<div id='suggestion_box' class='accessible ak_o' role='listbox'><div id='suggestion_container'></div></div>"
			//].join("");
			//
			//$("body").append(html);

			// Css of the box

			firsttime = true;
		}

		if(firsttime) {
			$("#suggestion_box").css({
				position: "absolute",
				top: "0px",
				left: "0px",
				color: "black",
				//maxWidth: "95%",
				maxWidth: "250px",
				zIndex: "99999"
			});

			$("#suggestion_container").css({
				marginTop: "6px",
				backgroundColor: "white",
				borderRadius: "0 0 4px 4px",
				boxShadow: "0 1px 3px rgba(60,64,67, 0.3), 0 4px 8px 3px rgba(60,64,67, 0.15)"
			});

			$('#suggestion_container').scroll(function (e){
				var elem = $(e.currentTarget);
				if ((elem[0].scrollHeight - elem.scrollTop()- elem.outerHeight())<100 && !me.loadingResult) {
					//console.log("bottom");
					AutoSuggest.loadMore();
					me.loadingResult = true;
				}
			})
		}

		$("#suggestion_box").show();
		$(document).on('click.autoSuggest',AutoSuggest.bindCloseEvent);

		me.render.list();
		me.render.updatePosition();

		if(firsttime) {
			var obj = $("#suggestion_box");

			$(obj).css("heigth", "0px");
			//$(obj).slideUp(0).slideDown(200);
		}
	}

	/**
	 * The render package manages the graphic behaviour of the elements
	 */
	AutoSuggest.render = {};

	/**
	 * Setting accesibility render
	 * @param accesibility
	 */
	AutoSuggest.render.setAccessibility = function(a) {
		AutoSuggest.accessibility = a;
	}

	/**
	 * Update the box position
	 */
	AutoSuggest.render.updatePosition = function() {
		var me = AutoSuggest;
		var	box = $("#suggestion_box");
		if (!box.is(":visible")) return;
		if(document.getElementById(me.target.replace("#", "")) == null) {
			return;
		}
		var pos = document.getElementById(me.target.replace("#", "")).getBoundingClientRect();

		var paddingW = parseInt($(me.target).css("padding-right"))*2;
		var paddingH = parseInt($(me.target).css("padding-top"))*2;

		var widthBox = $(box).width();
		var delta = widthBox-$(me.target).width();

		var leftMin = me.util.max(0, pos.left-(delta/2));

		var scrollTop = $(document).scrollTop();

		$(box).css({
			top: pos.top+$(me.target).height()+paddingH+scrollTop,
			left: leftMin,
			minWidth: $(me.target).width()+paddingW*2
		});
	}


	/**
	 * Set active result and fills the field
	 * @param index of result
	 */
	AutoSuggest.setActiveResult = function(index, force) {
		var me = AutoSuggest;

		if (index < 0) {
			if (me.searchText) {
				$(me.target).val(me.searchText);
				me.searchText = undefined;
			}
			return;
		}

		var solidInput=me.util.getInputNonSelection();
		
		if (!me.searchText) {
			me.searchText = solidInput;
		}

		//console.log("index:"+index+" solidInput:"+solidInput+" searchText:"+me.searchText);
		
		if (me.activeResult>=me.results.length) {
			// no results
			return;
		}

		me.activeResult = index;

		var itemname = me.results[me.activeResult].name;

		var beginning = me.activeText.length;
		var end = itemname.length;

    $(me.target).val(itemname);
		$('#autocomplete-results').html(me.results[me.activeResult].info + ". " + (index + 1) + " of " + me.results.length);
	}

	AutoSuggest.autoFocusMouseEnter = function(evt) {

		var index = this.getAttribute("index");
		var me = AutoSuggest;

		if(me.keyStrokeTime){
			if(new Date().getTime() - me.keyStrokeTime < 2000 ){
				me.keyStrokeTime = null;
				return ;
			}
		}
		if(me.activeResult != index) {
			AutoSuggest.setActiveResult(parseInt(this.getAttribute("index")));
			AutoSuggest.renderUI();
			$(AutoSuggest.target).focus();
		}
	};

	/**
	 * Render the result list
	 */
	AutoSuggest.render.list = function() {
		var me = AutoSuggest,
			results = me.results,
			container = $("#suggestion_container"),
			i = 0;

		var html = "";

		if (me.results.length > 0) {
		  $('#autocomplete-results').html('Listing ' + me.results.length + ' result' + (me.results.length>1?'s':''));
	  } else {
			$('#autocomplete-results').html('No results found');
		}

		for(i = 0; i < me.results.length; i++) {
			var result = me.results[i];
			var style = "";
			var className = "";

			if(me.activeResult == i) {
				className = "autosuggest_selected";
			}


			html += [
			    "<a ",
			    	"href='javascript:void(0)' ",
			    	"aria-label='"+result.name+" "+result.info+"' ",
			    	"index='"+i+"' ",
			    	"role='option' ",
			    	"tabindex='-1' ",
			    	"class='autosuggest_focus "+className+"' ",
			    	"id='results_focus_"+i+"' ",
			    	">",
			    	"<span class='course_name_autocomplete'>",
			    	""+me.util.highLightText(result.name, me.activeText)+"",
			    	"</span>",
			    	"<br/><span class='course_info_autocomplete'>"+me.util.highLightText(result.info, me.activeText)+"</span>",
			    "</a>"
			].join("");
		}

		// Add space to make it obvious
		if(me.hasMore) {
			html+="<p id='moreResults'>...</p>"
		}

		container.html(html);

//		if(me.accessibility) {
//			$("#resultText").
//				keyup(function(evt) {
//					//console.log("keyup");
//					return AutoSuggest.handleKeyStroke.call(AutoSuggest, evt);
//				});
//
//			$("a.autosuggest_focus", container).
//				keyup(function(evt) {
//					//console.log("keyup");
//					return AutoSuggest.handleKeyStroke.call(AutoSuggest, evt);
//				});
//		}

		$("a.autosuggest_focus")
				.on('mouseenter.auto',AutoSuggest.autoFocusMouseEnter);

		$("a.autosuggest_focus", container)
				.click(function(evt) {
					AutoSuggest.render.chooseItem(parseInt(this.getAttribute("index"))); // SDW
		 });

		if(me.results.length == 0 && me.activeText != "") {
			container.append([
			     "<p>"+i8n.noResults+"</p>"
			]);
		}

		//$("#moreResults",container).click(function (){console.log('yes')});

		$("a", container).css({
			display: "block",
			padding: "8px 6px 5px 6px",
			color: "black",
			//lineHeight: "120%"
		});
		$("a.autosuggest_selected", container).css({
			backgroundColor: "#DADCE0",
		});

		$("p", container).css({
			padding: "5px",
			textAlign: "center",
			margin: "0px"
		});
	}

	/**
	 * Override active result
	 * @param index of result
	 */
	AutoSuggest.render.chooseItem = function(index) {
		var me = AutoSuggest;

		me.activeResult = index;

		var itemname=$(me.target).val();
		var input=me.searchText?me.searchText:itemname;
		var reason=null;
		if (me.activeResult>=0 && me.activeResult<me.results.length) {
			itemname=me.results[me.activeResult].name;
			reason=me.results[me.activeResult].reason;
		}
		me.onselect(itemname,input,reason);

		me.render.clear();
	}

	/**
	 * Destroys the box
	 */
	AutoSuggest.render.clear = function() {
		$('#autocomplete-results').html('');
		$("#suggestion_box").slideUp(200, function() {
			$(document).off('click.autoSuggest');
		});
		AutoSuggest.activeResult = -1;
		AutoSuggest.hidden = true;
	}

	/**
	 * USED INTERNALLY, handles a keydown event on the search field
	 * @param the event
	 */
	AutoSuggest.handleKeyStroke = function(evt) {
		var code = evt.keyCode,
			upDown = false,
			me = AutoSuggest;

		var maximumIndex = me.results.length-1;

		var $results = $('#suggestion_container');
		me.keyStrokeTime = new Date().getTime();
		switch(code) {
			case me.NAVIGATION_UP:
				upDown = true;
				if(me.activeResult >= 0) {
					me.activeResult = me.activeResult - 1;
					var currentElement = $('.autosuggest_selected');
					if(me.activeResult >= 1) {
						var $next = currentElement.prev();
						var currentOffset = $results.offset().top;
						var nextTop = $next.offset().top;
						var nextOffset = $results.scrollTop() + (nextTop - currentOffset);
						if (nextTop - currentOffset < 0) {
							$results.scrollTop(nextOffset-10);
						}
					}
				}
				break;

			case me.NAVIGATION_DOWN:

				upDown = true;
				if(me.activeResult + 3 >= maximumIndex){
					AutoSuggest.loadMore();
				}
				if (me.activeResult >= maximumIndex) {
					break;
				}
				me.activeResult = me.activeResult+1;

				if (me.activeResult>0) {
					// consider scrolling down
					var currentElement = $('.autosuggest_selected');
					var $next = currentElement.next();
					var currentOffset = $results.offset().top + $results.outerHeight(false);
					var nextBottom = $next.offset().top + $next.outerHeight(false);
					var nextOffset = $results.scrollTop() + nextBottom - currentOffset;
					if (nextBottom > currentOffset) {
						$results.scrollTop(nextOffset+10);
					}
				}

				break;

			case me.ACTION:
				// Hit enter on input. Set me.activeResult=0 to choose first item
				if(me.activeResult == -1) {
					me.activeResult = 0;
				}
				me.render.chooseItem(me.activeResult);
				break;

			case me.ESC:
				if(me.accessibility) {
					$(me.target).focus();
					me.activeResult = -1;
					me.results =  [];
					me.pageNum = 0;
				} else {
					me.render.clear();
				}
				break;

		}

		if(upDown) {
			if(me.activeText == undefined || me.activeText.length == 0) {
				me.render.clear();
			} else {
				me.renderUI();
				me.setActiveResult(me.activeResult);
			}
			return false;
		}

	}

	/**
	 * USED INTERNALLY, handles an input text change event on the search field
	 * @param the event
	 */
	AutoSuggest.handleInputEvent = function(evt) {
		var code = evt.keyCode,
			prevent = false,
			me = AutoSuggest;

		var maximumIndex = me.results.length-1;

		var $results = $('#suggestion_container');
		me.keyStrokeTime = new Date().getTime();

		this.activeText = $(me.target).val();
		
		// User made a volutary change. Adopt it.
		me.searchText=this.activeText;
		if(me.activeText != "") {
			me.updateResult = false;
			me.activeResult = -1; // Initialize suggestion box with no pre-made selection
			me.results =  [];
			me.pageNum = 0;
			$('#suggestion_container').scrollTop(0);
			this.queryResultsFor($(me.target).val());
		} else {
			me.render.clear();
		}

	}

	/**
	 * Initiates the request and keep track of the search text
	 * @param text to search
	 */
	AutoSuggest.queryResultsFor = function(text) {
		var me = AutoSuggest;
		me.loadingResult = true;
		me.finalResult = false;
		
		var cbInput = {
			term: BB.activeState.term,
			cams: CC.setToStr(BB.activeState.cams),
			course_add: text,
			page_num: me.pageNum,
			sco: (autoSuggestSelCamsOnly?"1":"0"),
			sio: "1",
			already: BB.activeState.codeNumbers()
		};
		
		$.ajax({
			cache: false,
			url: me.script,
			data: cbInput,
			dataType: "xml"
		}).done(function(answer) {
			if (me.pageNum==0) me.results=[];
			AutoSuggest.processResponse.call(me, text, answer);
		});
	}

	AutoSuggest.loadMore = function(e) {
		var me = AutoSuggest;
		if(me.loadingResult || me.finalResult){
			return true;
		}
		me.pageNum++;
		updateResult = true;
		me.queryResultsFor(me.activeText)
	}

	/**
	 * Handles the request response
	 * @param text that was searched
	 * @param request - the actual response
	 */
	AutoSuggest.processResponse = function(text, response) {
		var me = AutoSuggest;

		// If the text has changed while querying results, we just throw the results in the garbage
		if(text != me.activeText) {
			return;
		}

		var response = (response);

		var resultsContainer = response
						.getElementsByTagName("results")[0];

		var results = resultsContainer
						.childNodes;
		/*if(!me.updateResult){
			me.results =  [];
		}*/

		me.hasMore = false;
		//if(me.activeResult)
		if(results.length < me.showResults){
			me.finalResult = true;
		}
		for(var i = 0; i < results.length; i++) {
			var result = results[i];

			if (!result.hasChildNodes()) {
				continue;
			}

			var _name = (result.childNodes[0].nodeValue);
			
			if(_name == "_more_") { me.hasMore = true; continue; }

			var it = result.getAttribute("info");
			if (template=="york") {
				it=it.replace(/-W(\d)(\d)\s\w{1,2}\s\w{1,2}/g, "-W$1$2");
				var two=it.match(/\((.+), (.+) only\)/);
				if (two!=null && two.length>=3 && two[1]==two[2]) {
					it=it.replace(", "+two[2],"");
				}
				it=it.replace(/in \d terms/,"in other terms");
			}

			me.results.push({
				id: result.getAttribute('id'),
				name: _name,
				info: it,
				reqId: result.getAttribute("reqId"),
				reason: result.getAttribute("reason")
			});
		}
		me.accessAnnouced = false;
		//me.activeResult = -1;

		me.renderUI();
		me.loadingResult = false;
	}

	/**
	 * accessibility package
	 */
	AutoSuggest.access = {};

	/**
	 * Sets the focus on annouceText
	 */
	AutoSuggest.access.annouceResults = function() {
		$("#suggestion_box #resultText").focus();
		AutoSuggest.accessAnnouced = true;
	}

	/**
	 * Creates an alert on the page
	 */
	AutoSuggest.access.alert = function(text) {
		var p = $("#alertJAWS");
		p.html(text);
		p.show();
		p.css({
			position: "absolute",
			top: "0px",
			left: "0px",
			height: "1px",
			width: "1px",
			overflow: "hidden"
		});

		setTimeout(function() {
			p.hide();
		}, 2000);
	}

	/**
	 * The util package regroups useful functions with nothing to do with AutoSuggest
	 */
	AutoSuggest.util = {};

	/**
	 * Return the max value found in arguments
	 * Ex: AutoSuggest.util.max(2,3,4,5,1) will return 5
	 *
	 * @param list of numbers
	 * @return the max
	 */
	AutoSuggest.util.max = function() {
		var max = arguments[0];

		for(var i = 0; i < arguments.length; i++) {
			if(arguments[i] > max) {
				max = arguments[i];
			}
		}

		return max;
	}

	/**
	 * Return the min value found in arguments
	 * Ex: AutoSuggest.util.min(2,3,4,5,1) will return 1
	 *
	 * @param list of numbers
	 * @return the min
	 */
	AutoSuggest.util.min = function() {
		var min = arguments[0];

		for(var i = 0; i < arguments.length; i++) {
			if(arguments[i] < min) {
				min = arguments[i];
			}
		}

		return min;
	}

	/**
	 * Wraps $text into spans from $string
	 * Also inserts <br/> every 50 characters
	 */
	AutoSuggest.util.highLightText = function($string, $text) {
		var r = $string;

		if(r == null || $text == null) {
			return $string;
		}

		$text=$text.replace(/  +/g," ");
		var parts=$text.split(" ");
		var start=0;
		for (var i=0;i<parts.length;i++) {
			var part=parts[i];
			var m=AutoSuggest.util.fancyMatch(part,r,start);
			var res=r;
			if (m.p2>0) {
				var t1="<span class='highlight'>";
				var t2="</span>";
				res=r.substring(0,m.p1)+t1+r.substring(m.p1,m.p2)+t2+r.substring(m.p2);
				start=m.p2+t1.length+t2.length;
			}
			r=res;
		}

		return r;
	}

	AutoSuggest.util.fancyMatch = function($text,$string,start) {

		// Find text in string, ignoring all non-alphanumeric characters
		var regex=/[^A-Z0-9&$*\.=/]/g;
		$text=$text.toUpperCase().replace(regex,'');
		var p1=0;
		var p2=0;
		var found=0;
		var skip=false; // don't highlight in HTML tags
		
		var ucString=$string.toUpperCase();
		
		for (var i=start;i<$string.length&&p2==0;i++) {
			var c=ucString[i];
			if (c=='<') skip=true;
			if (c=='>') skip=false;
			if (skip) continue;
			if (c.replace(regex,'').length==0) continue;
			for (var j=found;j<$text.length;j++) {
				if (c==$text[j]) {
					found++;
					if (j==0) p1=i;
					if (j==$text.length-1) p2=i+1;
					break;
				} else {
					i-=found;
					found=0;p1=0;p2=0;
					break;
				}
			}
		}
		return {p1:p1,p2:p2};
	}


	AutoSuggest.util.setInputSelection = function(startPos, endPos) {
		var input = document.getElementById(AutoSuggest.target.replace("#", ""));
        input.focus();
        input.selectionStart = startPos;
        input.selectionEnd = endPos;
    };

	AutoSuggest.util.getInputNonSelection = function() {
		var input = document.getElementById(AutoSuggest.target.replace("#", ""));
		var startPos = input.selectionStart;
        var txt = input.value;
		if (startPos>0) {
            txt = input.value.substr(0,startPos);
        }
		return txt;
    };

	// Global Scope
	window.AutoSuggest = AutoSuggest;
})();
