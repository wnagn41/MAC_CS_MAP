"use strict";

var overlapWarning=false
var selectStudentTypeValue="";
var creTotalInst=[];

function Legend(legendDest) {
	
	var self=this;
	var $divLegend = $(legendDest);
	
	var nonOverlapResults;
	var enrollOkAfterTime = 0;
	var enrollAlertHider = null;
	
	function drawButtonsHtml(enrollTypeNow) {
		
		var leg="";

		leg += "<div id=\"crnListButtons\" class=\"noprint\">";
		if (enrollTypeNow=="real") {
			// Enroll button
			leg += "<div style=\"text-align:center;position:relative;\">";
			
			var bText=i8n.getThisSchedule;
			if (disableEnroll) bText=i8n.sendToShoppingCart;
			
			if (cartValidation) {
				var oldDisState=$(".button_validate_cart").prop("disabled"); // Prevent MDL flicker
				leg += " <input class=\"button_validate_cart mdl-button mdl-js-button mdl-button--raised white-background\" value=\""+i8n.validateShoppingCart+"\" type=\"button\" onclick=\"getScheduleClick(true);\"/";
				if (oldDisState) {
					leg += " disabled=\"disabled\"";
				}
				leg += ">";				
			}
			
			{
				var oldDisState=$(".button_get_schedule").prop("disabled"); // Prevent MDL flicker
				leg += "<button class='button_get_schedule mdl-button mdl-js-button mdl-button--raised mdl-button--accent' type=\"button\" onclick=\"requestScheduleCheckPromissory();\"";
				if (oldDisState) {
					leg += " disabled=\"disabled\"";
				}
				leg += ">" + bText + "</button>";
			}
			
			leg += "<div class=\"not_signed_in_message\">"+i8n.youAreNotSigned+"</div>";
			leg += "</div>";

		} else if (enrollTypeNow=="url") {
			// Button to a URL
			leg += "<div style=\"text-align:center\">";
			leg += "<input class=\"enroll_by_url mdl-button mdl-js-button mdl-button--raised mdl-button--accent\" value=\""+i8n.sendToWorksheet+"\" type=\"button\"/";
			if (!isAuthenticated && template!="trent") {
				leg += " disabled=\"disabled\""
			}
			leg += ">";
			if(feeReportButton){
				leg += " <input class=\"big_button fee_report_button\" value=\"Get Fee Details\" type=\"button\">";
			}
			leg += "<div class=\"already_have\">"+i8n.s("alreadyEnrolledFor",isAdvising?i8n.studentIs:i8n.youAre)+"</div>";
			leg += "<div class=\"not_signed_in_message\">"+i8n.youAreNotSigned+"</div>";
			if (isAuthenticated) {
				leg += "<div class=\"sendToWorkSheetSubText\">"+i8n.sendToWorkSheetSubText+"</div>";
			}
			leg += "<div class='enroll_alert warningNoteBad'></div>";
			leg += "</div>";
		} else if (enrollTypeNow=="print") {
			// Just a print button
			leg += "<p style=\"text-align:center;margin-top:20px\"><input class=\"mdl-button mdl-js-button mdl-button--raised mdl-button--accent\" value=\""+i8n.printSchedule+"\" type=\"button\" onclick=\"window.print();\"/></p>";
		}
		leg += "</div>"; // end crnListButtons

		$('.schedule-buttons').html(leg);
	}
	
	this.draw = function(gState,result) {
		
		nonOverlapResults = gState.reasons.nonOverlapResults;
		
		var filters = gState.filters;
		var cnfs = gState.cnfs;
		
		// Create the legend
		var leg = "";

		//leg = "ID: "+result.id+"<br/>";
		//leg += "Score: "+result.score+"<br/>";
		//leg += "Scores: "+result.scores+"<br/>";
		//leg += "overlap="+result.overlap;
		
		overlapWarning=(result.overlap>0);

		var lastCnf = null;
		var newCourse=false;
		var courseNb=0;
		var radioName=null;
		var usingQuotes=false;

		if (result.selPros.length==0) {
			leg+="<div class=\"empty_warning warningNoteBad\">"+i8n.scheduleBlank+"</div>";
		}
		
		var enrollTypeNow = isAdvising?enrollTypeWhenAdvising:enrollType;
		drawButtonsHtml(enrollTypeNow);

		//if (result.selPros.length>0) {
		//	leg+="<div id=\"crnListWarnings\"></div>";
		//} else {
		//	leg+="<div style=\"height:8px\"></div>";	
		//}
		
		for (var ci=0; ci<cnfs.length; ci++) {
			var cnf=cnfs[ci];

			// if ignored and not enrolled, skip it completely
			if (cnf.ignore && cnf.drop.indexOf("dp_")!=0) {
				continue;
			}
			
			var hideCourse=false;
			// Get the selections in the result that are part of this course.
			var selPros=new Array();
			for (var i=0; i<result.selPros.length; i++) {
				if (result.selPros[i].cnf==cnf) {
					selPros.push(result.selPros[i]);
				}
			}

			if (selPros.length==0) {

				// Inserting dropped courses as hidden
				if (cnf.cnPro.uselPros.length>=1) {

					// Try to add the currently enrolled section
					var selPro=cnf.getEnrolledSelPro();
					if (selPro!=null) {
						selPros.push(selPro);
					} else {
						// Otherwise, just show the first usel
						for (var i=0;i<cnf.cnPro.uselPros[0].selPros.length;i++) {
							selPros.push(cnf.cnPro.uselPros[0].selPros[i]);
						}
					}
				}
				hideCourse=true;
				courseNb--;
			}
			
			// Order the Selections by rank for the legend
			var selProsOrdered0=selPros.slice(0);
			selProsOrdered0.sort(function(a,b) {
				if (BB.activeState.sort=="homecamp") {
					if (a.sel.homeRating>b.sel.homeRating) return -1;
					if (a.sel.homeRating<b.sel.homeRating) return 1;
					return 0;
				}
				if (a.rank>b.rank) return 1;
				if (a.rank<b.rank) return -1;
				return 0;
			});
			
			// Apply post-filters
			var selProsOrdered = [];
			for (var i=0; i<selProsOrdered0.length; i++) {
				var selPro=selProsOrdered0[i];
				if (!hideCourse && selPro.sel.key!=cnf.enr) {
					if (!selPro.isPostFilterPass(filters)) {
						continue;
					}
					
					// Filter out selPros belonging to same usel
					//var selPros2=result.selPros.filter(x => (x==selPro || x.uselPro!=selPro.uselPro));
					// Instead if selections don't have same RGs, don't consider them similar
					
					// Check co-reqs
					if (!selPro.isSatisfied(result.selPros,filters)) {
						continue;
					}
				}
				selProsOrdered.push(selPro);
			}

			// Display legend
			var hideShowResultsCount=0;
			for (var i=0; i<selProsOrdered.length; i++) {
				var selPro = selProsOrdered[i];

				if (lastCnf==null || lastCnf!=selPro.cnf) {
					newCourse = true;
				} else {
					newCourse = false;
				}

				// Get Selection CRNs
				var selCrns="";
				var sel=selPro.sel;
				for (var b=0; b<sel.classes.length;b++) {
					var cls = sel.classes[b];
					if (cls.dispOnly()) continue;
					if (b>0) {
						usingQuotes=true;
						selCrns+=(disableRel12Parenthesis?" ":" (");
					}
					selCrns+=cls.cartid;
					if (b>0) {
						selCrns+=(disableRel12Parenthesis?"":")");
					}
					if (useLeafCartItemId) {
						selCrns=cls.cartid;
					}
				}

				// put radio?
				radioName=null;
				var nextSelPro=null;
				if (i<selProsOrdered.length-1) {
					nextSelPro = selProsOrdered[i+1];
				}
				// If last Selection had same course or next selection has same course
				if ((lastCnf!=null && lastCnf==selPro.cnf) || (nextSelPro!=null && nextSelPro.cnf==selPro.cnf)) {
					radioName="rn_"+selPro.cnf.cnfid;
				}

				if (newCourse && lastCnf!=null) {
					leg += "</div></div></div>"; // tr/td/table course_cell_legend
					leg += "</div>"; // course_box
				}

				if (newCourse) {
					courseNb++;

					var uselkey=sel.usel.key;

					var pinned=false;
					var extraClass="";
					var message="";
					var messageAria="";
					if (cnf.isPinned()) {
						pinned=true;
						if (cnf.lockdrop) {
							extraClass=" bclock";
							message+=i8n.isClassRequirement;
						} else {
							extraClass=" bcpin";
							message+=i8n.clickToUnpin;
						}
					} else {
						message+=i8n.clickToPin;
						messageAria+=i8n.clickToPinAria;
					}
					var bcNb=(hideCourse?0:cnf.color);
					var lockFunction = "addPin(event,"+cnf.cnfid+",'"+uselkey+"',"+(!pinned)+",'bc"+bcNb+"');";
					if((oneShotEnrollment || coursesLocked.includes(cnf.cnKey)) && hasEnrolledCourse()){
						lockFunction = "";
					}
					
					leg += "<div class=\"course_box show-books ";
					
					if (cnf.hide) {
						leg += "hide-course";
					}
					
					leg += " block_animation show_extras be"+(hideCourse?0:0)+(hideCourse?" to_drop":"")+"\" style=\""+(hideCourse?"display:none;":"")+"\" data-atomicid=\""+cnf.getAtomicId()+"\">";

					leg += "<div class=\"legend_table table computer-only\" style=\"padding:0px; border-spacing:0px; border:0px;\"><div class='tr'><div class=\"td course_cell_legend one_col\">";


					leg += "<div  class=\"course_header bc"+bcNb+" bh"+bcNb+extraClass+"\"";
					
					leg += " role=\"checkbox\" aria-checked=\"false\" aria-label=\""+messageAria+"\" title=\""+message+"\" tabindex=\"0\" onkeydown=\"if(event.keyCode == 32){"+lockFunction+"}\" onclick=\""+lockFunction+"\" onmouseout=\"RR.highlightClass("+bcNb+",false);\" onmouseover=\"RR.highlightClass("+bcNb+",true);\"><div  class=\"header_cell\">";
					
					//added to improve accessibility for visually impaired users
					var courseAriaLabel=sel.cn.code+" "+sel.cn.number+" "+sel.cn.title+" running from "+sel.usel.ds.replace("-", " to ")+" on "+getTimeDisplayString(sel.classes, true, sel.usel.ds).replace(" : ", " from ").replace("<br/>", "")+". Given this timetable schedule result, there may be one or more sections that occur at this time below.";
					leg += "<h4 style='float:left;' class='course_title' aria-label='"+courseAriaLabel+" "+message+"'>"+sel.cn.code+" "+sel.cn.number+"</h4>";
					
					leg += "<div style='float:right;'";
					if (sel.usel.ss.length>0) {
						leg += " title='Session Code: "+sel.usel.ss+"'";
					}
					leg += ">";
					leg += "<span class='term_label'>"+MM.terms[sel.strm]+": </span>";
					leg += sel.usel.ds+"</div>";

					leg += "<div style='float:right;clear:right;' class='session_label'>";
					if (sel.usel.ss.length>0) {
						var sl=i8n.sessionLabel;
						if (sl.length>0) {
							leg += sl+": ";
						}
						leg += MM.sessions[sel.usel.ss];
						leg += " &nbsp;&nbsp;";
					}
					leg += "</div>";

					leg += "<div style='float:left;clear:left;'><span class='mobileNUmber'>"+courseNb+"-</span><span>"+sel.course.origTitle+"</span></div>"; 
					leg += "<div style='clear:both'></div>";
						
					var classString = getTimeDisplayString(sel.classes, true, sel.usel.ds);
					//wrap times in div element with unique id and class visually hidden to hide from view
					if(showHoursInLegend){
						classString = "<div id=\"hoursInLegend\">"+classString+"</div>";	
					}
					else{
						classString = "<div id=\"hoursInLegend\" class=\"visuallyhidden\">"+classString+"</div>";
					}
					leg += classString;
					
					leg += "</div></div>";
					if(BB.access) {
						leg += "<div class='course_header bc"+bcNb+"'><label id=\"bc"+bcNb+"unpin noprint\" href=\"javascript:void(0)\" onclick=\"addPin(event,"+cnf.cnfid+",'"+uselkey+"',"+(!pinned)+",'bc"+bcNb+"unpin');\"><input type='checkbox' "+(!pinned?'':'checked="checked"')+"/>"+message+" "+sel.cn.code+" "+sel.cn.number+"</label></div>";
					}
				} else {
					leg += "<div class=\"selection_or\">or</div>";
				}
				hideShowResultsCount++;
				// Selection
				leg += "<label class='vsbselectionnew'>";
				leg += "<h5 class=\"visuallyhidden\">"+sel.disp+"</h5>";
				leg += "<div class=\"selection_row"+(radioName!=null?" selection_row_radio":"")+"\" data-cnfid=\""+cnf.cnfid+"\" data-selkey=\""+sel.key+"\" data-inst=\""+sel.inst+"\" data-ac=\""+sel.ac+"\">";

				leg += "<div class=\"selection_table\"><table class=\"inner_legend_table\" style=\"padding:0px; border-spacing:0px; width:100%\">";

				var lastSecNo="";
				for (var b=0; b<sel.classes.length; b++) {
					var cls = sel.classes[b];
					leg += "<tr>";
					if (b==0) {

						var color="green";
						if (useSeatNumbers) {
							if (sel.full && sel.waits<=0) color="red";
							if (sel.full && sel.waits>0) color="yellow";
						}
						if (onReservedFilter && sel.reserved) {
							color="orange";
						}

						leg += "<td rowspan=\"" + (sel.classes.length*2) + "\" valign=\"middle\" align=\"center\" width=\"25\" ";
						leg += "title=\"";
						if (color=="green") leg += i8n.radioTipForGreen;
						if (color=="red") leg += i8n.radioTipForRed;
						if (color=="yellow") leg += i8n.radioTipForYellow;
						leg += "\" class=\"legendSelect bg_"+color+" "+(radioName!=null ? "" : "empty")+"\">";
						if (radioName!=null) {
							
							leg+="<span class=\"legend-radio-cont block-ripple mdl-radio mdl-js-radio\">";
							leg+="<input id=\"rad_"+sel.key+"\" class=\"sel_radio tttt radioforcourse mdl-radio__button\" type=\"radio\" name=\"" + radioName + "\"";
							leg+=" data-cnfid=\""+cnf.cnfid+"\"";
							leg+=" data-selkey=\""+sel.key+"\"";
							leg+=" data-crns=\""+selCrns+"\"";
							leg+=" data-color=\""+color+"\"";
							leg+=" data-pri=\""+(selPro.cnf.enr==sel.key||selPro.cnf.cart==sel.key?"1":"0")+"\"";
							leg+=" value=\""+sel.key+"\"";
							if (cnf.lockdrop || (oneShotEnrollment && hasEnrolledCourse())/* && !isAdvisor*/) {
								leg+=" disabled=\"disabled\"";
								leg+=" title=\"These classes occur at the same time but you are required to take the selected one.\"";
							} else {
								leg+=" title=\"These classes occur at the same time. Choose the one you prefer.\"";
							}
							leg+="/>";
							leg+="</span>";
						} else {
							leg += "<span class=\"sel_radio\"";
							leg+=" data-cnfid=\""+cnf.cnfid+"\"";
							leg+=" data-selkey=\""+sel.key+"\"";
							leg+=" data-crns=\""+selCrns+"\"";
							leg+=" data-color=\""+color+"\"";
							leg+="></span>";
						}
						leg += "</td>";
					}

					var unsched = "";
					if (sel.onCampus && cls.timeblocks.length<=0) {
						if (template!="cap") {
							unsched+="<span class='leftnclear'>"+i8n.unscheduled+"</span>";
						}
					}

					var campusDisp = "";
					var campusDesc = "";
					if (cls.campus!=null) {
						var fullCampus=getCampusDesc(cls.campus);
						if (showFullCampusInLegend) {
							campusDisp=fullCampus;
						} else {
							campusDisp=cls.campus;
						}
						campusDesc=" title=\""+i8n.campus+""+fullCampus+"\"";
					}


					if (template=="mcg") {
						if (cls.status=="T") {
							unsched+="<span class='leftnclear'>"+i8n.temporarilyClosed+"</span>";
						}
						if (cls.status=="R") {
							unsched+="<span class='leftnclear'>"+i8n.registrationOptional+"</span>";
						}
						campusDisp = campusDisp.replace("Downtown", "<a href='http://www.mcgill.ca/maps/' target='_blank' title='Click for campus map'>Downtown</a>");
						campusDisp = campusDisp.replace("Macdonald", "<a href='http://www.mcgill.ca/maps/macdonald/' target='_blank' title='Click for campus map'>Macdonald</a>");
					}


					leg += "<td><strong class='leftnclear type_block'>";
					if (b==0) {
						if(template == "4cd") leg+= ""+i8n.period+" "+sel.pn+" Section: ";
						else if (showPeriodWithDisp && sel.pn.length>0) leg+= ""+i8n.period+" "+sel.pn+":";
						if (sel.usn.length>0) leg+= "Section "+sel.usn+": ";
					}
					if (!hideDisplayStringClassType && template!="4cd") {
						leg += cls.type;
					}
					if (!dispCrnInsteadOfSection) {
						if (lastSecNo!=cls.secNo && !hideRepeatSecNo) {
							leg += " "+cls.secNo;
						}
					}
					lastSecNo=cls.secNo;
					if (!hideDisplayStringClassType && template=="4cd") {
						leg += "<br>" + mapInstructionalMethodCode(cls.type) +"<br>";
					}
					leg += "</strong>";
					
					// Enrollment status
					var es="";
					var waitlistedToolTip = "";
					if (sel.key==cnf.enr) {
						es=i8n.enrolled;
						if (cnf.waiting) {
							es=i8n.waitlisted;
							if (cnf.waitPos) {
								es+=" - Pos: "+cnf.waitPos;
								waitlistedToolTip = "You are number "+cnf.waitPos+" in line";
							}
						}
						if (cnf.audited) {
							es=i8n.audited;
						}			
					}
					if (sel.key==cnf.cart) {
						if (es.length>0) es+=" &amp; ";
						es=i8n.inShoppingCart;
					}
					if(es == "" && oneShotEnrollment && hasEnrolledCourse()){
						es=i8n.notEnrolled;
						leg += "<span class='course_not_enrolled_state' title='"+waitlistedToolTip+"'>"+es+"</span>";
					} else if (es.length > 0){
						leg += "<span class='course_state' title='"+waitlistedToolTip+"'>"+es+"</span>";
					}
					if (showLowCostTextbookLabel && selPro.hasClassAttrValue("ZTC")) {
						leg += "<span class='course_state' title='Zero Cost Textbook'>ZTC</span>";
					}
					if (showLowCostTextbookLabel && selPro.hasClassAttrValue("LTC")) {
						leg += "<span class='course_state' title='Low Cost Textbook'>LTC</span>";
					}
					if (b==0 && sel.hue && isAdvisor) {
						leg += "<div class='hidden_state' title='Due to class status or visibility, this class is only visible to advisors or students already enrolled in this class.'>Hidden</div>";
					}
					if (sel.thc && sel.thc!=sel.course.origTitle) {
						leg += "<span class='leftnclear class_title' data-classTitle='"+sel.thc+"'>"+sel.thc+"</span>";
					}
					if (!cls.dispOnly()) {

						var dispKey=cls.cartid;
						if (template=="spc" && dispKey.length>=11) {
							dispKey=dispKey.substring(0,4)+"-"+dispKey.substring(4,8)+"."+dispKey.substring(8,11)+"-"+dispKey.substring(11);
						}

						if ((!useLeafCartItemId || b==sel.classes.length-1) && !hideCrn) {
							leg += "<label for=\"rad_"+sel.key+"\"><span class=\"leftnclear\"><span class='crn_label'>"+i8n.crn+":&nbsp;</span></span><span class=\"crn_value\" style='float:left'>"+dispKey+"</span></label>";
						}
						if (enableCohort) {
							var ucosD="";
							for (var id in sel.ucos) {
								var uco=sel.ucos[id];
								if (ucosD.length>0) ucosD+=", ";
								ucosD+=uco.dn;
							}
							leg += "<span class='leftnclear cohorts_label' title='Course Block'>"+ucosD+"</span>";
						}
						if (useSeatNumbers) {
							if (cls.u) {
								// Seat Availability unknown
								leg += "<span class='leftnclear'>";
								leg += i8n.unknownSeatAvailability;
								leg += "</span>";
							} else if (cls.os!=9999) {
								// Seat Availability is not unlimited:
								
								var fState=cls.getFullState();
								var filled=cls.isFull;

								var fs="";
								if (filled && cls.custstat == ""){
									// Seats are full
									var help="All "+cls.me+" seats are taken";
									if(cls.csme!=-1) {
										help="All "+cls.me+" class or "+cls.csme+" combined section seats are taken";
									}
									fs+="<span class='leftnclear nowrap' title=\""+help+"\">"+i8n.seats+": <span class=\"fullText\">"+i8n.full+"</span></span>";
								} else {
									// There are seats available
									var help=cls.os+" seat"+(cls.os>1?"s":"")+" remaining in this class.";
									if(cls.csme!=-1) {
										help+=" "+cls.csos+" of the "+cls.csme+" seat"+(cls.csos>1?"s":"")+" in the combined section are remaining."
									}
									
									if (inspecificSeats) {
										fs+="<span class='leftnclear seats_available nowrap'>"+i8n.seats+": <span class=\"seatText\">"+i8n.available+"</span></span>";
									} else {
										if (cls.me>=0 && !onlyRemainingSeats) {
											var taken=cls.me-cls.os;
											fs+="<span title=\""+help+"\" class='leftnclear nowrap'>"+i8n.seats+": <span class=\"seatText\">"+taken+"/"+cls.me+"</span></span>";
										} else {
											fs+="<span title=\""+help+"\" class='leftnclear nowrap'>"+i8n.seats+": <span class=\"seatText\">"+cls.os+"</span></span>";
										}
									}
									leg+="</span>";
								}
								
								if (cls.custstat != "")  {
									if (cls.custstat=="O") {
										fs+="<span style='margin-left: 5px;'> Status: "+i8n.open+"</span>";
									}else if (cls.custstat=="F") {
										fs+="<span class=\"fullText"+"\" style='margin-left: 5px;'>Status: "+i8n.full+"</span>";
									}else if (cls.custstat=="X") {
										fs+="<span style='margin-left: 5px;'> Status: "+i8n.cancelled+"</span>";
									}else if (cls.custstat=="C") {
										fs+="<span style='margin-left: 5px;'> Status: "+i8n.closed+"</span>";
									}
								}
								 
								
								if (onReservedFilter) {
									fs+="<span class='leftnclear seats_available nowrap'>"+i8n.nonReservedS+": <span class=\"seatText\">"+cls.nres+"</span></span>";
								}
								
								if ((filled || alwaysShowWaitlist) && !hideWaitlistFromLegend) {
									// Show waitlist
									fs+="<span class=\"legend_waitlist leftnclear nowrap\">";
									fs+="<span title=\"";
									fs+=i8n.waitListNotice;
									if (cls.ws>0) {
										var waiting=cls.wc-cls.ws;
										if (!inspecificSeats) {
											fs+=i8n.s("waitlistStatus",cls.ws);										
										}
										fs+="\">"+i8n.waitlist+": <span class=\"waitText"+(waiting==0?"NoColor":"")+"\">";
										if (inspecificSeats) {
											fs+="Available";
										} else {
											fs+=waiting+"/"+cls.wc;
										}
										fs+="</span></span>";
									} else if (cls.ws==0 && cls.wc>0){
										if (cls.wc==1) {
											fs+=i8n.waitlistFull1;
										} else {
											fs+=i8n.s("waitlistFull",cls.wc);
										}
										fs+="\">"+i8n.waitlist+": <span class=\"fullText"+(filled?"":"NoColor")+"\">Full</span></span>";
									} else {
										fs+=i8n.waitlistNone;
										fs+="\">"+i8n.waitlist+": <span class=\"fullText"+(filled?"":"NoColor")+"\">None</span></span>";
									}
									fs+="</span>";
								}
								
								if (individualClassStatus) {
									leg += "<table class='leftnclear nowrap full_table'><tr><td class='bg_"+fState+" full_indic'>";
									leg += "</td><td>";
									leg += fs;
									leg += "</td></tr></table>";
								} else {
									leg += fs;
								}

							}
						}
						
						if (showRecommendationNumbers && isAdvisor && recommendScheduleEnabled) {
							leg += "<span class='leftnclear nowrap' title=\"Recommendations for each level\">"+i8n.recommendations+": <span class=\"seatText\" title=\"Number of students who have a recommendation on this course\">"+cls.recul+"</span> : <span  title=\"Number of students who have a recommendation locking them into this very class\">"+cls.recl+"</span></span>";
						}
					} else {
						campusDisp = "";
					}
					if(template=="4cd"){
						  leg+="<span class='leftnclear nowrap'>";
						  leg+=getTimeDisplayString([sel.classes[b]], true, sel.usel.ds);
					      leg+="<br></span>";
					}
					var locationDisp = (cls.location==null?"":cls.location+"<br/>");
					var teacherDisp = (cls.teacher==null?"":cls.teacher);
					var notesDisp = (cls.n==null?"":cls.n);
					if (cls.fd.length>0) {
						notesDisp=cls.fd;
					}
					
					//leg += "<span> ["+selPro.rank+"] </span>";

					leg += unsched+"</td>";
					leg += "<td align=\"right\">";
					if (campusDisp.length>0) {
						leg += "<div"+campusDesc+" class='campus_block rightnclear'>"+campusDisp+"</div>";
					}
					
					if (cls.im.length>0 && !hiddenInstructionalMethods[cls.im]) {
						var imData=getInstructionalMethodDesc(cls.im);
						if (!(!imData)) {
							var imDetail=imData.title.replace(/'/g,"&apos;");
							if (imDetail.length>0) imDetail=": "+imDetail;
							leg += "<div class='instructional_method_block rightnclear' title='"+i8n.instructionalMethod+imDetail+"'>";
							leg += imData.text;
							leg += "</div>";
						}
					}
					leg += "<div class='rightnclear'>";
					if (cls.ot.indexOf("o")>=0||cls.ot.indexOf("l")>=0) {
						leg += "<i class=\""+onlineClassIcon+"\" title=\""+i8n.calssIsOnline+"\"></i> ";
					}
					var locs=cls.location.split(";");
					if(countProperties(cls.loos)>1){
						leg += "<span class='location_block' title=\""+i8n.buildingAndRoomNo+"\">"+getTimeDisplayString([cls], true, sel.usel.ds,true)+"</span>";
					} else{
						leg += "<span class='location_block' title=\""+i8n.buildingAndRoomNo+"\">"+locationDisp+"</span>";
					}
					leg += "</div>";
					
					// Textbook and syllabus icons
					var textbookIcon = null, syllabusIcon = null;
					// Check whether the bookstore custom function is defined
					if (typeof custBookstoreUrl == "function") {
						var btUrl=custBookstoreUrl(selPro.uselPro.usel,sel,cls);
						if (btUrl.length>0) {
							textbookIcon = btUrl;
						}
					}
					// Check whether custom syllabus function is defined
					if (typeof custSyllabusUrl == "function") {
						syllabusIcon = custSyllabusUrl(selPro.uselPro.usel,sel,cls);
					}
					// If any of textbook or syllabus are defined, display them
					if(textbookIcon || syllabusIcon) {
						leg += "<div class='rightnclear'>";
						// Textbook icon
						if(textbookIcon) {
							leg += "<span><a href='"+btUrl+"' target='_blank' title='View books required for this class'><i class='far fa-books'></i></a></span>";
						}
						// Syllabus icon
						if(syllabusIcon) {
							leg += "<span><a href='"+syllabusIcon+"' target='_blank' title='View the course syllabus information'>View Syllabus<img src='images/popup.gif' alt='Syllabus Icon'/></a></span>";
						}
						leg += "</div>";
					}
					
					leg += "<div class=\"rightnclear\" title=\""+i8n.instructor+"\">"+teacherDisp+"</div>";

					if (template=="cap" || (cls.credits!=0 || (b==0 && sel.apUnits!=0))) {
						leg += "<div class='credits_block rightnclear'>";
						leg += "<span title='Units'>"+cls.credits+(cls.creditsMax!=cls.credits?(" - "+cls.creditsMax):"")+"</span>";
						if (sel.apUnits>0 && !hideAPUnits) {
							leg += "/<span title='Academic Progress Units'>"+sel.apUnits+"</span>";
						}
						leg += " "+i8n.credits+"</div>";
					}

					leg += "</td></tr>";

					var capInfo="";
					if (!(!cls.eattrs.rcaps) && showReserveCapacities) {
						var lastSeq=0;
						var lastReq=0;
						var rcaps=cls.eattrs.rcaps;
						var desc="";
						for (var ri=0;ri<rcaps.length;ri++) {
							var rcap=rcaps[ri];
							var rcapN1=ri+1<rcaps.length?rcaps[ri+1]:null;
							var rcapN2=ri+2<rcaps.length?rcaps[ri+2]:null;
							
							if (rcap.seq==lastSeq && rcap.req==lastReq) {
								// already did this one
								desc="";
								continue;
							}
							if (rcap.desc.length>0) {
								desc=rcap.desc; // We only populate first to save space
							}
							
							if (rcapN1!=null && (rcapN1.seq!=rcap.seq || rcapN1.req!=rcap.req)) rcapN1=null;
							if (rcapN2!=null && (rcapN2.seq!=rcap.seq || rcapN2.req!=rcap.req)) rcapN2=null;
							
							if (rcapN2!=null && todayCode>=rcapN1.d1) {
								// next scenario is now relevant.
								// move to next one.
								continue;
							}
							
							lastSeq=rcap.seq;
							lastReq=rcap.req;
							
							var tense=0; // past present future
							var dd1=rcap.d1;
							var dd2=null;
							var dm=desc;//MM.findReqGroupDesc(rcap.req);
							var dc=rcap.cap;
							if (rcapN1!=null) {
								if (rcap.d1==todayCode) {
									// Today
									dd2=rcapN1.d1
								} else if (rcap.d1<todayCode) {
									if (rcapN1.d1<=todayCode) {
										// Yesterday - Yesterday/Today
										if (rcapN1.cap==0) {
											// Done
											capInfo="";
											tense=-1;
											dd2=rcapN1.d1
											// inactivate (See: campus solutions Defining Class Reserve Capacity)
											ri=9999;
										} else {
											dd1=rcapN1.d1;
											dc=rcapN1.cap;
										}
									} else {
										// Yesterday - Tomorrow
										dd2=rcapN1.d1
									}
								} else {
									// Tomorrow - tomorrow
									tense=1;
									dd2=rcapN1.d1
								}
							} else {
								if (todayCode<rcap.d1) {
									tense=1;
								}
							}
							
							if (hideCapsNotNow) {
								if (tense!=0) {
									continue;
								}
								if (hideCapsStartDate) dd1=null;
								if (hideCapsEndDate) dd2=null;
							}
							
							capInfo += "<div class='rcapInfo'>";
							capInfo += dc;
							if (tense==-1) {
								capInfo += " seats were reserved ";	
							} else if (tense==0) {
								capInfo += " seats reserved ";
							} else if (tense==1) {
								capInfo += " seats will be reserved ";
							}
							if (dd2==dd1) {
								if (dd1) {
									capInfo += "on ";
								}
							} else {
								if (dd2==null) {
									capInfo += "from ";
								}
							}
							
							if (dd1) {
						    	var ymd = new YearMonthDay(dd1);
						    	capInfo += getMonth2(ymd.m)+" "+ymd.d;
							}
							if (dd2 && dd1!=dd2) {
						    	var ymd = new YearMonthDay(dd2);
						    	capInfo += " - "+getMonth2(ymd.m)+" "+ymd.d;
							}
							if (dm) {
								capInfo += ": "+dm;
							}
							capInfo+="</div>";
						} 
					}
					
					var reqInfo="";
					if (showCourseReqInLegend && b==0 && sel.course.rgs.length>0 && sel.course.rdesc.length>0) {
						if (sel.ucr && !hideReqInLegendIfAllSame) {
							// Only if class uses course requirement
							reqInfo+=sel.course.rdesc+"<br/>";
						}
					}
					if (!hideAssReqInLegend && b==0 && cls.rgs.length>0 && cls.rdesc.length>0) {
						if (!(hideReqInLegendIfAllSame && cnf.cnPro.reqGsVariations==1)) {
							reqInfo+=cls.rdesc+"<br/>";
						}
					}
					
					// Course Attributes & Values
					var attrInfo="";
					if (!hideAttrsInLegend) {
						var disp=prepAttributes(cls.attrs);
						if (disp) {
							attrInfo+="<div class='leftnclear attrInfo'><span class='notes-label'>Course Attributes:</span>"+disp+"</div>";
						}
					}
					
					// Extended Attributes & Values
					var eattrInfo="";
					if (extNotesInLegend) {
						for (var att in cls.eattrs) {
							var pa=prepExtAttribute(att,cls.eattrs[att]);
							if (pa==null) continue;
							eattrInfo+="<div class='leftnclear eattrInfo' title=\""+pa.hoverTitle+"\"><span class='notes-label'>"+pa.title+":</span>"+pa.disp+"</div>";
						}
					}

					leg += "<tr><td colspan='2' class='notes'>";
					leg += attrInfo;
					leg += eattrInfo;
					if(template == "ualberta"){
						leg += "<strong class='leftnclear type_block'>Class Remarks:</strong>";
					}
					leg += "<div class='leftnclear'>"+capInfo+"</div>";
					leg += "<div class='leftnclear'>"+notesDisp+"</div>";
					leg += "<div class='leftnclear'>"+reqInfo+"</div>";

					if(cls.txtb){
						//var arr = jQuery.parseJSON(cls.txtb);
						//leg += "<div class=\"mdl-tooltip\" for=\"show_books_tip_"+ci+"_"+i+"\">"+arr.length+" textbook"+(arr.length>1?"s":"")+". Click to show/hide details</div>";
						//leg += "<button class='tbkbutton rightnclear' onclick='$(this).parents(\".course_box\").toggleClass(\"show-books\");' title='Toggle textbook information' id='show_books_tip_"+ci+"_"+i+"'>";
						//leg += "<i class='fas fa-books'></i>";
						//leg += "<span class='tbk-cnt'>"+arr.length+"</span>";
						//leg += "</button>"; // button clashes with radio label
						leg+=renderTextBook(cls.txtb);
					}
					
					if (cls.examblocks) {
						for (var ex of cls.examblocks) {
							leg+="<span class='leftnclear'>"+ex+" </span>";
						}
					}

					leg += "</td></tr>";

				}

				leg += "</table></div>";
				leg += "<div style=\"clear:both;\"></div>";

				//leg += sel.key;
				leg += "</div></label>"; // end of selection_row
				lastCnf = selPro.cnf;
			}

			if(selProsOrdered.length>1 && !(oneShotEnrollment && hasEnrolledCourse())) {
				var sim="";
				if(hideShowResultsCount-1==1) {
					sim=i8n.s("showSimilarOption",(hideShowResultsCount-1));
				} else {
					sim=i8n.s("showSimilarOptions",(hideShowResultsCount-1));
				}
				leg+="<div class=\"toggleExtra\">"
				leg+='<div style="display:flex;justify-content:center;" class="selectmorebutton">';
				leg+='		<button class="mdl-button mdl-js-button similar-options-button expand-button expanded" aria-label="expand similar options" onclick="toggleExtraSelections(this,true,'+(selProsOrdered.length>10)+',true);return false;">';
				leg+='			<span class="show_down" style="display:none">'+sim+'</span><span class="show_up">'+i8n.hideSimilarOptions+'</span><i class="far fa-angle-down"></i>';
				leg+='		</button>';
				leg+='</div>';
				leg+="</div>";
			}
		}

		if (cnfs.length>0) {
			leg += "</div></div></div>"; // <td>course_cell_legend, <table>legend_table
			leg += "</div>"; // course_box
		}
		
		leg += "<div id=\"xcrnListInfos\" class='hide50'></div>";
		if (result.selPros.length>0) {
			leg+="<div id=\"xcrnListWarnings\" class='hide50'></div>";
		}
		
		if (enrollTypeNow!="real") {
			// Show the list of CRNs
			var info="";
			info+="<div id=\"crnList\"><img src=\"images/cart.gif\" id=\"cart_icon\" style=\"vertical-align:middle;\" alt=\"cart icon\"/> &nbsp;<span class=\"crn_label accessOffOnly\">"+i8n.crn+"s:</span><span class=\"class_label\">Classes:</span> &nbsp;";
			info+="<label for=\"cartCrns\"><h3 class=\"accessOnly\">Schedule "+i8n.crn+"s</h3></label>";
			if(template == 'york'){
				info+="<textarea rows=\"4\" id=\"cartCrns\" autocomplete=\"off\"/></textarea>";
			} else {
				info+=" <input type=\"text\" id=\"cartCrns\" autocomplete=\"off\"/>";
			}
			info+="</div>";
			$("#crnListCrns").html(info);
			
			var info="";
			if (crnHelpText.length>0) {
				info+="<div class=\"bubble\" id=\"step4bubble\">";
				info+="<div class=\"tip_top\"><i class=\"fa fa-caret-up\"></i></div>";
				info+="<img src=\"images/step_arrow_north.png\" alt=\"Up arrow for instructions\" class=\"pull-right phone step_arrow\"/>";
				if (isAdvising) {
					info+=i8n.crnHelpTextWhenAdvising;	
				} else {
					info+=i8n.crnHelpText;
				}
				if (usingQuotes && !useLeafCartItemId && !disableRel12Parenthesis) {
					info+=i8n.numberBetweenAreSelectable;
				}
				info+="</div>";
			}
			$("#crnListHelp").html(info);
		}

		$divLegend.html(leg);
		componentHandler.upgradeDom(null,"legend-radio-cont");
		
		$(".fee_report_button").click(function () {
			openFeeReportClick(result);
		});
		
		$(".sel_radio").click(function() {
			//var selkey=$(this).data("selkey");
			//var cnfid=$(this).data("cnfid");
			//var selPro=gState.getSelPro(cnfid,selkey);
			UU.caseChangeSelection(gState);
		});

		function renderTextBook(data){
			var txtbookDiv = "<div class='leftnclear legend-textbooks'>";
			var arr = jQuery.parseJSON(data);
			$.each(arr , function(index, item) {
				txtbookDiv += "<div class='tbk-area' title='"+item.notes+"'> ";
				txtbookDiv += "<i class='fas fa-book'></i> <strong>"+item.material+"</strong> ";
				txtbookDiv += "<span class='tbk-label'>Title:</span><span class='tbk-desc'>"+item.title+"</span> ";
				txtbookDiv += "<span class='tbk-label'>Author:</span><span class='tbk-desc'>"+item.author+"</span> ";
				txtbookDiv += "<span class='tbk-label'>Publisher:</span><span class='tbk-desc'>"+item.pub+"</span> ";
				txtbookDiv += "<span class='tbk-label'>Publish Year:</span><span class='tbk-desc'>"+item.pubYear+"</span> ";
				txtbookDiv += "<span class='tbk-label'>Edition:</span><span class='tbk-desc'>"+item.edition+"</span> ";
				txtbookDiv += "<span class='tbk-label'>Price:</span><span class='tbk-desc'>"+item.price+" "+item.currency+"</span> ";
				txtbookDiv += "</div>"
			});
			
			txtbookDiv += "</div>";
			return txtbookDiv;
		}
		
		$(".enroll_by_url").click(function() {
			
			if (i8n.enrollAlert && i8n.enrollAlert.length>0) {
				var now=(new Date()).getTime();
				if (now<enrollOkAfterTime) {
					var sec=""+Math.floor((enrollOkAfterTime-now)/10000)+"0";
					$(".enroll_alert").html(i8n.s("enrollAlert",sec)).show();
					if (enrollAlertHider) {
						clearTimeout(enrollAlertHider);
					}
					enrollAlertHider=setTimeout(function() {$(".enroll_alert").fadeOut()},4000);
					return;
				}
				enrollOkAfterTime=now+60000;
			}
			
			function completeEnrollmentByUrl() {
				var cs=$("#cartCrns").val().trim();
				if (sendNonEnrolledOnly) {
					cs=$("#cartCrns").data("crnsToAdd").trim();
				}
				var ids=cs.split(" ");
				for (var i=0;i<ids.length;i++) {
					ids[i]=ids[i].replace("(","");
					ids[i]=ids[i].replace(")","");
				}
				var ids2=ids.join();
				if (typeof custEnrollUrl == "function") {
					custEnrollUrl(ids2,userPidm,adviseePidm);
				} else {
					alert("no custEnrollUrl defined");
				}				
			}
			
			RR.custUserAgreement(function(){completeEnrollmentByUrl();}, "COMPLETE_ENROLLMENT_BY_URL");
			
		});
		
		$("#crnList").toggle(result.selPros.length>0);
		$("#step4bubble").toggle(result.selPros.length>0);
		$("#crnListButtons").toggle(BB.activeState.getVisibleCnfs().length>0);
		setTimeout(function() {$(".block-ripple").removeClass("block-ripple");},50);
		
		selectDefaultRadios(gState);
		radiosToCrnList(gState,result);
	}
	
	this.applyRadioToCrnList = function(gState) {
		radiosToCrnList(gState);
	}
	
	// FIXME This function slows the whole UI. Use CSS instead.
	this.initToggleExtraSelections = function(reset) {
		$divLegend.find(".course_box").each(function() {
			var nb=$(this).find(".sel_radio").length;
			var showExtraDefault=dontCollapseSimilar||nb<=1||($(".check_media").width()>=1200 && nb<=2);
			if (defaultNoCollapse) {
				showExtraDefault=true;
				if ($(this).find(".bcpin").length>0) {
					showExtraDefault=false;
				}
			}
			var $sr=$(this).find(".selection_row").first();
			var cnfid=$sr.data("cnfid");
			var selkey=$sr.data("selkey");
			var selPro=BB.activeState.getSelPro(cnfid,selkey);
			if (selPro!=null) {
				var uselPro=selPro.uselPro;
				if (reset || typeof uselPro.showExtras==='undefined') {
					uselPro.showExtras=showExtraDefault;
				}
			}
			
			toggleExtraSelections($(this).find(".sel_radio"),false,true,false);
		});
		PAGES.safariSettle();
	}

	function selectDefaultRadios(gState) {
		
		$divLegend.find(".course_box").each(function() {
			
			// Use current CodeNumberFilter.cs values as default radio selection
			var done=false;
			var $sr=$(this).find(".sel_radio").each(function () {
				var selkey=$(this).data("selkey");
				var cnfid=$(this).data("cnfid");
				var selPro=gState.getSelPro(cnfid,selkey);
				if (selPro.isChosen()) {
					setMdlCheck($(this),true);
					done=true;
					return false;
				}
			});

			if (!done) {
				// URL and wanted data param did not specify Selection.
				// Get a random one - preferring
				// open (g), then waitlistable (y),
				// then closed (r).
				var p=null;
				var g=new Array();
				var y=new Array();
				var r=new Array();
				var nb=0;
				$(this).find(".sel_radio").each(function() {
					if ($(this).data("pri")=="1") {
						p=$(this);
					}
					var c=$(this).data("color");
					if (c=="red") r.push($(this));
					if (c=="yellow") y.push($(this));
					if (c=="green") g.push($(this));
					nb++;
				});
				if (p!=null) {
					p.prop("checked",true);
				} else if (g.length>0) {
					setMdlCheck(g[(randomizeLegendSelection?getOnceRandomInt(0,g.length-1):0)],true);
				}
				else if (y.length>0) {
					setMdlCheck(y[(randomizeLegendSelection?getOnceRandomInt(0,y.length-1):0)],true);
				}
				else if (r.length>0) {
					setMdlCheck(r[(randomizeLegendSelection?getOnceRandomInt(0,r.length-1):0)],true);
				}
			}
		});
		
		self.initToggleExtraSelections();
	}
	
	
	// Returns a random integer between min (inclusive) and max (inclusive)
	function getRandomInt(min, max) {
	    return Math.floor(Math.random() * (max - min + 1)) + min;
	}

	var randos=null;
	function getOnceRandomInt(min, max) {
		if ((max-min)>20 || (max-min)<0) return getRandomInt(min,max);
		if (randos==null) {
			randos=new Array();
			for (var i=0;i<=20;i++) {
				randos[i]=getRandomInt(0,i);
			}
		}
		return randos[(max-min)]+min;
	}
	
	

	function radiosToCrnList(gState,result) {
		var crns="";
		var crnsToAdd="";
		var dropCrns="";
		var warning=false;
		var noRadios=true;
		var honTotal=0;
		var creTotal=0;
		var creTotalMax=0;
		var apUnitTotal=0;
		var apTotal=0;
		var isOff=false;
		
		// Clear selections (necessary for proper favoriting)
		for (var i=0;i<gState.cnfs.length;i++) {
			gState.cnfs[i].cs="";
		}
		
		creTotalInst=[];
		$(".course_box").each(function() {
			var $r=$(this).find(".sel_radio:checked");
			if ($r.length<=0) {
				$r=$(this).find(".sel_radio");
			} else {
				noRadios=false;
			}
			
			var col=$r.data("color");
			var selkey=$r.data("selkey");
			var cnfid=$r.data("cnfid");
			var selPro=gState.getSelPro(cnfid,selkey);
			
			var c=$r.data("crns");
			if (selPro.cnf.drop.indexOf("dp_")==0) {
				// course will be dropped
				if (dropCrns.length>0) dropCrns+=" ";
				dropCrns+=c;
				return;
			}
			if ($(this).hasClass("to_drop")) {
				// course is toggled off
				return;
			}
			if (crns.length>0) crns+=" ";
			crns+=c;
			if (selPro.sel.key!=selPro.cnf.enr) {
				// CRNs not enrolled yet
				if (crnsToAdd.length>0) crnsToAdd+=" ";
				crnsToAdd+=c;
			}

			// Set cs values based on radio selection
			selPro.cnf.cs=selkey;
			honTotal+=+selPro.sel.hon;
			creTotal+=+selPro.sel.credits;
			creTotalMax+=+selPro.sel.creditsMax;
			apUnitTotal+=+selPro.sel.apUnits;

			// Enrollment Encouragement credits
			if (EE.studentDetail && EE.studentDetail.terms && EE.studentDetail.terms.length && (countNonEnrolledEECredits || selPro.cnf.enr.length)) {
				var institution = selPro.sel.inst;
				var ac = selPro.sel.course.ac;
				var key = institution + '-' + ac;
				var prog;
				var plan;
				
				
				// Find plan and program
				var sct = EE.studentDetail.terms.filter(function(item) {
					return lenientEquals(item.term.institution,institution) && lenientEquals(item.term.acadCareer,ac); 
				})
	
				if (sct.length>0 && sct[0].studentCareerTerms.length>0) {
					prog = sct[0].studentCareerTerms[0].acadProg; // Eek - this is an assumption
					plan = sct[0].studentCareerTerms[0].acadPlan;
				} else {
					if (institution) {
						// This is a PeopleSoft school. This shouldn't happen.
						console.error("Found no studentCareerTerm for "+key+" for " + (selPro.cnf.enr.length>0?"enrolled":"non-enrolled") + " selection " + selPro.sel.key);
					}
				}
				var c = creTotalInst.filter(function(item) {
					return item.institution === institution
						&& item.ac === ac
						&& item.prog === prog
						&& item.plan === plan;
				})
				
				if (c.length){
					c[0].credits += +selPro.sel.credits
				} else {
					creTotalInst.push({
						institution: institution,
						ac: ac,
						prog: prog,
						plan: plan,
						credits: +selPro.sel.credits
					});
				}
			}
			
			if (selPro.sel.ot.indexOf("f")>=0) isOff=true;
			if (col!="green" && selPro.cnf.enr=="") warning=true;
			
		});
		
		UU.loadEnrollmentEncouragement();
		
		$("#cartCrns").val(crns).data("crnsToAdd",crnsToAdd);
		
		
		if (gState==BB.activeState) {
			// We need to redraw in case
			// room numbers change or we
			// need to show campus warning
			if (!result) {
				result = gState.sortedFilteredResults[BB.r];
			}
			schedule.draw(result,gState);
			if ($(".reg_schedule2").hasClass("using")) {
				schedule2.draw(result,gState);
			}
		}
		
		var warnMsg="";
		if (notYetEnrolledNotice && !isAdvising) {
			warnMsg += "<div class=\"crnListWarning crnListWarningInfo not_already_have\">"+i8n.s("notYetEnrolled",isAdvising?i8n.studentIs:i8n.youAre)+"</div>";
		}
		warnMsg += "<div class=\"crnListWarning crnListWarningGood already_have\">"+i8n.s("alreadyEnrolledFor",isAdvising?i8n.studentIs:i8n.youAre)+"</div>";
		warnMsg += "<div class=\"crnListWarning crnListWarningBad not_meet_compulsory\">This schedule does not follow the mandatory plan assigned for this term. ";
		if (!isAdvising) {
			warnMsg += "To proceed, <span class=\"more_than_permitted\" style=\"display:none\">toggle off courses that are not permitted, or </span> <a href='javascript:void(0)' onclick='clearSearch();' style='text-decoration:underline'>start over</a> and select the plan.";	
		}
		warnMsg += "</div>";
		if (warning) {
			warnMsg+="<div class=\"crnListWarning some_full_classes_selected\">"+i8n.warningNotAllclasses +(noRadios?"":"selected ")+i8n.aboveHaveSeatsAvailable+"</div>";
		}
		if (isOff) {
			warnMsg+="<div class=\"crnListWarning\">"+i8n.warningOffCampus+"</div>";
		}
		if (schedule.campusChangeWarning || (schedule2!=null && schedule2.campusChangeWarning)) {
			warnMsg+="<div class=\"crnListWarning\">"+i8n.s("campusChange",minCampusSwitchTime)+"</div>";
		}
		if (overlapWarning) {
			
			var extra="";
			var rewrite=false;
			
			var nonOverlapResults = gState.reasons.nonOverlapResults;
			
			if (nonOverlapResults<gState.sortedFilteredResults.length) {
				if (nonOverlapResults>1) {
					extra=""+i8n.theFirst+" "+nonOverlapResults+" "+i8n.scheduleResultsDoNot+"";
				} else if (nonOverlapResults==1){
					extra=i8n.firstScheduleResult;
				} else {
					rewrite=true;
				}
			}
			
			warnMsg+="<div class=\"crnListWarning\">";
			if (rewrite) {
				warnMsg+=i8n.overlapsPersonalTime;
			} else {
				warnMsg+=i8n.overlapsNotWantClasses+extra;	
			}
			warnMsg+="</div>";
		}
		if (BB.activeState.filters.hideNoHonors && honTotal==0) {
			warnMsg+="<div class=\"crnListWarning\">"+i8n.selectAtleastOne+"</div>";
		}
		if (creTotal==creTotalMax) {
			if (minFullTimeCredits>0 && creTotal<minFullTimeCredits) {
				warnMsg+="<div class=\"crnListWarning\">"+i8n.s("noticeUnderMinCredits",creTotal,minFullTimeCredits)+"</div>";
			}
			if (maxFullTimeCredits>0 && creTotal>maxFullTimeCredits) {
				warnMsg+="<div class=\"crnListWarning\">"+i8n.s("noticeOverMaxCredits",creTotal,maxFullTimeCredits)+"</div>";
			}
		}
		if (dropCrns.length>0 && (isAdvising?enrollTypeWhenAdvising:enrollType)!="real") {
			warnMsg+="<div class=\"crnListWarning\">"+i8n.s("dropCrns",dropCrns)+"</div>";
		}

		var cd="";
		if (creTotal!=0||apUnitTotal!=0) {
			cd+="<div class=\"crnListInfo credits_block\">"+i8n.totalCredits+": ";
			
			var d=creTotal.toFixed(2);
			if (d.charAt(d.length-1)=="0") {
				d=creTotal.toFixed(1);
			}
			if (creTotalMax!=creTotal) {
				var d1=creTotalMax.toFixed(2);
				if (d1.charAt(d1.length-1)=="0") {
					d1=creTotalMax.toFixed(1);
				}
				d+=" - "+d1;
			}
			cd+="<span title='Units'>"+d+"</span>";
			
			if (apUnitTotal>0 && !hideAPUnits) {
				var d2=apUnitTotal.toFixed(2);
				if (d2.charAt(d2.length-1)=="0") {
					d2=apUnitTotal.toFixed(1);
				}
				cd+="/<span title='Academic Progress Units'>"+d2+"</span>";
			}
			cd+= " "+i8n.totalCreditsPostscript;
			cd+="</div>";
			
		}
		
		if (enableCohort) {
			var coScore=result.scores[7];
			coScore=Math.round(coScore,1);
			if (coScore>=1000) coScore-=1000;
			cd+="<div class=\"crnListInfo legend_score\" title=\""+i8n.cohortRatingDesc+"\">Cohort Rating: "+coScore+"/"+gState.getCohortness().max+"</div>";
		}
		$("#crnListInfos").html(cd);
		
		
		$("#crnListWarnings").html(warnMsg);
		
		//if (template=="demo") {
		//	$("#crnListInfos").append("<a target=\"_blank\" style=\"text-align: center;display: block;\" href=\""+baseUri+"EMPLOYEE/HRMS/c/SA_LEARNER_SERVICES.SS_TRCR_RPT.GBL?FolderPath=PORTAL_ROOT_OBJECT.CO_EMPLOYEE_SELF_SERVICE.HCCC_TRANSFER_CREDIT.HC_SS_TRCR_RPT_GBL&IsFolder=false&IgnoreParamTempl=FolderPath%2cIsFolder&szCrefClick=T\"><img style=\"vertical-align:top\" src=\"images/popup.gif\"/>&nbsp;Excess Credit Hour Counter</a>");
		//}

		if (isAuthenticated) {
			var change=(dropCrns.length>0||crnsToAdd.length>0);
			$(".enroll_by_url").prop("disabled",!change);
			$(".already_have").toggle(!change);
			$(".not_already_have").toggle(change);
		}
		$(".not_signed_in_message").toggle(isAuthentication && !isAuthenticated);
		
		flagIfHaveAlready(gState);

	}
	

	//Check if we already are enrolled for this whole schedule.
	function flagIfHaveAlready(gState) {
		var haveAll=true;
		var itemInCart=false;
		var visItemInCart=false;
		var cnfs=gState.cnfs;
		for (var i=0;i<cnfs.length;i++) {
			var cnf=cnfs[i];
			if (!cnf.ignore && cnf.cart.length>0) {
				itemInCart=true;
			}
			if (!cnf.ignore && cnf.cart==cnf.cs && cnf.cs!="") {
				visItemInCart=true;
			}
			if (cnf.cs==cnf.enr && cnf.drop.indexOf("dp")!=0) {
				continue;
			}
			haveAll=false;
			break;
		}
		
		var enrollable=true;
		var term=EE.terms[BB.activeState.term];
		if (term && !term.enrollable) {
			enrollable=false;
		}
		
		var enrollBlocked=GG.isActiveTermBlocked();
		var meetsC=UU.meetsCompulsory(gState.term);
		
		$(".already_have").toggle(haveAll && authenticated);
		$(".not_already_have").toggle(!haveAll && authenticated);
		
		var b1Title=i8n.automaticallyAddDropSwap;
		var b2Title="Find out if you are eligible to enroll for the classes in your cart";
		if (enrollBlocked) {
			b1Title=i8n.cannotEnroll;
		}
		if (!enrollable) {
			b1Title=i8n.noTermEnroll;
		}
		if (haveAll) {
			b1Title=i8n.s("alreadyEnrolledFor",isAdvising?i8n.studentIs:i8n.youAre);
		}
		if (itemInCart & !visItemInCart) {
			b2Title="This schedule does not use any of the classes in your cart";
		}
		if (!itemInCart) {
			b2Title="Your cart is empty";
		}
		if (isAdvising) {
			b2Title="Advisors cannot validate the cart of an advisee (technical limitation)";
		}
		$(".not_meet_compulsory").toggle(meetsC>0);
		$(".more_than_permitted").toggle(meetsC==2);
		
		if (!authenticated) {
			b1Title=i8n.youAreNotSigned;
			b2Title=i8n.youAreNotSigned;
		}
		
		var hasUnselectedElective = wildcardDefaultNoSelection && cnfs.filter(function (cnf){
					return cnf.options && cnf.options.length && !cnf.studentSelected;
				}).length;
		if (hasUnselectedElective) {
			b1Title="You must choose a course for every elective under 'Select Courses'";
		}
		
		$(".button_get_schedule").prop("disabled",enrollBlocked || !enrollable || haveAll || !authenticated || (meetsC>0 && !isAdvising) || hasUnselectedElective).attr("title",b1Title);
		$(".button_validate_cart").prop("disabled",haveAll || !enrollable || !authenticated || isAdvising || !visItemInCart || (meetsC>0 && !isAdvising)).attr("title",b2Title);
		
		return haveAll;
	}	
	
}


function toggleExtraSelections(src,doToggle,instant,doSettle) {
	var slideTime=instant?0:400;
	var $cb=$(src).parents(".course_box");
	
	var $sr=$cb.find(".selection_row").first();
	var cnfid=$sr.data("cnfid");
	var selkey=$sr.data("selkey");
	var selPro=BB.activeState.getSelPro(cnfid,selkey);
	
	var isVisible=false;
	var uselPro=null;
	if (selPro) {
		uselPro=selPro.uselPro;
		isVisible=uselPro.showExtras?true:false;
	}
	if (doToggle) {
		$cb.removeClass("block_animation")
		isVisible=!isVisible;
		if (uselPro) {
			uselPro.showExtras=isVisible;
		}
	}
	if(oneShotEnrollment && hasEnrolledCourse()){
		isVisible = false;
	}
	$cb.find(".show_up").toggle(isVisible);
	$cb.find(".show_down").toggle(!isVisible);
	$cb.find(".expand-button").toggleClass("expanded",isVisible);
	var $or=$cb.find(".selection_or");
	if (isVisible) {
		if (instant) {
			$or.show();	
		} else {
			$or.slideDown(slideTime);
		}
	} else {
		if (instant) {
			$or.hide();
		} else {
			$or.slideUp(slideTime);
		}
	}
	if ($or.length<=0) isVisible=true;
	$cb.find(".vsbselectionnew").each(function () {
		if (!isVisible) {
			if($(this).find(".sel_radio").is(":checked")) {
				return;
			}
		}
		if (isVisible) {
			if (instant) {
				$(this).show();	
			} else {
				$(this).slideDown(slideTime);
			}
		} else {
			if (instant) {
				$(this).hide();	
			} else {
				$(this).slideUp(slideTime);
			}
		}
	});
	if (doSettle) {
		setTimeout(function(){PAGES.safariSettle();},slideTime+10);
	}
}


function addPin(event,cnfid,uselkey,addIt,pinid) {
	if (BB.enrollMode) {
		return;
	}
	
	var selPro = BB.activeState.getSelPro(cnfid,uselkey);
	if (selPro==null) return;
	
	var complete = null;
	if(pinid!='no') {
		complete = function() {
			$('.'+pinid).focus();
		}
	}
	
	UU.casePin(selPro.cnf,addIt,complete);
	
	if (event!=null) event.cancelBubble=true;
	
	
}

function openFeeReportClick(result) {
	
	var crnArray = [],crnArray1=[];
	for(var x=0; x<result.selPros.length;x++){
		var selPro = result.selPros[x];
		if(selPro.cnf.ignore || selPro.cnf.drop.indexOf("dp_")==0){
			continue;
		}
		if(selPro.isChosen()){
			for(var y =0; y<selPro.sel.classes.length;y++){
				var cs = selPro.sel.classes[y];
				crnArray1.push({crn:cs.cartid,credits:Number(cs.credits),courseTitle:selPro.cn.key,classTitle:selPro.cn.title});
				crnArray.push(cs.cartid);
			}
		}
	}
	
	
	var term = BB.activeState.term;
	$('#termFee').text(EE.terms[BB.activeState.term].name);
	
	 window.feeData ={crnArray:crnArray,crnArray1:crnArray1,term:term};
	var popupcontainer = $('#feeReportPopup').popup({
        //width: 650
       //  height: 600
		closeFunction: function() {
			$('.tempNoPrint').addClass('printable').removeClass("tempNoPrint");
		}
    });
	$('#feeTable').hide();
	
	if(isAuthenticated){
		$('#selectStudentType').val('Y').hide();
		$('#FeeCalc').hide();
		loadFeedData(null,prepareFeeTable);
	}else {
		$('#selectStudentType').val(selectStudentTypeValue).show();
		$('#FeeCalc').show();
		if(selectStudentTypeValue!=''){
			loadFeedData(null,prepareFeeTable);
		}
	}
	
	popupcontainer.open();
}

function printFeeReport(){
	$('.printable:not(#feeReportPopup)').addClass('tempNoPrint').removeClass('printable');
	window.print();
}
function selectStudentTypeChange(){
	selectStudentTypeValue = $('#selectStudentType').val();
	if(selectStudentTypeValue == ''){
		return ;
	}
	loadFeedData(selectStudentTypeValue,prepareFeeTable);
}
function prepareFeeTable(data){
	var templateArray = ['<tr>','<td class="default" nowrap>{{courseTitle}}</td>','<td class="default">{{classTitle}}</td>','<td class="default">{{crn}}</td>','<td class="default"><p class="rightaligntext">{{credits}}</p></td>','<td class="default"><p class="rightaligntext">${{tutionAmount}}</p></td>','<td class="default"><p class="rightaligntext">${{consumableAmount}}</p></td>','<td class="default"><p class="rightaligntext">${{otherAmount}}</p></td>','<td class="default"><p class="rightaligntext">${{totalAmount}}</p></td>','</tr>'];
	var templateArray1 = ['<tr>','<td class="default">&nbsp;</td>','<td class="default">&nbsp;</td>','<td class="default"><strong>Totals:</strong></td>','<td class="default"><p class="rightaligntext">{{totalCredits}}</p></td>','<td class="default"><p class="rightaligntext">${{totalTutionAmount}}</p></td>','<td class="default"><p class="rightaligntext">${{totalCunsumableAmount}}</p></td>','<td class="default"><p class="rightaligntext">${{totalOtherAmount}}</p></td>','<td class="default"><p class="rightaligntext">${{totalTotalAmount}}</p></td>','</tr>'];
	var rows = window.feeData.crnArray1.sort(function (a,b){
		return a.crn>b.crn;
	});
	data = data.sort(function(a,b){
		return a.crn>b.crn;
	});
	
	$('#feeTable tbody').empty();
	var tbody = $('#feeTable tbody'),totalTutionAmount = 0,totalCunsumableAmount =0,totalOtherAmount =0,totalCredits =0,totalTotalAmount = 0;
	for(var i =0; i< data.length;i++){
		var row = rows[i];
		var d= data[i];
		var total =0;
		for(var k in d){
			if(k != 'crn'){
				total +=d[k];
			}
		}
		d.totalAmount = total;
		row = $.extend(row,d);
	
		var template = templateArray.join('');
		
		totalTutionAmount += row.tutionAmount;
		totalCunsumableAmount += row.consumableAmount;
		totalOtherAmount += row.otherAmount;
		totalCredits += parseFloat(row.credits);
		totalTotalAmount += row.totalAmount;
		row.tutionAmount = d.tutionAmount.toFixed(2);
		row.consumableAmount = d.consumableAmount.toFixed(2);
		row.otherAmount = d.otherAmount.toFixed(2);
		row.totalAmount = d.totalAmount.toFixed(2);
		for(var m in row){
			template = template.replace('{{'+m+'}}',row[m]);
		}
		tbody.append(template);
	}
	var template2 = templateArray1.join('');
	var totalsObject = {
			totalTotalAmount:Number(totalTotalAmount).toFixed(2),
			totalCredits:totalCredits.toFixed(1),
			totalOtherAmount:Number(totalOtherAmount).toFixed(2),
			totalCunsumableAmount:Number(totalCunsumableAmount).toFixed(2),
			totalTutionAmount:Number(totalTutionAmount).toFixed(2)
	};
	for(var m in totalsObject){
		template2 = template2.replace('{{'+m+'}}',totalsObject[m]);
	}
	tbody.append(template2);
	$('#loadinfeedata').hide();
	$('#feeTable').show();
}
function loadFeedData(studentype,cb){
	$('#loadinfeedata').show();
	var selectStudentTypeValue = $('#selectStudentType').val();
	$.ajax({
        url: 'api/getFeeReport',
        method: 'post',
        data: {term: feeData.term, payload: feeData.crnArray.join(','),domestic:selectStudentTypeValue}
    }).done(cb);
}

function toggle_visibility(feeReportPopup) {
    var e = document.getElementById(id);
    if(e.style.display == 'block')
       e.style.display = 'none';
    else
       e.style.display = 'block';

 }

/**
 * Checks whether a promissory agreement should be displayed, before proceeding with normal display of the schedule.
 * @returns (void)
 */
function requestScheduleCheckPromissory() {
	RR.custUserAgreement(function() { getScheduleClick(false); },"GET_SCHEDULE_CLICK");
	
	$(".main_menu_button").first().focus();
}

function getScheduleClick(validate,skipValidate) {
	
	if (!skipValidate && forceCartValidation && !validate) {
		var need=false;
		var result=BB.activeState.sortedFilteredResults[BB.r];
		for (var i=0;i<result.selPros.length;i++) {
			var cnf=result.selPros[i].cnf;
			if (cnf.cart.length>0 && cnf.cart!=cnf.cartValidated && cnf.cart==cnf.cs) {
				need=true;
			}
		}
		
		if (need) {
			var msg="<p>You have one or more classes in your cart that have not recently been validated successfully.</p>";
			msg+="<p>These must be validated before they can be enrolled.</p>";
			var buttons=[{name:"Cancel",action:function() {popupNotice.close();}},{name:"Validate Now",action:function() {getScheduleClick(true);}},{name:"Continue Anyway",action:function() {getScheduleClick(false,true);}}];
			RR.popNotice(msg,buttons);
			return;
		}
	}

	$('#results-legend-switch-label')[0].MaterialSwitch.on();
	RR.showLegend();
	
	validate=validate?true:false;
	
	if ($(".page_whiteout").hasClass("blanket")) {
		return;
	}

	var speed=200;
	
	$("body").addClass("get-schedule");
	$(".disable-get-schedule").attr("disabled", true);
	$(".disable-get-schedule").attr("aria-hidden", true);
	$(".disable-get-schedule button").attr("disabled", true);
	$(".disable-get-schedule input").attr("disabled", true);
	$(".disable-get-schedule select").attr("disabled", true);
	$("a.disable-get-schedule").attr("tabindex", "-1");

	$(".page_whiteout").addClass("blurr");
	$(".results-top").addClass("fade-disable");

	$(".reg_parent").toggleClass("validate_mode",validate);
	
	BB.enrollMode = true;
	PAGES.checkLegend();
	$(".button_get_schedule, .button_validate_cart").hide();
	$(".hideDuringEnroll").hide();
	var lw=$(".course_cell_legend").outerWidth(true);
	$(".course_cell_legend").removeClass("one_col").css("width",lw+"px");
	$(".course_box").addClass("no_shadow");
	$(".toggleExtra").hide();
	$(".empty_warning").hide();
	$(".legend_table").css("width","auto");
	var lw2=$(".reg_parent").width()*0.35; // CSS .course_cell_legend
	$(".course_box").addClass("course_box_noround").css("border-width","inherit");
	$(".course_cell_legend").animate({width:lw2},speed,function() {
		$(".course_box").css("border-width","1px").removeClass("no_shadow");;
		$(".reg_legend").css("max-width","none");
		$(".reg_legend").css("overflow","visible");		
	});
	$(".course_header").attr("title","");
	
	$("#crnListInfos").slideUp();
	$("#crnListWarnings").slideUp();

	$(".reg_row1").hide();
	$(".reg_row1_enroll").show();
	$(".selection_or").hide();
	$(".ResultsPageTitle").html("Finalizing Schedule");
	$(".to_drop").slideDown(speed);
	$(".to_drop .vsbselectionnew").slideDown(speed);
	$("input.sel_radio:not(:checked)").parents("label").slideUp(speed);
	
	$(".reg_schedule").slideUp(speed+100,function() {
		$(".button_cancel_schedule").val($("<div>").html("&#9664; "+(validate?i8n.back:i8n.cancel)).text()).show();
		$(".button_to_cart").show();

		var actionId=0;
		var ni=1;
		$(".selection_row:visible").each(function() {
			var selkey=$(this).data("selkey");
			var cnfid=$(this).data("cnfid");
			var selPro=BB.activeState.getSelPro(cnfid,selkey);
			var $row=$(this).parents(".course_cell_legend");
			{
				$row.parents(".course_box").addClass("fsk_"+selkey); // for easy finding later
			}

			//$row.after("<div class='phoneOnly clearfix'></div>");

			var doAction=false;
			
			var ignoreCart=isAdvising;
			
			// See EnrollState.java, method fromXlat
			var stateA="T";
			if (selPro.cnf.cart.length>0&&!ignoreCart) stateA="C";
			if (selPro.cnf.enr.length>0) stateA="E";
			if (selPro.cnf.waiting) stateA="W";
			var stateB="E";
			var h="";
			if (validate) {
				var showload=false;
				var nowm="&nbsp;";
				if (selPro.cnf.cart.length>0) {
					if (selPro.cnf.cart==selkey) {
						showload=true;
					} else {
						nowm="(A different class from this course is in your cart)";
					}
				} else {
					nowm="(Not in Cart)";					
				}
				
				h+="<div class=\"td course_cell_action be"+ni+"\">&nbsp;</div>";
				h+="<div class=\"td course_cell_option be"+ni+"\">&nbsp;</div>";
				h+="<div class=\"td course_cell_result be"+ni+(showload?" loading":"")+"\">"+nowm+"</div>";					
			} else {
				if (selPro.cnf.drop.indexOf("dp_")==0) {
					// Drop or nothing
					if (disableEnroll) {
						h+="<div class=\"td course_cell_action be"+ni+"\">"+i8n.dropNeeded+"<br/>";
						h+="<span class=\"already\">"+i8n.s("dropNeeded2",(stateA=="W"?i8n.waitlisted.toLowerCase():i8n.enrolled.toLowerCase()))+"</span></div>";
						h+="<div class=\"td course_cell_option nothing be"+ni+"\">N/A</div>";
						h+="<div class=\"td course_cell_result nothing be"+ni+"\">N/A</div>";
					} else {
						doAction=true;
						stateB="G";
						h+="<div class=\"td course_cell_action be"+ni+"\">"+i8n.drop+"</div>";
						h+="<div class=\"td course_cell_option be"+ni+" action_drop loading\">Loading...</div>";
						h+="<div class=\"td course_cell_result be"+ni+"\">&nbsp;</div>";
					}
				} else if (selPro.cnf.ignore) {
					// None (If this occurs, we are ignoring a class in the cart, otherwise
					// we would have a drop (dp_) above
					h+="<div class=\"td course_cell_action be"+ni+"\">"+i8n.none+"<br/></div>";
					h+="<div class=\"td course_cell_option nothing be"+ni+"\">N/A</div>";
					h+="<div class=\"td course_cell_result nothing be"+ni+"\">N/A</div>";
				} else if (selPro.cnf.enr.length>0 && selPro.cnf.enr==selkey) {
					// None
					h+="<div class=\"td course_cell_action be"+ni+"\">"+i8n.none+"<br/><span class=\"already\">"+i8n.alreadyEnrolled+"</span></div>";
					h+="<div class=\"td course_cell_option nothing be"+ni+"\">N/A</div>";
					h+="<div class=\"td course_cell_result nothing be"+ni+"\">N/A</div>";
				} else if (selPro.cnf.enr.length>0) {
					// Swap or nothing
					if (disableEnroll) {
						//h+="<div class=\"td course_cell_action be"+ni+"\">"+i8n.swapNeeded+"<br/><span class=\"already\">"+i8n.swapNeeded2+"</span></div>";
						//h+="<div class=\"td course_cell_option nothing be"+ni+"\">N/A</div>";
						//h+="<div class=\"td course_cell_result nothing be"+ni+"\">N/A</div>";
						// Add to cart (despite being enrolled in same class already)
						doAction=true;
						//stateA="T"
						stateB="C";
						h+="<div class=\"td course_cell_action be"+ni+"\">";
						h+=i8n.swapNeededB+"<br/><span class=\"already\">"+i8n.swapNeededB2+"</span>";
						h+="</div>";
						h+="<div class=\"td course_cell_option be"+ni+" action_add loading\">Loading...</div>";
						h+="<div class=\"td course_cell_result be"+ni+"\"></div>";
						
					} else {
						doAction=true;
						h+="<div class=\"td course_cell_action be"+ni+"\">"+((noSwapSupport||selPro.cnf.waiting)?""+i8n.dropAndAdd+"":""+i8n.swap+"")+"</div>";
						h+="<div class=\"td course_cell_option be"+ni+" action_swap loading\">Loading...</div>";
						h+="<div class=\"td course_cell_result be"+ni+"\">&nbsp;</div>";
					}
				} else if (!ignoreCart && selPro.cnf.cart.length>0 && selPro.cnf.cart==selkey){
					// Checkout or nothing
					h+="<div class=\"td course_cell_action be"+ni+"\">";
					if (disableEnroll) {
						stateB="C";
						h+="None<br/><span class=\"already\">"+i8n.alreadyInShopping+"</span>";
						h+="</div>";
						h+="<div class=\"td course_cell_option nothing be"+ni+"\">N/A</div>";
						h+="<div class=\"td course_cell_result nothing be"+ni+"\">N/A</div>";
					} else {
						var cnf=selPro.cnf;
						var pnone=false;
						if (forceCartValidation && cnf.cart!=cnf.cartValidated) {
							pnone=true;
							stateB=stateA;
						} else {
							doAction=true;	
						}
						h+="<select onchange='changeAction(this);' data-revert='"+(pnone?"none":"")+"'>";
						h+="<option value='none' "  +(!pnone?"":"selected='selected'")+">"+i8n.none+"</option>";
						h+="<option value='enroll' "+( pnone?"":"selected='selected'")+">"+i8n.checkoutEnroll+"</option>";
						h+="</select>";
						h+="</div>";
						if (pnone) {
							h+="<div class=\"td course_cell_option nothing be"+ni+"\">N/A</div>";
							h+="<div class=\"td course_cell_result nothing be"+ni+"\">N/A</div>";
						} else {
							h+="<div class=\"td course_cell_option be"+ni+" action_add loading\">Loading...</div>";
							h+="<div class=\"td course_cell_result be"+ni+"\"></div>";
						}
					}
				} else if (!ignoreCart && selPro.cnf.cart.length>0){
					// Drop from Cart and Add to Cart (i.e. cart swap) OR
					// Drop from Cart and Enroll
					doAction=true;
					h+="<div class=\"td course_cell_action be"+ni+"\">";
					if (disableEnroll) {
						stateB="C";
						h+=i8n.swapInCart;
					} else if (disableCart) {
						h+="Enroll";
					} else {
						if (forceCartValidation) stateB="C";
						h+="<select onchange='changeAction(this);' data-revert='cart'>";
						h+="<option value='cart' "  +(!forceCartValidation?"":"selected='selected'")+">"+i8n.swapInCart+"</option>";
						h+="<option value='enroll' "+( forceCartValidation?"":"selected='selected'")+">"+i8n.enroll+"</option>";
						h+="</select>";	
					}
					h+="</div>";
					h+="<div class=\"td course_cell_option be"+ni+" action_add loading\">Loading...</div>";
					h+="<div class=\"td course_cell_result be"+ni+"\"></div>";
				} else {
					// Add to cart or Enroll
					doAction=true;
					h+="<div class=\"td course_cell_action be"+ni+"\">";
					if (disableEnroll) {
						stateB="C";
						h+="Add to Cart";
					} else if (disableCart) {
						h+="Enroll";
					} else {
						if (forceCartValidation) stateB="C";
						h+="<select onchange='changeAction(this);' data-revert='cart'>";
						h+="<option value='cart' "  +(!forceCartValidation?"":"selected='selected'")+">"+i8n.addToCart+"</option>";
						h+="<option value='enroll' "+( forceCartValidation?"":"selected='selected'")+">"+i8n.enroll+"</option>";
						h+="</select>";	
					}
					h+="</div>";
					h+="<div class=\"td course_cell_option be"+ni+" action_add loading\">Loading...</div>";
					h+="<div class=\"td course_cell_result be"+ni+"\"></div>";
				}
			}
			$row.after(h);

			PAGES.settleCheckout();
			
			if (!validate && doAction) {
				var $cb=$row.parents(".course_box");
				
				var keyA=selkey;
				if (selPro.cnf.cart.length>0) keyA=selPro.cnf.cart;
				if (selPro.cnf.enr.length>0) keyA=selPro.cnf.enr;
				var keyB=selkey;
				$cb.data2("stateA",stateA);
				$cb.data2("stateB",stateB);
				$cb.data2("keyA",keyA);
				$cb.data2("keyB",keyB);
				$cb.data2("doAction",doAction);
			}

		});
		
		//header annotations for accessibility improvements:
		$(".course_cell_action").each(function() {
				$(this).prepend("<h4 class='visuallyhidden' aria-label='Available Course Actions'></h4>");	
		});
		
		if (maximizeSwap) {
			maximizeSwapInRows();
		}
		
		if (validate) {
			fillValidation();
		} else {
			$(".selection_row:visible").each(function() {
				var $cb=$(this).parents(".course_box");
				fillOptions($cb);	
			});
		}
		//header annotation for accessibility improvements:
		$(".course_cell_result").each(function() {
				$(this).prepend("<h4 class='visuallyhidden' aria-label='Course action results.'></h4>");	
		});
		$("#legend_headers").fadeIn(speed);
		$("#page_results")[0].scrollIntoView(); // Help Safari scroll up
		
	});
}

// Determines row(s) which can be swapped from and to
// and assigns data to keep track of this. Also
// keeps track of changes so we know which rows to
// update via AJAX options call.
function maximizeSwapInRows() {
	var doOptsUpdate=[];
	var toAddSelPros={};
	var toDropSelPros={};
	$(".selection_row:visible").each(function() {
		var bucket=$(this).data("inst")+"_"+$(this).data("ac");
		// Each institution and acad_career is a separate enrollment bucket
		if (!toAddSelPros[bucket]) {
			toAddSelPros[bucket]=[];
		}
		if (!toDropSelPros[bucket]) {
			toDropSelPros[bucket]=[];
		}
		var selkey=$(this).data("selkey");
		var cnfid=$(this).data("cnfid");
		var selPro=BB.activeState.getSelPro(cnfid,selkey);
		var $cb=$(this).parents(".course_box");
		var stateA=$cb.data2("stateA");
		var stateB=$cb.data2("stateB");
		
		var swapFrom=$cb.data("swapFrom");
		var swapTo=$cb.data("swapTo");
		$cb.removeData("swapFrom");
		$cb.removeData("swapTo");
		
		if (!swapFrom) {
			$cb.removeData("oldSwapFrom");
		} else {
			$cb.data("oldSwapFrom",swapFrom);
		}
		if (!swapTo) {
			$cb.removeData("oldSwapTo");
		} else {
			$cb.data("oldSwapTo",swapTo);
		}
		
		$cb.find(".swap_override").remove();
		if (stateA=="E" && stateB=="G") {
			toDropSelPros[bucket].push(selPro);
		}
		else if (stateA=="T" && stateB=="E") {
			toAddSelPros[bucket].push(selPro);
		}
	});
	for (var b in toAddSelPros) {
		for (var i=0;i<toDropSelPros[b].length&&i<toAddSelPros[b].length;i++) {
			var dSelPro=toDropSelPros[b][i];
			var aSelPro=toAddSelPros[b][i];
			$(".course_box.fsk_"+dSelPro.sel.key+" .course_cell_action").html(i8n.drop+"<span class=\"swap_override\">*<br/><span class=\"swap_override_msg\">*Swapping for "+aSelPro.cn.code+" "+aSelPro.cn.number+"</span></span>");
			$(".course_box.fsk_"+aSelPro.sel.key).data("swapFrom",dSelPro);
			$(".course_box.fsk_"+dSelPro.sel.key).data("swapTo",aSelPro);
		}
	}
	// Determine which rows are now outdated
	$(".selection_row:visible").each(function() {
		var $cb=$(this).parents(".course_box");
		if ($cb.data("oldSwapFrom")!=$cb.data("swapFrom") || $cb.data("oldSwapTo")!=$cb.data("swapTo")) {
			var selkey=$(this).data("selkey");
			doOptsUpdate.push(selkey);
		}
	});
	return doOptsUpdate;
}

//Update options for given ".course_box" div
function fillOptions($cb) {
	
	var renderButton = function () {
		if ($(".loading").length<=0 && $(".option_good").length>=1) {
			$(".button_do_actions").show();
		}
		if ($(".loading").length<=0 && $(".option_pin_invalid").length>=1) {
			$(".button_enter_pin").show();
			userPinPopup();
		}
	}
	
	$(".button_do_actions").hide();
	$(".button_enter_pin").hide();
	
	var $tdiv=$cb.find(".course_cell_option");
	var $tdivr=$cb.find(".course_cell_result");
	var stateA=$cb.data2("stateA");
	var stateB=$cb.data2("stateB");
	
	var nothing=false;
	if ($cb.data("swapTo") || !$cb.data2("doAction")) {
		nothing=true;
	}
	
	if (nothing) {
		$tdiv.html("N/A").addClass("nothing").removeClass("loading");
		$tdivr.html("N/A").addClass("nothing");
	} else {
		$tdiv.html("").removeClass("nothing").addClass("loading");
		$tdivr.html("").removeClass("nothing");
		var keyA=$cb.data2("keyA");
		var keyB=$cb.data2("keyB");
		
		var swapFrom=$cb.data("swapFrom");
		if (swapFrom) {
			keyA=swapFrom.sel.key;
			stateA="E";
		}
		
		var expect=Math.random();
		$tdiv.data("expect",expect)
		
		// Get the options HTML
		var url="api/enroll-options?statea="+stateA+"&keya="+keyA+"&stateb="+stateB+"&keyb="+keyB;
		$.ajax({
			type: "GET",
			url: url,
			cache: false
		}).fail(function(jqXHR, textStatus, errorThrown){
			$tdiv.removeClass("loading").removeClass("nothing");
			$tdiv.html("Error: "+(jqXHR.status==0 ? "Connection timeout. Verify Network and try again." : (jqXHR.status+" - "+textStatus))+"<br/>"+errorThrown+"<br/>on "+(new Date())+" with "+userId);
		}).done(function(html) {
			var e2=$tdiv.data("expect");
			if (e2!=expect) {
				// Skip insertion of option from old action
				return;
			}
			$tdiv.removeClass("loading");
			// Workaround:
			html=html.replace("StudentEnrollmentOptionRequest - STRM(SSR_ENRL_REQ.STRM)   Invalid value - Check and try again","You are not eligible to enroll at this time");
			$tdiv.html(html);
			$tdiv.find(".i8ncancel").html(i8n.cancelWarning);
			$tdiv.find(".i8nwithdraw").html(i8n.withdrawWarning);
			if(typeof custDetailedWithdrawlWarnings == "function"){
			   custDetailedWithdrawlWarnings();
			}
			//header annotation to improve accessibility:
			$(".course_cell_option").each(function() {
				$(this).prepend("<h4 class='visuallyhidden' aria-label='Available Course Options'></h4>");	
			});
			renderButton();
		});
	}
	renderButton();
	
}


function fillValidation() {
	
	// Get the options HTML
	var url="api/processValidationRequest?term="+BB.activeState.term;
	$.ajax({
		type: "GET",
		url: url,
		cache: false
	}).fail(function(jqXHR, textStatus, errorThrown){
		var prob="Error: "+(jqXHR.status==0 ? "Connection timeout. Verify Network and try again" : (jqXHR.status+" - "+textStatus))+"<br/>"+errorThrown+"<br/>on "+(new Date())+" with "+userId;
		$(".course_box .course_cell_result").html(prob).removeClass("loading").removeClass("nothing");
	}).done(function(html) {
		
		html="<div>"+html+"</div>";		
		var a=$(html).find(".validateResult");
		a.each(function() {
			var fsk=$(this).data("fsk");
			
			var $cb=$(".course_box.fsk_"+fsk+" .course_cell_result");
			$cb.html($(this).html()).removeClass("loading")
			
			var bad=$(this).hasClass("validate_bad");
			$cb.toggleClass("validate_bad",bad);
			
			if (!bad) {
				// Save to JS that this was validated
				var $cb2=$(".course_box.fsk_"+fsk+" .selection_row:visible");
				var selkey=$cb2.data("selkey");
				var cnfid=$cb2.data("cnfid");
				var selPro=BB.activeState.getSelPro(cnfid,selkey);
				selPro.cnf.cartValidated=selPro.cnf.cart;
			}
			
		});
		$(".course_cell_result.loading").text("No data received");
	});
	
}

function returnAfterEnroll() {
	if(template=="dur" && hasEnrolledCourse()){
		clearSearch(true);
	}
	cancelScheduleClick();
	$("#page_criteria .expander.collapsed").click();
	UU.caseViewCriteria();
}

function cancelScheduleClick() {
	$("body").removeClass("get-schedule");
	$(".disable-get-schedule").not(".dont-enable").removeAttr("disabled").removeAttr("aria-hidden");
	$(".disable-get-schedule button").not(".dont-enable").removeAttr("disabled");
	$(".disable-get-schedule input").not(".dont-enable").removeAttr("disabled");
	$(".disable-get-schedule select").not(".dont-enable").removeAttr("disabled");
	$("a.disable-get-schedule").not(".dont-enable").removeAttr("tabindex");
	$(".page_whiteout").removeClass("blurr");
	$(".results-top").removeClass("fade-disable");
	if($('#page_criteria .page_fader').is(':visible')){
		$('#addCourseExpander').trigger('click');
	}
	if(oneShotEnrollment && hasEnrolledCourse()){
		$(".dropdownSelect").prop("disabled",true);
		$(".reqIdCourse").prop("disabled",true);
	}
		
	$(".button_get_schedule, .button_validate_cart").show();
	$(".hideDuringEnroll").show();
	$("#crnListInfos").show();
	$("#crnListWarnings").show();
	$(".empty_warning").show();
	$(".course_box").removeClass("course_box_noround");
	$(".button_cancel_schedule").hide();
	$(".button_do_actions").hide();
	$(".button_enter_pin").hide();
	$(".button_to_cart").hide();
	$(".reg_final_bubble").hide();
	$(".button_return").hide();

	
	$("#legend_headers").hide();
	$(".reg_legend").css("overflow","hidden");

	$(".course_cell_result").remove();
	$(".course_cell_option").remove();
	$(".course_cell_action").remove();

	$(".selection_or").show();
	$(".reg_row1_enroll").hide();
	$(".reg_row1").show();
	$(".ResultsPageTitle").html(i8n.generatedResults);
	$(".to_drop").slideUp(300);

	$(".course_cell_legend").removeAttr("style").removeClass("one_col");
	$(".legend_table").removeAttr("style");
	$(".legend_box").removeAttr("style");

	$(".reg_schedule").show();
	
	$(".vsbselectionnew").show();
	
	$(".toggleExtra").show();
	BB.enrollMode = false;
	
	legend.initToggleExtraSelections(true);
	
	PAGES.checkLegend();
}

function confirmAction(){
	var modCount=0;
	$(".course_box:visible").each(function() {
		var stateA=$(this).data2("stateA");
		var stateB=$(this).data2("stateB");
		if (stateA!=stateB) {
			modCount++;
		}
	});
	if(modCount==0||!confirmActions){
		AAR.clearReportCache(); 
		doActionsClick();
		return;
	}
	var html="";
	html+="<p>Are you sure?</p>"; 
	if (modCount<=1) {
		html+="<p>Click continue to perform the indicated action on this course.</p>";
	} else {
		html+="<p>Click continue to perform the indicated actions on these "+modCount+" courses.</p>";
	}
	var buttons=[{name:"Cancel",action:function() {popupNotice.close();}},
				 {name:"Continue",action:function() {AAR.clearReportCache(); doActionsClick();}}];
	
	RR.popNotice(html,buttons);
}

function validateCourseEnrollOptions(){
	var isValid = true;
	//validate course credit enroll options
	$(".courseCreditEnrollOption").each(function(){
		$(this).parent().children("p:first").remove();
		var creditWeight = $(this).find(":selected").val();
		if(creditWeight == ""){
			$(this).parent().prepend("<p class=\"error\" style=\"color:red;\">Please select credit unit.</p>");
			isValid = false;
		}
	});
	//validate drop reason option:
	$(".courseDropReasonOption").each(function(){
		$(this).parent().children("p:first").remove();
		var dropReason = $(this).find(":selected").val();
		if(dropReason == ""){
			$(this).parent().prepend("<p class=\"error\" style=\"color:red;\">Please select an option.</p>");
			isValid = false;
		}
	});
	return isValid;
}

function doActionsClick(skipPromissory) {
	
	if (!skipPromissory) {
		RR.custUserAgreement(function(){doActionsClick(true)}, "DO_ACTIONS_CLICK");
		return;
	}

	

	$(".button_cancel_schedule").hide();
	$(".button_do_actions").hide();
	$(".button_enter_pin").hide();
	
	// Disable Options after "Do Actions" button clicked:
	$(".course_cell_action select,.course_cell_action input").attr('disabled','disabled').css('background-color', 'transparent').css('cursor','not-allowed');
	
	$(".course_cell_result").each(function() {
		//provide accessibility feedback on results:
		$(this).attr("aria-live","assertive");
		$(this).attr("aria-atomic","true");
		if ($(this).hasClass("nothing")) return;
		$(this).addClass("loading");
	});

	var i=0;
	var url="api/perform-action?conditionalAddDrop="+(conditionalAddDrop?"1":"0");
	$(".course_box:visible").each(function() {

		// Check for a bad getOptions response.
		if ($(this).find(".option_bad").length>=1) {
			$(this).find(".course_cell_result").removeClass("loading").html("Failed");
			return;
		}
		
		if ($(this).find(".course_cell_action select").val()=="none") {
			// Skip action=None courses.
			return;
		}

		var stateA = $(this).data2("stateA");
		var keyA = $(this).data2("keyA");
		var vaA = vaMap[keyA];
		var stateB = $(this).data2("stateB");
		var keyB = $(this).data2("keyB");
		var vaB = vaMap[keyB];
		
		if (stateA==null || stateB==null || $(this).data("swapTo")) {
			return;
		}
		
		var selkey=$(this).find(".selection_row:visible").data("selkey");
		var sel=getSelection(selkey);


		url+="&statea"+i+"="+stateA+"&keya"+i+"="+keyA+"&vaa"+i+"="+vaA+"&vab"+i+"="+vaB+"&stateb"+i+"="+stateB+"&keyb"+i+"="+keyB;		

		// Enrollment options
		$(this).find(".enrollmentOption").each(function () {
			var ok=$(this).data("optionkey");
			var t1=$(this).find("select").val();
			if (t1==undefined) {
				var ip=$(this).find("input");
				var t1=ip.attr("checked");
				var tp=ip.attr("type");
				if (tp=="text") {
					t1=ip.val();
				} else {
					if (ip.is(":checked")) {
						t1="true";
					} else {
						t1="false";
					}
				}
			}

			if (t1!=null && t1.length>0) {
				url+="&option"+i+"_"+ok+"="+t1;
			}

		});

		i++;
	});
	url += "&schoolTermId="+BB.activeState.term;
	url += "&cohort="+BB.activeState.results[BB.r].cohort;

	$.ajax({
		type: "GET",
		url: url
	}).fail(function(jqXHR, textStatus, errorThrown){
		var $t=$(".course_cell_result");
		$t.removeClass("loading").removeClass("nothing");
		$t.html("Error: "+(jqXHR.status==0 ? "Connection timeout. Verify Network and try again" : (jqXHR.status+" - "+textStatus))+"<br/>"+errorThrown+"<br/>on "+(new Date())+" with "+userId);
	}).done(function(html) {

		// Temporary fix for EWS error (Fix is in "Common Fixes section 3")
		//html=html.replace("Academic Program(ACAD_PROG)   Invalid value - Check and try again","Drop action unsuccessful. Only one course may be dropped at a time. Please go back to your schedule and try again, but select only one course to remove; Or you may go back to your Student Centre to action multiple drops at a time.");
		
		var probs=[];
		var $input=$(html);
		$input.find(".actionResult").each(function() {
			var fsk=$(this).data("fsk").replaceAll("\.", "\\.");
			if (fsk != undefined) {
				var $t1=$(".fsk_"+fsk.split(' ').join('.'));
				var $t2=$t1.find(".course_cell_result");
				
				$(this).find("strong").append("<br>");
				
				if (typeof custParseActionResult == "function") {
					custParseActionResult($(this).find(".actionInfoMessage")[0]);
				}
				
				if ($t2.find(".actionResult").length>0) {
					// Not first response for cell
					var _this = $(this);
					_this.find("br").after("<br>");
					$t2.append(_this);
				} else {
					var _this = $(this);
					$t2.removeClass("loading");
					_this.find("br").after("<br>");
					$t2.html(_this);
				}
				
			} else {
				probs.push($(this).html());
			}
		});
		$(".course_cell_result.loading").each(function() {
			if(probs.length == 0) {
				probs.push(html);
			}
			var _this = $(this);
			_this.removeClass("loading").removeClass("nothing").text("Problem encountered. No action taken. "+probs.join(" ")+" on "+(new Date())+" with "+userId);
			probs=[];
		});
		
		$(".button_return").show();
		$(".reg_final_bubble").show();
		$(".button_do_actions").hide();
		$(".button_enter_pin").hide();
		
		if (typeof custButtonPostCheckout == "function") {
			$("#post_checkout_tip").show();
			$(".button_post_checkout").show();
		}
		
		UU.caseCompleteEnroll();
	});
}

function changeAction(src) {
	console.log("Changing action");
	var $s=$(src);
	var revert=$s.data("revert");
	if (forceCartValidation && $s.val()=="enroll" && revert.length>0) {
		$s.val(revert);
		var msg="<p>You must add courses to your cart first, and then validate them before enrolling.</p>";
		if (revert=="none") {
			msg="<p>Courses must be validated before enrolling.</p>";
		}
		var buttons=[{name:"OK"}];
		RR.popNotice(msg,buttons);
		return;		
	}
	$(".button_do_actions").hide();
	$(".button_enter_pin").hide();
	var $cb=$s.parents(".course_box");
	if ($s.val()=="enroll") {
		$cb.data2("stateB","E");
		$cb.data2("doAction",true);
	} else if ($s.val()=="none") {
		var currState=$cb.data2("stateA");
		$cb.data2("stateB",currState);
		$cb.data2("doAction",false);
	} else {
		// val=="cart"
		$cb.data2("stateB","C");
		$cb.data2("doAction",true);
	}
	
	var updateSelKeys=maximizeSwap?maximizeSwapInRows():[];
	var thisSelKey = $cb.find(".selection_row:visible").data("selkey");
	updateSelKeys.push(thisSelKey);
	
	for (var i=0;i<updateSelKeys.length;i++) {
		var key=updateSelKeys[i];
		var $cb=$(".course_box.fsk_"+key);
		fillOptions($cb);
	}
	
	// Search for other rows with the same atomicId
	// Change them if they're not the same "goal".
	var selVal=$s.val();
	var aid=$cb.data("atomicid");
	if (aid) {
		$(".course_box").each(function() {
			if ($(this)[0]==$cb[0]) return;
			if ($(this).data("atomicid")!=aid) return;
			var $sel=$(this).find(".course_cell_action select");
			//var revert=$sel.data("revert");
			if ($sel.find("option[value="+selVal+"]").length>0) {
				$sel.val(selVal);
				//selToData($sel);
				var $cb2=$sel.parents(".course_box");
				//console.log("fill: "+$cb2[0].classList.value);
				fillOptions($cb2);
			}
		});
	}

}

function clickRemoveFromCart(selkey) {
	var url="api/perform-action?conditionalAddDrop="+(conditionalAddDrop?"1":"0")+"&statea0=C&keya0="+selkey+"&stateb0=G&keyb0="+selkey+"&schoolTermId="+BB.activeState.term;
	$.ajax({
		type: "GET",
		url: url
	}).fail(function(){
		alert("Failed to remove course from cart");
	}).done(function(html) {
		// nothing
	});
}


function clickRemoveFromEnrollment(selkey,noFct,yesFct) {
	var url1="api/enroll-options?statea=E&keya="+selkey+"&stateb=G&keyb="+selkey;
	var url2="api/perform-action?conditionalAddDrop="+(conditionalAddDrop?"1":"0")+"&statea0=E&keya0="+selkey+"&stateb0=G&keyb0="+selkey+"&schoolTermId="+BB.activeState.term;
	
	var dropNow = function() {
		
		var msg="<p id='droppingProgress'>Dropping...</p>";
		var buttons=[{name:"Close"}];
		RR.popNotice(msg,buttons);
		
		$.ajax({
		type: "GET",
			url: url1
		}).fail(function(){
			$("#droppingProgress").text("Failed to get options to drop course");
			noFct();
		}).done(function(html) {
			if (html.indexOf("None")<0) {
				$("#droppingProgress").text("Cannot do a quick drop of this course because dropping it requires one or more options to be selected. To drop this course, set it as 'Plan to drop', and then use the 'Get this Schedule' button.");
				noFct();
			} else {
				$.ajax({
				type: "GET",
					url: url2
				}).fail(function(){
					$("#droppingProgress").text("Failed to drop course");
					noFct(true);
				}).done(function(html) {
					var err=$(html).find(".actionFailMessage").text();
					if (err.length>0) {
						$("#droppingProgress").text(err);
						noFct(true);
					} else {
						$("#droppingProgress").text("Dropped");
						yesFct();
						popupNotice.close();
					}
				});
			}
		});
	}
	
	var msg="<p>What would you like to do?</p>";
	if (maximizeSwap) {
		msg+="<p><strong>Note:</strong> If you wish to try swapping this for a different course without the risk of losing the seat you already have, plan to drop it and select one new course. When you get the schedule, it will swap you from this to the new class.</p>";
	}
	var buttons=[{name:"Drop class now",action:function() {setTimeout(function(){dropNow();},120);}},{name:"Plan to drop",action:function() {popupNotice.close();noFct();}}];
	RR.popNotice(msg,buttons);
}

function userPinPopup() {
	var html = "";
	html+="<p>"+i8n.pinRegistrationLabel+"</p>"; 
	html+="<p>"+i8n.pinRegistrationMessage+"</p>";
	html+="<span><input type='text' id='userEnteredPin' size='10'/></span>";
	html+= "<div class='enroll_alert_pin_error warningNoteBad'></div>";
	var buttons=[{name:"Submit Pin",action:function() {validateUserPin();}},
		         {name:"Cancel",action:function() {popupNotice.close();}}];
	
	RR.popNotice(html,buttons);
}

function validateUserPin() {
	var term = BB.activeState.term;	
	var userEnteredPin = $("#userEnteredPin").val();
	$.getJSON("api/validateAndSaveTermPin",{term:term, pin:userEnteredPin}).done(function(data) {
		if (data) {
			var popupNotice = popupNoticeMap['#noticePopup'];
			popupNotice.close();
			cancelScheduleClick();
			getScheduleClick(false);
		} else {
			$(".enroll_alert_pin_error").html("Please enter a valid PIN.").show();
		}
	});
}